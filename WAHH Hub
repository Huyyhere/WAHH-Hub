local b64 = "LS0gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KLS0g8J+Xne+4jyBD4bqkVSBIw4xOSCBLRVkgU1lTVEVNCi0tID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CmxvY2FsIHJlcXVpcmVLZXkgPSB0cnVlIC0tIMSQ4buDIGZhbHNlIG7hur91IG114buRbiBi4buPIGtleQpsb2NhbCBrZXlzID0gewogICAgWyJXQUhILUhVQiJdID0gdHJ1ZSwKfSAKbG9jYWwgZ2V0S2V5TGluayA9ICJodHRwczovL2Rpc2NvcmQuZ2cvN2M1ZFpuZ2hEZSIgCgotLSA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQotLSDwn5qAIFNlcnZpY2VzCi0tID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CmxvY2FsIFR3ZWVuU2VydmljZSA9IGdhbWU6R2V0U2VydmljZSgiVHdlZW5TZXJ2aWNlIikKbG9jYWwgU291bmRTZXJ2aWNlID0gZ2FtZTpHZXRTZXJ2aWNlKCJTb3VuZFNlcnZpY2UiKQpsb2NhbCBSdW5TZXJ2aWNlID0gZ2FtZTpHZXRTZXJ2aWNlKCJSdW5TZXJ2aWNlIikKbG9jYWwgTGlnaHRpbmcgPSBnYW1lOkdldFNlcnZpY2UoIkxpZ2h0aW5nIikKbG9jYWwgUGxheWVycyA9IGdhbWU6R2V0U2VydmljZSgiUGxheWVycyIpCmxvY2FsIFVzZXJJbnB1dFNlcnZpY2UgPSBnYW1lOkdldFNlcnZpY2UoIlVzZXJJbnB1dFNlcnZpY2UiKQoKbG9jYWwgcGxheWVyID0gUGxheWVycy5Mb2NhbFBsYXllcgoKCi0tID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ci0tIPCfjrYgTmjhuqFjIG7hu4FuIGFuaW1lCi0tID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CmxvY2FsIEJHTXVzaWMgPSBJbnN0YW5jZS5uZXcoIlNvdW5kIiwgU291bmRTZXJ2aWNlKQpCR011c2ljLlNvdW5kSWQgPSAicmJ4YXNzZXRpZDovLzE4MzkyNDYwMDUiIApCR011c2ljLlZvbHVtZSA9IDEuMgpCR011c2ljLkxvb3BlZCA9IHRydWUKQkdNdXNpYzpQbGF5KCkKCi0tID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ci0tIPCfjJ8gU2NyZWVuR3VpCi0tID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CmxvY2FsIFNjcmVlbkd1aSA9IEluc3RhbmNlLm5ldygiU2NyZWVuR3VpIiwgZ2FtZS5Db3JlR3VpKQpTY3JlZW5HdWkuTmFtZSA9ICJXQUhISHViVUkiCgotLSA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQotLSDwn5KWIFdFTENPTUUgQU5JTUFUSU9OIChHw7UgY2jhu68gKyBab29tLWluKQotLSA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQpsb2NhbCBXZWxjb21lRnJhbWUgPSBJbnN0YW5jZS5uZXcoIkZyYW1lIiwgU2NyZWVuR3VpKQpXZWxjb21lRnJhbWUuU2l6ZSA9IFVEaW0yLm5ldygxLCAwLCAxLCAwKQpXZWxjb21lRnJhbWUuQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDEKCmxvY2FsIFdlbGNvbWVUZXh0ID0gSW5zdGFuY2UubmV3KCJUZXh0TGFiZWwiLCBXZWxjb21lRnJhbWUpCldlbGNvbWVUZXh0LlNpemUgPSBVRGltMi5uZXcoMSwgMCwgMC4yLCAwKQpXZWxjb21lVGV4dC5Qb3NpdGlvbiA9IFVEaW0yLm5ldygwLCAwLCAwLjM1LCAwKQpXZWxjb21lVGV4dC5UZXh0ID0gIiIKV2VsY29tZVRleHQuVGV4dENvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjIzLCAxODYpCldlbGNvbWVUZXh0LkZvbnQgPSBFbnVtLkZvbnQuRnJlZG9rYU9uZQpXZWxjb21lVGV4dC5UZXh0U2l6ZSA9IDcyCldlbGNvbWVUZXh0LlRleHRTdHJva2VUcmFuc3BhcmVuY3kgPSAwLjIKV2VsY29tZVRleHQuQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDEKCmxvY2FsIHdlbGNvbWVUZXh0ID0gIuKcqCBXZWxjb21lIHRvIFdBSEggSHViIPCfjLgiCmZvciBpID0gMSwgI3dlbGNvbWVUZXh0IGRvCiAgICBXZWxjb21lVGV4dC5UZXh0ID0gc3RyaW5nLnN1Yih3ZWxjb21lVGV4dCwgMSwgaSkKICAgIHdhaXQoMC4wNCkKZW5kCgpUd2VlblNlcnZpY2U6Q3JlYXRlKAogICAgV2VsY29tZVRleHQsCiAgICBUd2VlbkluZm8ubmV3KDEuNSwgRW51bS5FYXNpbmdTdHlsZS5CYWNrLCBFbnVtLkVhc2luZ0RpcmVjdGlvbi5PdXQpLAogICAge1RleHRUcmFuc3BhcmVuY3kgPSAxLCBUZXh0U2l6ZSA9IDkwfQopOlBsYXkoKQoKd2FpdCgyKQpXZWxjb21lRnJhbWU6RGVzdHJveSgpCgotLSA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQotLSDwn4y4IFRSQU5HIFRSw40gNCBHw5NDIE3DgE4gSMOMTkgKLS0gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KbG9jYWwgZnVuY3Rpb24gY3JlYXRlQ29ybmVyRGVjb3JhdGlvbigpCiAgICBsb2NhbCBwb3NpdGlvbnMgPSB7CiAgICAgICAgVURpbTIubmV3KDAsIDIwLCAwLCAyMCksIC0tIFRyw6puIHRyw6FpCiAgICAgICAgVURpbTIubmV3KDEsIC0xMDAsIDAsIDIwKSwgLS0gVHLDqm4gcGjhuqNpCiAgICAgICAgVURpbTIubmV3KDAsIDIwLCAxLCAtMTAwKSwgLS0gRMaw4bubaSB0csOhaQogICAgICAgIFVEaW0yLm5ldygxLCAtMTAwLCAxLCAtMTAwKSAtLSBExrDhu5tpIHBo4bqjaQogICAgfQoKICAgIGZvciBfLCBwb3MgaW4gcGFpcnMocG9zaXRpb25zKSBkbwogICAgICAgIGxvY2FsIGljb24gPSBJbnN0YW5jZS5uZXcoIkltYWdlTGFiZWwiLCBTY3JlZW5HdWkpCiAgICAgICAgaWNvbi5TaXplID0gVURpbTIubmV3KDAsIDgwLCAwLCA4MCkKICAgICAgICBpY29uLlBvc2l0aW9uID0gcG9zCiAgICAgICAgaWNvbi5CYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMQogICAgICAgIGljb24uSW1hZ2UgPSAicmJ4YXNzZXRpZDovLzEwOTk0NjEwNTUyIiAKICAgICAgICBpY29uLkltYWdlVHJhbnNwYXJlbmN5ID0gMC40CiAgICAgICAgaWNvbi5Sb3RhdGlvbiA9IG1hdGgucmFuZG9tKDAsIDM2MCkKICAgIGVuZAplbmQKY3JlYXRlQ29ybmVyRGVjb3JhdGlvbigpCgoKCi0tID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ci0tIPCfjocgRklSRVdPUktTIEVGRkVDVCAoUGjDoW8gaG9hIHLhu7FjIHLhu6EgaMahbikKLS0gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KbG9jYWwgZnVuY3Rpb24gY3JlYXRlRmlyZXdvcmsoKQogICAgZm9yIGkgPSAxLCA1MCBkbwogICAgICAgIGxvY2FsIHN0YXIgPSBJbnN0YW5jZS5uZXcoIkltYWdlTGFiZWwiLCBTY3JlZW5HdWkpCiAgICAgICAgc3Rhci5TaXplID0gVURpbTIubmV3KDAsIG1hdGgucmFuZG9tKDIwLCA0MCksIDAsIG1hdGgucmFuZG9tKDIwLCA0MCkpCiAgICAgICAgc3Rhci5Qb3NpdGlvbiA9IFVEaW0yLm5ldyhtYXRoLnJhbmRvbSgpLCAwLCBtYXRoLnJhbmRvbSgpLCAwKQogICAgICAgIHN0YXIuSW1hZ2UgPSAicmJ4YXNzZXRpZDovLzc3MTIyMTgzMjUiCiAgICAgICAgc3Rhci5CYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMQogICAgICAgIHN0YXIuSW1hZ2VUcmFuc3BhcmVuY3kgPSAwLjIKICAgICAgICBzdGFyLkltYWdlQ29sb3IzID0gQ29sb3IzLmZyb21SR0IobWF0aC5yYW5kb20oMTUwLCAyNTUpLCBtYXRoLnJhbmRvbSgxMDAsIDI1NSksIG1hdGgucmFuZG9tKDEwMCwgMjU1KSkKCiAgICAgICAgVHdlZW5TZXJ2aWNlOkNyZWF0ZShzdGFyLCBUd2VlbkluZm8ubmV3KDEuNSwgRW51bS5FYXNpbmdTdHlsZS5FeHBvbmVudGlhbCksIHsKICAgICAgICAgICAgUG9zaXRpb24gPSBVRGltMi5uZXcobWF0aC5yYW5kb20oKSwgMCwgbWF0aC5yYW5kb20oKSwgMCksCiAgICAgICAgICAgIEltYWdlVHJhbnNwYXJlbmN5ID0gMQogICAgICAgIH0pOlBsYXkoKQoKICAgICAgICB3YWl0KDAuMDIpCiAgICAgICAgc3RhcjpEZXN0cm95KCkKICAgIGVuZAplbmQKCi0tID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ci0tIPCflJEgSEnhu4JOIFRI4buKIFVJIEtFWSBDSOG7iCBLSEkgcmVxdWlyZUtleSA9IHRydWUKLS0gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KaWYgcmVxdWlyZUtleSB0aGVuCiAgICAtLSBU4bqgTyBVSSBLRVkgU1lTVEVNCiAgICBsb2NhbCBGcmFtZSA9IEluc3RhbmNlLm5ldygiRnJhbWUiLCBTY3JlZW5HdWkpCiAgICBGcmFtZS5TaXplID0gVURpbTIubmV3KDAsIDQ2MCwgMCwgMzQwKQogICAgRnJhbWUuUG9zaXRpb24gPSBVRGltMi5uZXcoMC41LCAtMjMwLCAxLCAwKSAtLSDhuqhuIHBow61hIGTGsOG7m2kKICAgIEZyYW1lLkJhY2tncm91bmRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigyNSwgMjUsIDI1KQogICAgRnJhbWUuQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDAuMTUKCiAgICAtLSDwn4yfIEJvIGfDs2MgbeG7gW0gbeG6oWkKICAgIGxvY2FsIFVJQ29ybmVyID0gSW5zdGFuY2UubmV3KCJVSUNvcm5lciIsIEZyYW1lKQogICAgVUlDb3JuZXIuQ29ybmVyUmFkaXVzID0gVURpbS5uZXcoMCwgMTIpCgogICAgLS0gVmnhu4FuIMSR4bq5cCBoxqFuCiAgICBsb2NhbCBVSVN0cm9rZSA9IEluc3RhbmNlLm5ldygiVUlTdHJva2UiLCBGcmFtZSkKICAgIFVJU3Ryb2tlLlRoaWNrbmVzcyA9IDQKICAgIFVJU3Ryb2tlLkNvbG9yID0gQ29sb3IzLmZyb21SR0IoMjU1LCAxODAsIDApCgogICAgLS0g4pyoIEhp4buHdSDhu6luZyB4deG6pXQgaGnhu4duCiAgICBUd2VlblNlcnZpY2U6Q3JlYXRlKAogICAgICAgIEZyYW1lLAogICAgICAgIFR3ZWVuSW5mby5uZXcoMSwgRW51bS5FYXNpbmdTdHlsZS5CYWNrLCBFbnVtLkVhc2luZ0RpcmVjdGlvbi5PdXQpLAogICAgICAgIHtQb3NpdGlvbiA9IFVEaW0yLm5ldygwLjUsIC0yMzAsIDAuNSwgLTE3MCl9CiAgICApOlBsYXkoKQoKICAgIC0tIPCfko4gVGl0bGUKICAgIGxvY2FsIFRpdGxlTGFiZWwgPSBJbnN0YW5jZS5uZXcoIlRleHRMYWJlbCIsIEZyYW1lKQogICAgVGl0bGVMYWJlbC5TaXplID0gVURpbTIubmV3KDEsIDAsIDAsIDYwKQogICAgVGl0bGVMYWJlbC5Qb3NpdGlvbiA9IFVEaW0yLm5ldygwLCAwLCAwLjA1LCAwKQogICAgVGl0bGVMYWJlbC5CYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMQogICAgVGl0bGVMYWJlbC5UZXh0ID0gIvCfjJ8gS2V5IFN5c3RlbSBmb3IgV0FISCBIdWIg8J+SqyIKICAgIFRpdGxlTGFiZWwuVGV4dENvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjE1LCAwKQogICAgVGl0bGVMYWJlbC5Gb250ID0gRW51bS5Gb250LkZyZWRva2FPbmUKICAgIFRpdGxlTGFiZWwuVGV4dFNpemUgPSAyOAoKICAgIC0tIPCfk6UgS2V5IElucHV0CiAgICBsb2NhbCBUZXh0Qm94ID0gSW5zdGFuY2UubmV3KCJUZXh0Qm94IiwgRnJhbWUpCiAgICBUZXh0Qm94LlNpemUgPSBVRGltMi5uZXcoMCwgMzUwLCAwLCA2MCkKICAgIFRleHRCb3guUG9zaXRpb24gPSBVRGltMi5uZXcoMC41LCAtMTc1LCAwLjM1LCAwKQogICAgVGV4dEJveC5QbGFjZWhvbGRlclRleHQgPSAi8J+UkSBFbnRlciBZb3VyIFNlY3JldCBLZXkiCiAgICBUZXh0Qm94LkZvbnQgPSBFbnVtLkZvbnQuR290aGFtQm9sZAogICAgVGV4dEJveC5UZXh0U2l6ZSA9IDI0CiAgICBUZXh0Qm94LkJhY2tncm91bmRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQig0MCwgNDAsIDQwKQogICAgVGV4dEJveC5UZXh0Q29sb3IzID0gQ29sb3IzLmZyb21SR0IoMjU1LCAyNTUsIDI1NSkKCiAgICBsb2NhbCBUZXh0Qm94Q29ybmVyID0gSW5zdGFuY2UubmV3KCJVSUNvcm5lciIsIFRleHRCb3gpCiAgICBUZXh0Qm94Q29ybmVyLkNvcm5lclJhZGl1cyA9IFVEaW0ubmV3KDAsIDEwKQoKICAgIC0tIPCfmoAgU3VibWl0IEJ1dHRvbgogICAgbG9jYWwgU3VibWl0QnV0dG9uID0gSW5zdGFuY2UubmV3KCJUZXh0QnV0dG9uIiwgRnJhbWUpCiAgICBTdWJtaXRCdXR0b24uU2l6ZSA9IFVEaW0yLm5ldygwLCAxNTAsIDAsIDU1KQogICAgU3VibWl0QnV0dG9uLlBvc2l0aW9uID0gVURpbTIubmV3KDAuNSwgLTE2NSwgMC43LCAwKQogICAgU3VibWl0QnV0dG9uLlRleHQgPSAi4pyFIEVudGVyIgogICAgU3VibWl0QnV0dG9uLkJhY2tncm91bmRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigwLCAxODAsIDApCiAgICBTdWJtaXRCdXR0b24uVGV4dFNpemUgPSAyMgoKICAgIGxvY2FsIFN1Ym1pdEJ1dHRvbkNvcm5lciA9IEluc3RhbmNlLm5ldygiVUlDb3JuZXIiLCBTdWJtaXRCdXR0b24pCiAgICBTdWJtaXRCdXR0b25Db3JuZXIuQ29ybmVyUmFkaXVzID0gVURpbS5uZXcoMCwgMTApCgogICAgLS0g8J+UkSBHZXQgS2V5IEJ1dHRvbgogICAgbG9jYWwgR2V0S2V5QnV0dG9uID0gSW5zdGFuY2UubmV3KCJUZXh0QnV0dG9uIiwgRnJhbWUpCiAgICBHZXRLZXlCdXR0b24uU2l6ZSA9IFVEaW0yLm5ldygwLCAxNTAsIDAsIDU1KQogICAgR2V0S2V5QnV0dG9uLlBvc2l0aW9uID0gVURpbTIubmV3KDAuNSwgMTUsIDAuNywgMCkKICAgIEdldEtleUJ1dHRvbi5UZXh0ID0gIvCflJcgR2V0IEtleSIKICAgIEdldEtleUJ1dHRvbi5CYWNrZ3JvdW5kQ29sb3IzID0gQ29sb3IzLmZyb21SR0IoMjAwLCA4MCwgMCkKICAgIEdldEtleUJ1dHRvbi5UZXh0U2l6ZSA9IDIyCgogICAgbG9jYWwgR2V0S2V5QnV0dG9uQ29ybmVyID0gSW5zdGFuY2UubmV3KCJVSUNvcm5lciIsIEdldEtleUJ1dHRvbikKICAgIEdldEtleUJ1dHRvbkNvcm5lci5Db3JuZXJSYWRpdXMgPSBVRGltLm5ldygwLCAxMCkKCiAgICBHZXRLZXlCdXR0b24uTW91c2VCdXR0b24xQ2xpY2s6Q29ubmVjdChmdW5jdGlvbigpCiAgICAgICAgc2V0Y2xpcGJvYXJkKGdldEtleUxpbmspCiAgICAgICAgR2V0S2V5QnV0dG9uLlRleHQgPSAi4pyFIENvcGllZCEiCiAgICAgICAgd2FpdCgyKQogICAgICAgIEdldEtleUJ1dHRvbi5UZXh0ID0gIvCflJcgR2V0IEtleSIKICAgIGVuZCkKCiAgICAtLSDwn5uRIE7DunQgWCDEkcOzbmcgVUkgbmdheSBs4bqtcCB04bupYwpsb2NhbCBDbG9zZUJ1dHRvbiA9IEluc3RhbmNlLm5ldygiVGV4dEJ1dHRvbiIsIEZyYW1lKQpDbG9zZUJ1dHRvbi5TaXplID0gVURpbTIubmV3KDAsIDQwLCAwLCA0MCkKQ2xvc2VCdXR0b24uUG9zaXRpb24gPSBVRGltMi5uZXcoMSwgLTUwLCAwLCAxMCkKQ2xvc2VCdXR0b24uVGV4dCA9ICJYIgpDbG9zZUJ1dHRvbi5UZXh0U2l6ZSA9IDIyCkNsb3NlQnV0dG9uLlRleHRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KQpDbG9zZUJ1dHRvbi5CYWNrZ3JvdW5kQ29sb3IzID0gQ29sb3IzLmZyb21SR0IoMjAwLCAwLCAwKQoKbG9jYWwgQ2xvc2VDb3JuZXIgPSBJbnN0YW5jZS5uZXcoIlVJQ29ybmVyIiwgQ2xvc2VCdXR0b24pCkNsb3NlQ29ybmVyLkNvcm5lclJhZGl1cyA9IFVEaW0ubmV3KDAsIDgpCgotLSDwn4yfIFVJIFjDoWMgTmjhuq1uCmxvY2FsIENvbmZpcm1GcmFtZSA9IEluc3RhbmNlLm5ldygiRnJhbWUiLCBTY3JlZW5HdWkpCkNvbmZpcm1GcmFtZS5TaXplID0gVURpbTIubmV3KDAsIDQwMCwgMCwgMjAwKQpDb25maXJtRnJhbWUuUG9zaXRpb24gPSBVRGltMi5uZXcoMC41LCAtMjAwLCAwLjUsIC0xMDApCkNvbmZpcm1GcmFtZS5CYWNrZ3JvdW5kQ29sb3IzID0gQ29sb3IzLmZyb21SR0IoMzAsIDMwLCAzMCkKQ29uZmlybUZyYW1lLkJhY2tncm91bmRUcmFuc3BhcmVuY3kgPSAwLjIKQ29uZmlybUZyYW1lLlZpc2libGUgPSBmYWxzZSAtLSDhuqhuIGJhbiDEkeG6p3UKCmxvY2FsIENvbmZpcm1Db3JuZXIgPSBJbnN0YW5jZS5uZXcoIlVJQ29ybmVyIiwgQ29uZmlybUZyYW1lKQpDb25maXJtQ29ybmVyLkNvcm5lclJhZGl1cyA9IFVEaW0ubmV3KDAsIDEyKQoKbG9jYWwgQ29uZmlybVN0cm9rZSA9IEluc3RhbmNlLm5ldygiVUlTdHJva2UiLCBDb25maXJtRnJhbWUpCkNvbmZpcm1TdHJva2UuVGhpY2tuZXNzID0gNApDb25maXJtU3Ryb2tlLkNvbG9yID0gQ29sb3IzLmZyb21SR0IoMjU1LCAxODAsIDApCgpsb2NhbCBDb25maXJtVGV4dCA9IEluc3RhbmNlLm5ldygiVGV4dExhYmVsIiwgQ29uZmlybUZyYW1lKQpDb25maXJtVGV4dC5TaXplID0gVURpbTIubmV3KDEsIDAsIDAuNCwgMCkKQ29uZmlybVRleHQuVGV4dCA9ICLimqDvuI8gQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIGV4aXQ/IgpDb25maXJtVGV4dC5UZXh0U2l6ZSA9IDIyCkNvbmZpcm1UZXh0LkZvbnQgPSBFbnVtLkZvbnQuRnJlZG9rYU9uZQpDb25maXJtVGV4dC5UZXh0Q29sb3IzID0gQ29sb3IzLmZyb21SR0IoMjU1LCAyMjMsIDE4NikKQ29uZmlybVRleHQuQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDEKCi0tIPCfmoAgTsO6dCBZZXMKbG9jYWwgWWVzQnV0dG9uID0gSW5zdGFuY2UubmV3KCJUZXh0QnV0dG9uIiwgQ29uZmlybUZyYW1lKQpZZXNCdXR0b24uU2l6ZSA9IFVEaW0yLm5ldygwLjQsIDAsIDAuMywgMCkKWWVzQnV0dG9uLlBvc2l0aW9uID0gVURpbTIubmV3KDAuMSwgMCwgMC42LCAwKQpZZXNCdXR0b24uVGV4dCA9ICLinIUgWWVzIgpZZXNCdXR0b24uRm9udCA9IEVudW0uRm9udC5Hb3RoYW1Cb2xkClllc0J1dHRvbi5UZXh0U2l6ZSA9IDIyClllc0J1dHRvbi5CYWNrZ3JvdW5kQ29sb3IzID0gQ29sb3IzLmZyb21SR0IoMCwgMjU1LCAxMjcpCgpsb2NhbCBZZXNDb3JuZXIgPSBJbnN0YW5jZS5uZXcoIlVJQ29ybmVyIiwgWWVzQnV0dG9uKQpZZXNDb3JuZXIuQ29ybmVyUmFkaXVzID0gVURpbS5uZXcoMCwgMTApCgotLSDinYwgTsO6dCBObwpsb2NhbCBOb0J1dHRvbiA9IEluc3RhbmNlLm5ldygiVGV4dEJ1dHRvbiIsIENvbmZpcm1GcmFtZSkKTm9CdXR0b24uU2l6ZSA9IFVEaW0yLm5ldygwLjQsIDAsIDAuMywgMCkKTm9CdXR0b24uUG9zaXRpb24gPSBVRGltMi5uZXcoMC41LCAwLCAwLjYsIDApCk5vQnV0dG9uLlRleHQgPSAi4p2MIE5vIgpOb0J1dHRvbi5Gb250ID0gRW51bS5Gb250LkdvdGhhbUJvbGQKTm9CdXR0b24uVGV4dFNpemUgPSAyMgpOb0J1dHRvbi5CYWNrZ3JvdW5kQ29sb3IzID0gQ29sb3IzLmZyb21SR0IoMjU1LCA1MCwgNTApCgpsb2NhbCBOb0Nvcm5lciA9IEluc3RhbmNlLm5ldygiVUlDb3JuZXIiLCBOb0J1dHRvbikKTm9Db3JuZXIuQ29ybmVyUmFkaXVzID0gVURpbS5uZXcoMCwgMTApCgotLSDwn5ugIEhp4buHbiBVSSBuaGFuaCBoxqFuCmxvY2FsIGZ1bmN0aW9uIHNob3dDb25maXJtKCkKICAgIENvbmZpcm1GcmFtZS5WaXNpYmxlID0gdHJ1ZSAtLSBIaeG7h24gbmdheSBs4bqtcCB04bupYwogICAgRnJhbWUuVmlzaWJsZSA9IGZhbHNlIC0tIOG6qG4gVUkgbmjhuq1wIGtleQogICAgVHdlZW5TZXJ2aWNlOkNyZWF0ZShDb25maXJtRnJhbWUsIFR3ZWVuSW5mby5uZXcoMC4yKSwge0JhY2tncm91bmRUcmFuc3BhcmVuY3kgPSAwLjJ9KTpQbGF5KCkKZW5kCgotLSDwn5SlIE5o4bqlbiBYID0+IEhp4buHbiBVSSB4w6FjIG5o4bqtbiBuZ2F5CkNsb3NlQnV0dG9uLk1vdXNlQnV0dG9uMUNsaWNrOkNvbm5lY3Qoc2hvd0NvbmZpcm0pCgotLSDinIUgTmjhuqVuIFllcyA9PiDEkMOzbmcgVUkgbmdheSBs4bqtcCB04bupYwpZZXNCdXR0b24uTW91c2VCdXR0b24xQ2xpY2s6Q29ubmVjdChmdW5jdGlvbigpCiAgICBTY3JlZW5HdWk6RGVzdHJveSgpCmVuZCkKCi0tIOKdjCBOaOG6pW4gTm8gPT4gUXVheSBs4bqhaSBVSSBuaOG6rXAga2V5IG5nYXkKTm9CdXR0b24uTW91c2VCdXR0b24xQ2xpY2s6Q29ubmVjdChmdW5jdGlvbigpCiAgICBDb25maXJtRnJhbWUuVmlzaWJsZSA9IGZhbHNlIC0tIOG6qG4gbmdheQogICAgRnJhbWUuVmlzaWJsZSA9IHRydWUgLS0gSGnhu4duIGzhuqFpIFVJIG5o4bqtcCBrZXkKZW5kKQoKCiAgICAtLSDinIUgS2V5IFZlcmlmaWNhdGlvbiBGdW5jdGlvbgogICAgbG9jYWwgZnVuY3Rpb24gc3VibWl0S2V5KCkKICAgICAgICBsb2NhbCBpbnB1dEtleSA9IFRleHRCb3guVGV4dCAtLSBHZXQgdXNlciBpbnB1dAoKICAgICAgICBpZiBrZXlzW2lucHV0S2V5XSB0aGVuCiAgICAgICAgICAgIC0tIOKchSBLZXkgaXMgY29ycmVjdAogICAgICAgICAgICBUaXRsZUxhYmVsLlRleHQgPSAi4pyFIEtleSBWZXJpZmllZCEgU3RhcnRpbmcgV0FISCBIdWIuLi4iCiAgICAgICAgICAgIFRpdGxlTGFiZWwuVGV4dENvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDAsIDI1NSwgMTI3KQoKICAgICAgICAgICAgLS0gSGlkZSBLZXkgVUkgc21vb3RobHkKICAgICAgICAgICAgVHdlZW5TZXJ2aWNlOkNyZWF0ZShGcmFtZSwgVHdlZW5JbmZvLm5ldygwLjgsIEVudW0uRWFzaW5nU3R5bGUuUXVhZCwgRW51bS5FYXNpbmdEaXJlY3Rpb24uT3V0KSwge0JhY2tncm91bmRUcmFuc3BhcmVuY3kgPSAxfSk6UGxheSgpCgogICAgICAgICAgICB3YWl0KDAuNSkKICAgICAgICAgICAgRnJhbWUuVmlzaWJsZSA9IGZhbHNlCgogICAgICAgICAgICAtLSBEZWJ1Z2dpbmcgUHJpbnQKICAgICAgICAgICAgcHJpbnQoIuKchSBLZXkgQWNjZXB0ZWQhIExvYWRpbmcgTWFpbiBVSS4uLiIpCgogICAgICAgICAgICAtLSDwn5qAIExvYWQgdGhlIE1haW4gSHViIFVJIGFmdGVyIGEgc2hvcnQgZGVsYXkKICAgICAgICAgICAgd2FpdCgxKQogICAgICAgICAgICBTY3JlZW5HdWk6RGVzdHJveSgpCgogICAgICAgICAgICAtLSDwn46uIExvYWQgTWFpbiBVSQogICAgICAgICAgICBsb2FkTWFpbkh1YlVJKCkKCiAgICAgICAgZWxzZQogICAgICAgICAgICAtLSDinYwgV3Jvbmcga2V5IC0gU2hha2UgZWZmZWN0CiAgICAgICAgICAgIFRpdGxlTGFiZWwuVGV4dCA9ICLinYwgV3JvbmcgS2V5ISBUcnkgQWdhaW4uIgogICAgICAgICAgICBUaXRsZUxhYmVsLlRleHRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigyNTUsIDUwLCA1MCkKCiAgICAgICAgICAgIGZvciBpID0gMSwgNCBkbwogICAgICAgICAgICAgICAgVHdlZW5TZXJ2aWNlOkNyZWF0ZSgKICAgICAgICAgICAgICAgICAgICBGcmFtZSwKICAgICAgICAgICAgICAgICAgICBUd2VlbkluZm8ubmV3KDAuMDUsIEVudW0uRWFzaW5nU3R5bGUuTGluZWFyLCBFbnVtLkVhc2luZ0RpcmVjdGlvbi5Jbk91dCksCiAgICAgICAgICAgICAgICAgICAge1Bvc2l0aW9uID0gVURpbTIubmV3KDAuNSwgLTIzMCArIG1hdGgucmFuZG9tKC01LDUpLCAwLjUsIC0xNzApfQogICAgICAgICAgICAgICAgKTpQbGF5KCkKICAgICAgICAgICAgICAgIHdhaXQoMC4wNSkKICAgICAgICAgICAgZW5kCgogICAgICAgICAgICB3YWl0KDIpCiAgICAgICAgICAgIFRpdGxlTGFiZWwuVGV4dCA9ICLwn4yfIEVudGVyIFlvdXIgS2V5IGZvciBXQUhIIEh1YiDwn5KrIgogICAgICAgICAgICBUaXRsZUxhYmVsLlRleHRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigyNTUsIDIxNSwgMCkKICAgICAgICBlbmQKICAgIGVuZAoKICAgIC0tIOKchSBBbGxvdyBjbGlja2luZyB0aGUgU3VibWl0IEJ1dHRvbgogICAgU3VibWl0QnV0dG9uLk1vdXNlQnV0dG9uMUNsaWNrOkNvbm5lY3Qoc3VibWl0S2V5KQoKICAgIC0tIOKchSBBbGxvdyBwcmVzc2luZyAiRW50ZXIiIGtleSB0byBzdWJtaXQgdGhlIGtleQogICAgVGV4dEJveC5Gb2N1c0xvc3Q6Q29ubmVjdChmdW5jdGlvbihlbnRlclByZXNzZWQpCiAgICAgICAgaWYgZW50ZXJQcmVzc2VkIHRoZW4KICAgICAgICAgICAgc3VibWl0S2V5KCkKICAgICAgICBlbmQKICAgIGVuZCkKZW5kCgotLSA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQotLSDwn46uIE1haW4gSHViIFVJIEZ1bmN0aW9uCi0tID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CmZ1bmN0aW9uIGxvYWRNYWluSHViVUkoKQogICAgcHJpbnQoIvCflqXvuI8gQ3JlYXRpbmcgTWFpbiBVSS4uLiIpIC0tIERlYnVnZ2luZyBQcmludAogICAgLS0g8J+agCBTZXJ2aWNlcwpsb2NhbCBUd2VlblNlcnZpY2UgPSBnYW1lOkdldFNlcnZpY2UoIlR3ZWVuU2VydmljZSIpCmxvY2FsIFBsYXllcnMgPSBnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKQpsb2NhbCBSdW5TZXJ2aWNlID0gZ2FtZTpHZXRTZXJ2aWNlKCJSdW5TZXJ2aWNlIikKbG9jYWwgTWFya2V0cGxhY2VTZXJ2aWNlID0gZ2FtZTpHZXRTZXJ2aWNlKCJNYXJrZXRwbGFjZVNlcnZpY2UiKQoKbG9jYWwgcGxheWVyID0gUGxheWVycy5Mb2NhbFBsYXllcgpsb2NhbCBnYW1lTmFtZSA9IE1hcmtldHBsYWNlU2VydmljZTpHZXRQcm9kdWN0SW5mbyhnYW1lLlBsYWNlSWQpLk5hbWUKCi0tIPCflI0gVOG7sSDEkeG7mW5nIGtp4buDbSB0cmEgZXhwbG9pdApsb2NhbCBmdW5jdGlvbiBkZXRlY3RFeHBsb2l0KCkKICAgIGlmIHN5biB0aGVuCiAgICAgICAgcmV0dXJuICJTeW5hcHNlIFgiCiAgICBlbHNlaWYgaXNfc2lyaHVydF9jbG9zdXJlIHRoZW4KICAgICAgICByZXR1cm4gIlNpckh1cnQiCiAgICBlbHNlaWYgc2VjdXJlX2xvYWQgdGhlbgogICAgICAgIHJldHVybiAiU2VudGluZWwiCiAgICBlbHNlaWYgS1JOTF9MT0FERUQgdGhlbgogICAgICAgIHJldHVybiAiS1JOTCIKICAgIGVsc2VpZiBnZXRleGVjdXRvcm5hbWUgdGhlbgogICAgICAgIHJldHVybiBnZXRleGVjdXRvcm5hbWUoKQogICAgZWxzZQogICAgICAgIHJldHVybiAiVW5rbm93biIKICAgIGVuZAplbmQKCmxvY2FsIGV4cGxvaXQgPSBkZXRlY3RFeHBsb2l0KCkKCi0tIPCflqXvuI8gU2NyZWVuIEdVSQpsb2NhbCBTY3JlZW5HdWkgPSBJbnN0YW5jZS5uZXcoIlNjcmVlbkd1aSIsIGdhbWUuQ29yZUd1aSkKU2NyZWVuR3VpLk5hbWUgPSAiV0FISF9IdWJVSSIKCi0tIPCfk4wgTWFpbiBVSSAoS2h1bmcgY2jDrW5oICsgVmnhu4FuKQpsb2NhbCBNYWluRnJhbWUgPSBJbnN0YW5jZS5uZXcoIkZyYW1lIiwgU2NyZWVuR3VpKQpNYWluRnJhbWUuU2l6ZSA9IFVEaW0yLm5ldygwLCA4NTAsIDAsIDU1MCkKTWFpbkZyYW1lLlBvc2l0aW9uID0gVURpbTIubmV3KDAuNSwgLTQyNSwgMC41LCAtMjc1KQpNYWluRnJhbWUuQmFja2dyb3VuZENvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDI1LCAyNSwgMzApCk1haW5GcmFtZS5BY3RpdmUgPSB0cnVlCk1haW5GcmFtZS5EcmFnZ2FibGUgPSB0cnVlCgpsb2NhbCBVSUNvcm5lciA9IEluc3RhbmNlLm5ldygiVUlDb3JuZXIiLCBNYWluRnJhbWUpClVJQ29ybmVyLkNvcm5lclJhZGl1cyA9IFVEaW0ubmV3KDAsIDEwKQoKbG9jYWwgVUlTdHJva2UgPSBJbnN0YW5jZS5uZXcoIlVJU3Ryb2tlIiwgTWFpbkZyYW1lKQpVSVN0cm9rZS5UaGlja25lc3MgPSA0ClVJU3Ryb2tlLkNvbG9yID0gQ29sb3IzLmZyb21SR0IoMjU1LCAxODAsIDI1NSkgLS0gVmnhu4FuIGjhu5NuZwoKLS0g4pyoIEhp4buHdSDhu6luZyBt4bufIFVJCk1haW5GcmFtZS5Qb3NpdGlvbiA9IFVEaW0yLm5ldygwLjUsIC00MjUsIDEsIDApClR3ZWVuU2VydmljZTpDcmVhdGUoCiAgICBNYWluRnJhbWUsCiAgICBUd2VlbkluZm8ubmV3KDAuOCwgRW51bS5FYXNpbmdTdHlsZS5CYWNrLCBFbnVtLkVhc2luZ0RpcmVjdGlvbi5PdXQpLAogICAge1Bvc2l0aW9uID0gVURpbTIubmV3KDAuNSwgLTQyNSwgMC41LCAtMjc1KX0KKTpQbGF5KCkKCi0tIPCfk4wgVGnDqnUgxJHhu4EgKyBOw7p0IFgKbG9jYWwgVGl0bGVCYXIgPSBJbnN0YW5jZS5uZXcoIkZyYW1lIiwgTWFpbkZyYW1lKQpUaXRsZUJhci5TaXplID0gVURpbTIubmV3KDEsIDAsIDAsIDUwKQpUaXRsZUJhci5CYWNrZ3JvdW5kQ29sb3IzID0gQ29sb3IzLmZyb21SR0IoMzUsIDM1LCA1MCkKCmxvY2FsIFRpdGxlTGFiZWwgPSBJbnN0YW5jZS5uZXcoIlRleHRMYWJlbCIsIFRpdGxlQmFyKQpUaXRsZUxhYmVsLlNpemUgPSBVRGltMi5uZXcoMSwgLTUwLCAxLCAwKQpUaXRsZUxhYmVsLlRleHQgPSAi8J+MuCBXQUhIIEh1YiBTY3JpcHQgLSBSb2Jsb3ggdjAuMC4xIEJ5IEh1eXloZXJlICYgVGFubnkg8J+MuCIKVGl0bGVMYWJlbC5UZXh0Q29sb3IzID0gQ29sb3IzLmZyb21SR0IoMjU1LCAxODAsIDI1NSkKVGl0bGVMYWJlbC5Gb250ID0gRW51bS5Gb250LkZyZWRva2FPbmUKVGl0bGVMYWJlbC5UZXh0U2l6ZSA9IDIyClRpdGxlTGFiZWwuQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDEKVGl0bGVMYWJlbC5UZXh0WEFsaWdubWVudCA9IEVudW0uVGV4dFhBbGlnbm1lbnQuTGVmdApUaXRsZUxhYmVsLlBvc2l0aW9uID0gVURpbTIubmV3KDAsIDE1LCAwLCAwKQoKLS0g4p2MIE7DunQgWCAoxJDDs25nIEh1YikKbG9jYWwgQ2xvc2VCdXR0b24gPSBJbnN0YW5jZS5uZXcoIlRleHRCdXR0b24iLCBUaXRsZUJhcikKQ2xvc2VCdXR0b24uU2l6ZSA9IFVEaW0yLm5ldygwLCA0MCwgMCwgNDApCkNsb3NlQnV0dG9uLlBvc2l0aW9uID0gVURpbTIubmV3KDEsIC00NSwgMCwgNSkKQ2xvc2VCdXR0b24uQmFja2dyb3VuZENvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDI1NSwgODAsIDgwKQpDbG9zZUJ1dHRvbi5UZXh0ID0gIlgiCkNsb3NlQnV0dG9uLlRleHRTaXplID0gMjIKQ2xvc2VCdXR0b24uRm9udCA9IEVudW0uRm9udC5Hb3RoYW1Cb2xkCkNsb3NlQnV0dG9uLlRleHRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KQoKbG9jYWwgQ2xvc2VDb3JuZXIgPSBJbnN0YW5jZS5uZXcoIlVJQ29ybmVyIiwgQ2xvc2VCdXR0b24pCkNsb3NlQ29ybmVyLkNvcm5lclJhZGl1cyA9IFVEaW0ubmV3KDAsIDgpCgpDbG9zZUJ1dHRvbi5Nb3VzZUJ1dHRvbjFDbGljazpDb25uZWN0KGZ1bmN0aW9uKCkKICAgIE1haW5GcmFtZS5WaXNpYmxlID0gZmFsc2UKZW5kKQoKLS0g8J+TjCBTaWRlYmFyIE1lbnUKbG9jYWwgU2lkZWJhciA9IEluc3RhbmNlLm5ldygiRnJhbWUiLCBNYWluRnJhbWUpClNpZGViYXIuU2l6ZSA9IFVEaW0yLm5ldygwLCAyMTAsIDEsIC01MCkKU2lkZWJhci5Qb3NpdGlvbiA9IFVEaW0yLm5ldygwLCAwLCAwLCA1MCkKU2lkZWJhci5CYWNrZ3JvdW5kQ29sb3IzID0gQ29sb3IzLmZyb21SR0IoMjAsIDIwLCAyNSkKCmxvY2FsIFNpZGViYXJDb3JuZXIgPSBJbnN0YW5jZS5uZXcoIlVJQ29ybmVyIiwgU2lkZWJhcikKU2lkZWJhckNvcm5lci5Db3JuZXJSYWRpdXMgPSBVRGltLm5ldygwLCAxMCkKCi0tIPCfk5wgVGFicwpsb2NhbCB0YWJzID0gewogICAge05hbWUgPSAiSW50cm9kdWNlIiwgSWNvbiA9ICLwn5OiIn0sCiAgICB7TmFtZSA9ICJQcm9maWxlIiwgSWNvbiA9ICLwn5GkIn0sCiAgICB7TmFtZSA9ICJXQUhIIEh1YiIsIEljb24gPSAi8J+MuCJ9LAogICAge05hbWUgPSAiT3RoZXJzIFNjcmlwdHMiLCBJY29uID0gIvCfk5wifSwKfQoKbG9jYWwgQ29udGVudEZyYW1lID0gSW5zdGFuY2UubmV3KCJGcmFtZSIsIE1haW5GcmFtZSkKQ29udGVudEZyYW1lLlNpemUgPSBVRGltMi5uZXcoMSwgLTIxMCwgMSwgLTUwKQpDb250ZW50RnJhbWUuUG9zaXRpb24gPSBVRGltMi5uZXcoMCwgMjEwLCAwLCA1MCkKQ29udGVudEZyYW1lLkJhY2tncm91bmRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigzMCwgMzAsIDQwKQoKbG9jYWwgY3VycmVudFRhYiA9IG5pbAoKLS0g8J+UhCBIw6BtIMSR4buVaSBUYWIKbG9jYWwgZnVuY3Rpb24gc3dpdGNoVGFiKHRhYk5hbWUpCiAgICBmb3IgXywgdiBpbiBwYWlycyhDb250ZW50RnJhbWU6R2V0Q2hpbGRyZW4oKSkgZG8KICAgICAgICB2LlZpc2libGUgPSBmYWxzZQogICAgZW5kCiAgICBmb3IgXywgYnV0dG9uIGluIHBhaXJzKFNpZGViYXI6R2V0Q2hpbGRyZW4oKSkgZG8KICAgICAgICBpZiBidXR0b246SXNBKCJUZXh0QnV0dG9uIikgdGhlbgogICAgICAgICAgICBidXR0b24uQmFja2dyb3VuZENvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDQwLCA0MCwgNTApIC0tIE3DoHUgbeG6t2MgxJHhu4tuaAogICAgICAgIGVuZAogICAgZW5kCgogICAgaWYgQ29udGVudEZyYW1lOkZpbmRGaXJzdENoaWxkKHRhYk5hbWUpIHRoZW4KICAgICAgICBDb250ZW50RnJhbWVbdGFiTmFtZV0uVmlzaWJsZSA9IHRydWUKICAgIGVuZAogICAgaWYgU2lkZWJhcjpGaW5kRmlyc3RDaGlsZCh0YWJOYW1lKSB0aGVuCiAgICAgICAgU2lkZWJhclt0YWJOYW1lXS5CYWNrZ3JvdW5kQ29sb3IzID0gQ29sb3IzLmZyb21SR0IoMTAwLCA2MCwgMTUwKSAtLSBNw6B1IGtoaSBjaOG7jW4gdGFiCiAgICBlbmQKICAgIGN1cnJlbnRUYWIgPSB0YWJOYW1lCmVuZAoKLS0g8J+UmCBU4bqhbyBkYW5oIHPDoWNoIFRhYnMKZm9yIGksIHRhYkRhdGEgaW4gaXBhaXJzKHRhYnMpIGRvCiAgICBsb2NhbCBUYWJCdXR0b24gPSBJbnN0YW5jZS5uZXcoIlRleHRCdXR0b24iLCBTaWRlYmFyKQogICAgVGFiQnV0dG9uLlNpemUgPSBVRGltMi5uZXcoMSwgMCwgMCwgNTUpCiAgICBUYWJCdXR0b24uUG9zaXRpb24gPSBVRGltMi5uZXcoMCwgMCwgMCwgKGkgLSAxKSAqIDYwKQogICAgVGFiQnV0dG9uLkJhY2tncm91bmRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQig0MCwgNDAsIDUwKQogICAgVGFiQnV0dG9uLlRleHQgPSB0YWJEYXRhLkljb24gLi4gIiAgICIgLi4gdGFiRGF0YS5OYW1lCiAgICBUYWJCdXR0b24uRm9udCA9IEVudW0uRm9udC5Hb3RoYW1Cb2xkCiAgICBUYWJCdXR0b24uVGV4dFNpemUgPSAxOAogICAgVGFiQnV0dG9uLlRleHRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KQogICAgVGFiQnV0dG9uLk5hbWUgPSB0YWJEYXRhLk5hbWUKCiAgICBsb2NhbCBCdXR0b25Db3JuZXIgPSBJbnN0YW5jZS5uZXcoIlVJQ29ybmVyIiwgVGFiQnV0dG9uKQogICAgQnV0dG9uQ29ybmVyLkNvcm5lclJhZGl1cyA9IFVEaW0ubmV3KDAsIDYpCgogICAgVGFiQnV0dG9uLk1vdXNlRW50ZXI6Q29ubmVjdChmdW5jdGlvbigpCiAgICAgICAgVHdlZW5TZXJ2aWNlOkNyZWF0ZShUYWJCdXR0b24sIFR3ZWVuSW5mby5uZXcoMC4yKSwge0JhY2tncm91bmRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQig4MCwgNTAsIDEwMCl9KTpQbGF5KCkKICAgIGVuZCkKICAgIFRhYkJ1dHRvbi5Nb3VzZUxlYXZlOkNvbm5lY3QoZnVuY3Rpb24oKQogICAgICAgIGlmIGN1cnJlbnRUYWIgfj0gdGFiRGF0YS5OYW1lIHRoZW4KICAgICAgICAgICAgVHdlZW5TZXJ2aWNlOkNyZWF0ZShUYWJCdXR0b24sIFR3ZWVuSW5mby5uZXcoMC4yKSwge0JhY2tncm91bmRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQig0MCwgNDAsIDUwKX0pOlBsYXkoKQogICAgICAgIGVuZAogICAgZW5kKQoKICAgIFRhYkJ1dHRvbi5Nb3VzZUJ1dHRvbjFDbGljazpDb25uZWN0KGZ1bmN0aW9uKCkKICAgICAgICBzd2l0Y2hUYWIodGFiRGF0YS5OYW1lKQogICAgZW5kKQplbmQKCgotLSDwn5OMIEzhuqV5IHRow7RuZyB0aW4gbmfGsOG7nWkgY2jGoWkKbG9jYWwgcGxheWVyID0gZ2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyCmxvY2FsIGdhbWVOYW1lID0gZ2FtZTpHZXRTZXJ2aWNlKCJNYXJrZXRwbGFjZVNlcnZpY2UiKTpHZXRQcm9kdWN0SW5mbyhnYW1lLlBsYWNlSWQpLk5hbWUKbG9jYWwgZXhwbG9pdCA9IGlkZW50aWZ5ZXhlY3V0b3IgYW5kIGlkZW50aWZ5ZXhlY3V0b3IoKSBvciAiVW5rbm93biBFeHBsb2l0IgoKLS0g8J+TjCBU4bqhbyBQcm9maWxlIFRhYgpsb2NhbCBQcm9maWxlVGFiID0gSW5zdGFuY2UubmV3KCJGcmFtZSIsIENvbnRlbnRGcmFtZSkKUHJvZmlsZVRhYi5TaXplID0gVURpbTIubmV3KDEsIDAsIDEsIDApClByb2ZpbGVUYWIuQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDEKUHJvZmlsZVRhYi5OYW1lID0gIlByb2ZpbGUiClByb2ZpbGVUYWIuVmlzaWJsZSA9IGZhbHNlIC0tIOG6qG4gbeG6t2MgxJHhu4tuaCwgY2jhu4kgaGnhu4duIGtoaSBuaOG6pW4gdsOgbyB0YWIKCi0tIPCfjJ8gVGnDqnUgxJHhu4EgUHJvZmlsZQpsb2NhbCBQcm9maWxlVGl0bGUgPSBJbnN0YW5jZS5uZXcoIlRleHRMYWJlbCIsIFByb2ZpbGVUYWIpClByb2ZpbGVUaXRsZS5TaXplID0gVURpbTIubmV3KDEsIDAsIDAsIDYwKQpQcm9maWxlVGl0bGUuUG9zaXRpb24gPSBVRGltMi5uZXcoMCwgMCwgMCwgMTApClByb2ZpbGVUaXRsZS5UZXh0ID0gIvCfkaQgUHJvZmlsZSIKUHJvZmlsZVRpdGxlLkZvbnQgPSBFbnVtLkZvbnQuR290aGFtQm9sZApQcm9maWxlVGl0bGUuVGV4dFNpemUgPSAyOApQcm9maWxlVGl0bGUuVGV4dENvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpClByb2ZpbGVUaXRsZS5CYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMQoKLS0g8J+TnSBE4buvIGxp4buHdSBQcm9maWxlCmxvY2FsIHByb2ZpbGVEYXRhID0gewogICAgeyJQbGF5ZXIgTmFtZToiLCBwbGF5ZXIuTmFtZX0sCiAgICB7IkdhbWUgUGxheWluZzoiLCBnYW1lTmFtZX0sCiAgICB7IkV4cGxvaXQgVXNpbmc6IiwgZXhwbG9pdH0sCiAgICB7IvCfjJAgUGluZzoiLCAiLS0gbXMifSwKICAgIHsi4pqhIEZQUzoiLCAiLS0ifSwKfQoKLS0g8J+TjCBVSUxpc3RMYXlvdXQgZ2nDunAgY8SDbiBjaOG7iW5oIHThu7EgxJHhu5luZwpsb2NhbCBQcm9maWxlTGlzdCA9IEluc3RhbmNlLm5ldygiRnJhbWUiLCBQcm9maWxlVGFiKQpQcm9maWxlTGlzdC5TaXplID0gVURpbTIubmV3KDEsIC00MCwgMCwgMTUwKQpQcm9maWxlTGlzdC5Qb3NpdGlvbiA9IFVEaW0yLm5ldygwLCAyMCwgMCwgNzApClByb2ZpbGVMaXN0LkJhY2tncm91bmRUcmFuc3BhcmVuY3kgPSAxCgpsb2NhbCBVSUxpc3RMYXlvdXQgPSBJbnN0YW5jZS5uZXcoIlVJTGlzdExheW91dCIsIFByb2ZpbGVMaXN0KQpVSUxpc3RMYXlvdXQuRmlsbERpcmVjdGlvbiA9IEVudW0uRmlsbERpcmVjdGlvbi5WZXJ0aWNhbApVSUxpc3RMYXlvdXQuU29ydE9yZGVyID0gRW51bS5Tb3J0T3JkZXIuTGF5b3V0T3JkZXIKVUlMaXN0TGF5b3V0LlBhZGRpbmcgPSBVRGltLm5ldygwLCA1KQoKLS0g8J+TjCBIw6BtIHThuqFvIGPDoWMgZMOybmcgdGjDtG5nIHRpbgpsb2NhbCBmdW5jdGlvbiBjcmVhdGVQcm9maWxlRW50cnkodGl0bGUsIHZhbHVlKQogICAgbG9jYWwgRW50cnkgPSBJbnN0YW5jZS5uZXcoIlRleHRMYWJlbCIsIFByb2ZpbGVMaXN0KQogICAgRW50cnkuU2l6ZSA9IFVEaW0yLm5ldygxLCAwLCAwLCAzMCkKICAgIEVudHJ5LlRleHQgPSB0aXRsZSAuLiAiICIgLi4gdmFsdWUKICAgIEVudHJ5LkZvbnQgPSBFbnVtLkZvbnQuR290aGFtCiAgICBFbnRyeS5UZXh0U2l6ZSA9IDE4CiAgICBFbnRyeS5UZXh0Q29sb3IzID0gQ29sb3IzLmZyb21SR0IoMjIwLCAyMjAsIDIyMCkKICAgIEVudHJ5LkJhY2tncm91bmRUcmFuc3BhcmVuY3kgPSAxCiAgICBFbnRyeS5UZXh0WEFsaWdubWVudCA9IEVudW0uVGV4dFhBbGlnbm1lbnQuTGVmdAogICAgRW50cnkuTmFtZSA9IHRpdGxlIC0tIMSQ4bq3dCB0w6puIMSR4buDIGThu4UgY+G6rXAgbmjhuq10CmVuZAoKLS0g8J+TjCBUaMOqbSB0aMO0bmcgdGluIHbDoG8gUHJvZmlsZQpmb3IgXywgZGF0YSBpbiBwYWlycyhwcm9maWxlRGF0YSkgZG8KICAgIGNyZWF0ZVByb2ZpbGVFbnRyeShkYXRhWzFdLCBkYXRhWzJdKQplbmQKCi0tIPCflIQgQ+G6rXAgbmjhuq10IFBpbmcgJiBGUFMgdGhlbyB0aOG7nWkgZ2lhbiB0aOG7sWMKZ2FtZTpHZXRTZXJ2aWNlKCJSdW5TZXJ2aWNlIikuUmVuZGVyU3RlcHBlZDpDb25uZWN0KGZ1bmN0aW9uKCkKICAgIGxvY2FsIHBpbmdMYWJlbCA9IFByb2ZpbGVMaXN0OkZpbmRGaXJzdENoaWxkKCLwn4yQIFBpbmc6IikKICAgIGlmIHBpbmdMYWJlbCB0aGVuCiAgICAgICAgcGluZ0xhYmVsLlRleHQgPSAi8J+MkCBQaW5nOiAiIC4uIG1hdGguZmxvb3IoZ2FtZTpHZXRTZXJ2aWNlKCJTdGF0cyIpLk5ldHdvcmsuU2VydmVyU3RhdHNJdGVtWyJEYXRhIFBpbmciXTpHZXRWYWx1ZSgpKSAuLiAiIG1zIgogICAgZW5kCgogICAgbG9jYWwgZnBzTGFiZWwgPSBQcm9maWxlTGlzdDpGaW5kRmlyc3RDaGlsZCgi4pqhIEZQUzoiKQogICAgaWYgZnBzTGFiZWwgdGhlbgogICAgICAgIGZwc0xhYmVsLlRleHQgPSAi4pqhIEZQUzogIiAuLiB0b3N0cmluZyhtYXRoLmZsb29yKDEgLyBnYW1lOkdldFNlcnZpY2UoIlJ1blNlcnZpY2UiKS5SZW5kZXJTdGVwcGVkOldhaXQoKSkpCiAgICBlbmQKZW5kKQoKCi0tIPCfk4wgSW50cm9kdWNlIENvbnRlbnQKbG9jYWwgSW50cm9kdWNlVGFiID0gSW5zdGFuY2UubmV3KCJGcmFtZSIsIENvbnRlbnRGcmFtZSkKSW50cm9kdWNlVGFiLlNpemUgPSBVRGltMi5uZXcoMSwgMCwgMSwgMCkKSW50cm9kdWNlVGFiLkJhY2tncm91bmRUcmFuc3BhcmVuY3kgPSAxCkludHJvZHVjZVRhYi5OYW1lID0gIkludHJvZHVjZSIKCi0tIPCflJcgRGlzY29yZCBKb2luIEJ1dHRvbgpsb2NhbCBEaXNjb3JkQnV0dG9uID0gSW5zdGFuY2UubmV3KCJUZXh0QnV0dG9uIiwgSW50cm9kdWNlVGFiKQpEaXNjb3JkQnV0dG9uLlNpemUgPSBVRGltMi5uZXcoMC44NSwgMCwgMCwgNjUpCkRpc2NvcmRCdXR0b24uUG9zaXRpb24gPSBVRGltMi5uZXcoMC4wNzUsIDAsIDAuMDUsIDApCkRpc2NvcmRCdXR0b24uVGV4dCA9ICLwn5qAICBKT0lOIE9VUiBESVNDT1JEIFNFUlZFUiAg8J+agCIKRGlzY29yZEJ1dHRvbi5Gb250ID0gRW51bS5Gb250LkdvdGhhbUJsYWNrCkRpc2NvcmRCdXR0b24uVGV4dFNpemUgPSAyMgpEaXNjb3JkQnV0dG9uLlRleHRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KQpEaXNjb3JkQnV0dG9uLkJhY2tncm91bmRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigyMCwgMjAsIDEwMCkKRGlzY29yZEJ1dHRvbi5BdXRvQnV0dG9uQ29sb3IgPSBmYWxzZQoKbG9jYWwgRGlzY29yZENvcm5lciA9IEluc3RhbmNlLm5ldygiVUlDb3JuZXIiLCBEaXNjb3JkQnV0dG9uKQpEaXNjb3JkQ29ybmVyLkNvcm5lclJhZGl1cyA9IFVEaW0ubmV3KDAsIDEyKQoKRGlzY29yZEJ1dHRvbi5Nb3VzZUJ1dHRvbjFDbGljazpDb25uZWN0KGZ1bmN0aW9uKCkKICAgIHNldGNsaXBib2FyZCgiaHR0cHM6Ly9kaXNjb3JkLmdnL2Z3QldEZ3dzNFQiKQogICAgRGlzY29yZEJ1dHRvbi5UZXh0ID0gIuKchSBMaW5rIENvcGllZCEiCiAgICB3YWl0KDEuNSkKICAgIERpc2NvcmRCdXR0b24uVGV4dCA9ICLwn5qAICBKT0lOIE9VUiBESVNDT1JEIFNFUlZFUiAg8J+agCIKZW5kKQoKLS0g8J+ToiBJbnRyb2R1Y3Rpb24gVGl0bGUKbG9jYWwgSW50cm9kdWNlVGl0bGUgPSBJbnN0YW5jZS5uZXcoIlRleHRMYWJlbCIsIEludHJvZHVjZVRhYikKSW50cm9kdWNlVGl0bGUuU2l6ZSA9IFVEaW0yLm5ldygxLCAwLCAwLCA1MCkKSW50cm9kdWNlVGl0bGUuUG9zaXRpb24gPSBVRGltMi5uZXcoMCwgMCwgMC4yMCwgMCkKSW50cm9kdWNlVGl0bGUuVGV4dCA9ICLwn4yfICBXQUhIIEh1YiAtIEludHJvZHVjdGlvbiIKSW50cm9kdWNlVGl0bGUuRm9udCA9IEVudW0uRm9udC5Hb3RoYW1Cb2xkCkludHJvZHVjZVRpdGxlLlRleHRTaXplID0gMjYKSW50cm9kdWNlVGl0bGUuVGV4dENvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpCkludHJvZHVjZVRpdGxlLkJhY2tncm91bmRUcmFuc3BhcmVuY3kgPSAxCkludHJvZHVjZVRpdGxlLlRleHRTdHJva2VUcmFuc3BhcmVuY3kgPSAwLjUKCi0tIPCfk50gSW50cm9kdWN0aW9uIENvbnRlbnQKbG9jYWwgSW50cm9kdWNlQ29udGVudCA9IEluc3RhbmNlLm5ldygiVGV4dExhYmVsIiwgSW50cm9kdWNlVGFiKQpJbnRyb2R1Y2VDb250ZW50LlNpemUgPSBVRGltMi5uZXcoMSwgLTQwLCAwLCAxMjApCkludHJvZHVjZUNvbnRlbnQuUG9zaXRpb24gPSBVRGltMi5uZXcoMCwgMjAsIDAuMzAsIDApCkludHJvZHVjZUNvbnRlbnQuVGV4dCA9ICLwn5SlIFdBSEggSHViIGlzIGEgcG93ZXJmdWwgc2NyaXB0IGZvciBSb2Jsb3ghXG5cbvCfk4wgU3VwcG9ydHMgbWFueSBwb3B1bGFyIGdhbWVzIHdpdGggZnJlcXVlbnQgdXBkYXRlcy5cblxu4pqhIFByb3ZpZGVzIGNvbnZlbmllbnQgdG9vbHMgZm9yIGEgYmV0dGVyIGdhbWluZyBleHBlcmllbmNlISIKSW50cm9kdWNlQ29udGVudC5Gb250ID0gRW51bS5Gb250LkdvdGhhbQpJbnRyb2R1Y2VDb250ZW50LlRleHRTaXplID0gMjAKSW50cm9kdWNlQ29udGVudC5UZXh0Q29sb3IzID0gQ29sb3IzLmZyb21SR0IoMjIwLCAyMjAsIDIyMCkKSW50cm9kdWNlQ29udGVudC5CYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMQpJbnRyb2R1Y2VDb250ZW50LlRleHRXcmFwcGVkID0gdHJ1ZQpJbnRyb2R1Y2VDb250ZW50LlRleHRYQWxpZ25tZW50ID0gRW51bS5UZXh0WEFsaWdubWVudC5MZWZ0CkludHJvZHVjZUNvbnRlbnQuVGV4dFlBbGlnbm1lbnQgPSBFbnVtLlRleHRZQWxpZ25tZW50LlRvcAoKLS0g8J+TjCBTdXBwb3J0ZWQgRXhwbG9pdHMgVGl0bGUgKEPDom4gY2jhu4luaCBs4bqhaSBraG/huqNuZyBjw6FjaCkKbG9jYWwgRXhwbG9pdFRpdGxlID0gSW5zdGFuY2UubmV3KCJUZXh0TGFiZWwiLCBJbnRyb2R1Y2VUYWIpCkV4cGxvaXRUaXRsZS5TaXplID0gVURpbTIubmV3KDEsIDAsIDAsIDM1KQpFeHBsb2l0VGl0bGUuUG9zaXRpb24gPSBVRGltMi5uZXcoMCwgMCwgMC41MCwgMCkgLS0gROG7i2NoIGzDqm4gbeG7mXQgY2jDunQKRXhwbG9pdFRpdGxlLlRleHQgPSAi8J+UpyAgU3VwcG9ydGVkIEV4cGxvaXRzIgpFeHBsb2l0VGl0bGUuRm9udCA9IEVudW0uRm9udC5Hb3RoYW1Cb2xkCkV4cGxvaXRUaXRsZS5UZXh0U2l6ZSA9IDI0CkV4cGxvaXRUaXRsZS5UZXh0Q29sb3IzID0gQ29sb3IzLmZyb21SR0IoMjU1LCAyNTUsIDEwMCkKRXhwbG9pdFRpdGxlLkJhY2tncm91bmRUcmFuc3BhcmVuY3kgPSAxCkV4cGxvaXRUaXRsZS5UZXh0U3Ryb2tlVHJhbnNwYXJlbmN5ID0gMC41CkV4cGxvaXRUaXRsZS5UZXh0WEFsaWdubWVudCA9IEVudW0uVGV4dFhBbGlnbm1lbnQuQ2VudGVyCgotLSDwn5OMIENyZWF0ZSBhIFNjcm9sbGluZyBGcmFtZSB0byBIb2xkIEV4cGxvaXRzIChDw6FjaCB0acOqdSDEkeG7gSB4YSBoxqFuIG3hu5l0IGNow7p0KQpsb2NhbCBFeHBsb2l0RnJhbWUgPSBJbnN0YW5jZS5uZXcoIlNjcm9sbGluZ0ZyYW1lIiwgSW50cm9kdWNlVGFiKQpFeHBsb2l0RnJhbWUuU2l6ZSA9IFVEaW0yLm5ldygwLjg1LCAwLCAwLjM1LCAwKQpFeHBsb2l0RnJhbWUuUG9zaXRpb24gPSBVRGltMi5uZXcoMC4wNzUsIDAsIDAuNTgsIDApIC0tIEThu4tjaCB4deG7kW5nIMSR4buDIGPDom4gxJHhu5FpCkV4cGxvaXRGcmFtZS5CYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMQpFeHBsb2l0RnJhbWUuU2Nyb2xsQmFyVGhpY2tuZXNzID0gNApFeHBsb2l0RnJhbWUuQ2FudmFzU2l6ZSA9IFVEaW0yLm5ldygwLCAwLCAxLCAwKQoKLS0g8J+TjCBVSUxpc3RMYXlvdXQgdG8gQXV0by1BbGlnbiBFeHBsb2l0cyAoVMSDbmcga2hv4bqjbmcgY8OhY2ggY2hvIGThu4UgxJHhu41jKQpsb2NhbCBFeHBsb2l0TGlzdExheW91dCA9IEluc3RhbmNlLm5ldygiVUlMaXN0TGF5b3V0IiwgRXhwbG9pdEZyYW1lKQpFeHBsb2l0TGlzdExheW91dC5GaWxsRGlyZWN0aW9uID0gRW51bS5GaWxsRGlyZWN0aW9uLlZlcnRpY2FsCkV4cGxvaXRMaXN0TGF5b3V0LlNvcnRPcmRlciA9IEVudW0uU29ydE9yZGVyLkxheW91dE9yZGVyCkV4cGxvaXRMaXN0TGF5b3V0LlBhZGRpbmcgPSBVRGltLm5ldygwLCA4KSAtLSBUxINuZyBraG/huqNuZyBjw6FjaCBnaeG7r2EgY8OhYyBleHBsb2l0cwoKLS0g8J+TjCBGdW5jdGlvbiB0byBDcmVhdGUgRWFjaCBFeHBsb2l0IEVudHJ5CmxvY2FsIGZ1bmN0aW9uIGNyZWF0ZUV4cGxvaXRFbnRyeShuYW1lLCBwbGF0Zm9ybSkKICAgIGxvY2FsIEVudHJ5ID0gSW5zdGFuY2UubmV3KCJGcmFtZSIsIEV4cGxvaXRGcmFtZSkKICAgIEVudHJ5LlNpemUgPSBVRGltMi5uZXcoMSwgMCwgMCwgMzUpIC0tIMSQaeG7gXUgY2jhu4luaCBjaGnhu4F1IGNhbyBjaG8gcsO1IHLDoG5nCiAgICBFbnRyeS5CYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMC4yCiAgICBFbnRyeS5CYWNrZ3JvdW5kQ29sb3IzID0gQ29sb3IzLmZyb21SR0IoMjUsIDI1LCA1MCkKCiAgICBsb2NhbCBDaGVja0ljb24gPSBJbnN0YW5jZS5uZXcoIkltYWdlTGFiZWwiLCBFbnRyeSkKICAgIENoZWNrSWNvbi5TaXplID0gVURpbTIubmV3KDAsIDIyLCAwLCAyMikKICAgIENoZWNrSWNvbi5Qb3NpdGlvbiA9IFVEaW0yLm5ldygwLjAyLCAwLCAwLjUsIC0xMSkKICAgIENoZWNrSWNvbi5JbWFnZSA9ICJyYnhhc3NldGlkOi8vMzkyNjMwNTkwNCIKICAgIENoZWNrSWNvbi5JbWFnZVJlY3RPZmZzZXQgPSBWZWN0b3IyLm5ldygzMTIsIDQpCiAgICBDaGVja0ljb24uSW1hZ2VSZWN0U2l6ZSA9IFZlY3RvcjIubmV3KDI0LCAyNCkKICAgIENoZWNrSWNvbi5CYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMQoKICAgIGxvY2FsIEV4cGxvaXRUZXh0ID0gSW5zdGFuY2UubmV3KCJUZXh0TGFiZWwiLCBFbnRyeSkKICAgIEV4cGxvaXRUZXh0LlNpemUgPSBVRGltMi5uZXcoMSwgLTM1LCAxLCAwKQogICAgRXhwbG9pdFRleHQuUG9zaXRpb24gPSBVRGltMi5uZXcoMC4xMiwgMCwgMCwgMCkKICAgIEV4cGxvaXRUZXh0LlRleHQgPSBuYW1lIC4uICIgKCIgLi4gcGxhdGZvcm0gLi4gIikiCiAgICBFeHBsb2l0VGV4dC5Gb250ID0gRW51bS5Gb250LkdvdGhhbQogICAgRXhwbG9pdFRleHQuVGV4dFNpemUgPSAxOCAtLSBDaOG7ryBs4bubbiBoxqFuIGNobyBk4buFIMSR4buNYwogICAgRXhwbG9pdFRleHQuVGV4dENvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDIwMCwgMjU1LCAyMDApCiAgICBFeHBsb2l0VGV4dC5CYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMQogICAgRXhwbG9pdFRleHQuVGV4dFhBbGlnbm1lbnQgPSBFbnVtLlRleHRYQWxpZ25tZW50LkxlZnQKZW5kCgotLSDwn5OMIEFkZCBFeHBsb2l0cyB0byB0aGUgTGlzdApjcmVhdGVFeHBsb2l0RW50cnkoIkZsdXh1cyIsICJNb2JpbGUgJiBQQyIpCmNyZWF0ZUV4cGxvaXRFbnRyeSgiS1JOTCIsICJNb2JpbGUgJiBQQyIpCmNyZWF0ZUV4cGxvaXRFbnRyeSgiWGVubyIsICJQQyBPbmx5IikKY3JlYXRlRXhwbG9pdEVudHJ5KCJTd2lmdCIsICJNb2JpbGUgJiBQQyIpCmNyZWF0ZUV4cGxvaXRFbnRyeSgiRGVsdGEiLCAiTW9iaWxlICYgUEMiKQpjcmVhdGVFeHBsb2l0RW50cnkoIkFyY2V1c1giLCAiTW9iaWxlIE9ubHkiKQpjcmVhdGVFeHBsb2l0RW50cnkoIlZlbG9jaXR5IiwgIlBDIE9ubHkiKQoKCgotLSDwn5OMIFThuqFvIHRhYiAiV0FISCBIdWIiCmxvY2FsIFdBSEhIdWJUYWIgPSBJbnN0YW5jZS5uZXcoIkZyYW1lIiwgQ29udGVudEZyYW1lKQpXQUhISHViVGFiLlNpemUgPSBVRGltMi5uZXcoMSwgMCwgMSwgMCkKV0FISEh1YlRhYi5CYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMQpXQUhISHViVGFiLk5hbWUgPSAiV0FISCBIdWIiCgotLSDwn5OMIFRpw6p1IMSR4buBCmxvY2FsIFdBSEhIdWJUaXRsZSA9IEluc3RhbmNlLm5ldygiVGV4dExhYmVsIiwgV0FISEh1YlRhYikKV0FISEh1YlRpdGxlLlNpemUgPSBVRGltMi5uZXcoMSwgMCwgMCwgNTApCldBSEhIdWJUaXRsZS5Qb3NpdGlvbiA9IFVEaW0yLm5ldygwLCAwLCAwLjA1LCAwKQpXQUhISHViVGl0bGUuVGV4dCA9ICLwn4y4IFdBSEggSHViIC0gU2NyaXB0IEV4ZWN1dG9yIgpXQUhISHViVGl0bGUuRm9udCA9IEVudW0uRm9udC5Hb3RoYW1Cb2xkCldBSEhIdWJUaXRsZS5UZXh0U2l6ZSA9IDI2CldBSEhIdWJUaXRsZS5UZXh0Q29sb3IzID0gQ29sb3IzLmZyb21SR0IoMjU1LCAyNTUsIDI1NSkKV0FISEh1YlRpdGxlLkJhY2tncm91bmRUcmFuc3BhcmVuY3kgPSAxCldBSEhIdWJUaXRsZS5UZXh0U3Ryb2tlVHJhbnNwYXJlbmN5ID0gMC41CgotLSDwn5OMIE3DtCB04bqjIG5n4bqvbiBn4buNbgpsb2NhbCBXQUhISHViRGVzY3JpcHRpb24gPSBJbnN0YW5jZS5uZXcoIlRleHRMYWJlbCIsIFdBSEhIdWJUYWIpCldBSEhIdWJEZXNjcmlwdGlvbi5TaXplID0gVURpbTIubmV3KDEsIC00MCwgMCwgNjApCldBSEhIdWJEZXNjcmlwdGlvbi5Qb3NpdGlvbiA9IFVEaW0yLm5ldygwLCAyMCwgMC4xMiwgMCkKV0FISEh1YkRlc2NyaXB0aW9uLlRleHQgPSAi8J+agCBDbGljayB0aGUgYnV0dG9uIGJlbG93IHRvIHJ1biB0aGUgc2NyaXB0ISIKV0FISEh1YkRlc2NyaXB0aW9uLkZvbnQgPSBFbnVtLkZvbnQuR290aGFtCldBSEhIdWJEZXNjcmlwdGlvbi5UZXh0U2l6ZSA9IDIwCldBSEhIdWJEZXNjcmlwdGlvbi5UZXh0Q29sb3IzID0gQ29sb3IzLmZyb21SR0IoMjIwLCAyMjAsIDIyMCkKV0FISEh1YkRlc2NyaXB0aW9uLkJhY2tncm91bmRUcmFuc3BhcmVuY3kgPSAxCldBSEhIdWJEZXNjcmlwdGlvbi5UZXh0V3JhcHBlZCA9IHRydWUKV0FISEh1YkRlc2NyaXB0aW9uLlRleHRYQWxpZ25tZW50ID0gRW51bS5UZXh0WEFsaWdubWVudC5DZW50ZXIKCi0tIPCfk4wgTsO6dCBjaOG6oXkgc2NyaXB0CmxvY2FsIFJ1blNjcmlwdEJ1dHRvbiA9IEluc3RhbmNlLm5ldygiVGV4dEJ1dHRvbiIsIFdBSEhIdWJUYWIpClJ1blNjcmlwdEJ1dHRvbi5TaXplID0gVURpbTIubmV3KDAuNiwgMCwgMCwgNjApClJ1blNjcmlwdEJ1dHRvbi5Qb3NpdGlvbiA9IFVEaW0yLm5ldygwLjIsIDAsIDAuMjUsIDApClJ1blNjcmlwdEJ1dHRvbi5UZXh0ID0gIuKWtu+4jyBSdW4gV0FISCBIdWIgLSBCbG94IEZydWl0cyIKUnVuU2NyaXB0QnV0dG9uLkZvbnQgPSBFbnVtLkZvbnQuR290aGFtQm9sZApSdW5TY3JpcHRCdXR0b24uVGV4dFNpemUgPSAyMApSdW5TY3JpcHRCdXR0b24uVGV4dENvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpClJ1blNjcmlwdEJ1dHRvbi5CYWNrZ3JvdW5kQ29sb3IzID0gQ29sb3IzLmZyb21SR0IoMzAsIDE0NCwgMjU1KSAtLSBNw6B1IHhhbmggxJHhurlwClJ1blNjcmlwdEJ1dHRvbi5BdXRvQnV0dG9uQ29sb3IgPSB0cnVlCgotLSDwn5OMIEJvIHRyw7JuIGfDs2MgbsO6dApsb2NhbCBCdXR0b25Db3JuZXIgPSBJbnN0YW5jZS5uZXcoIlVJQ29ybmVyIiwgUnVuU2NyaXB0QnV0dG9uKQpCdXR0b25Db3JuZXIuQ29ybmVyUmFkaXVzID0gVURpbS5uZXcoMCwgMTIpCgotLSDwn5OMIEhp4buHdSDhu6luZyBraGkgbmjhuqVuIG7DunQKUnVuU2NyaXB0QnV0dG9uLk1vdXNlQnV0dG9uMUNsaWNrOkNvbm5lY3QoZnVuY3Rpb24oKQogICAgUnVuU2NyaXB0QnV0dG9uLlRleHQgPSAi4o+zIFJ1bm5pbmcuLi4iCiAgICBSdW5TY3JpcHRCdXR0b24uQmFja2dyb3VuZENvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMTY1LCAwKSAtLSBDaHV54buDbiBzYW5nIG3DoHUgY2FtCiAgICB3YWl0KDEpCiAgICAKICAgIC0tIPCfk4wgQ2jhuqF5IHNjcmlwdAogICAgLS1bWwrilojilojilZcgICAg4paI4paI4pWXIOKWiOKWiOKWiOKWiOKWiOKVlyDilojilojilZcgIOKWiOKWiOKVl+KWiOKWiOKVlyAg4paI4paI4pWXICAgIOKWiOKWiOKVlyAg4paI4paI4pWX4paI4paI4pWXICAg4paI4paI4pWX4paI4paI4paI4paI4paI4paI4pWXCuKWiOKWiOKVkSAgICDilojilojilZHilojilojilZTilZDilZDilojilojilZfilojilojilZEgIOKWiOKWiOKVkeKWiOKWiOKVkSAg4paI4paI4pWRICAgIOKWiOKWiOKVkSAg4paI4paI4pWR4paI4paI4pWRICAg4paI4paI4pWR4paI4paI4pWU4pWQ4pWQ4paI4paI4pWXCuKWiOKWiOKVkSDilojilZcg4paI4paI4pWR4paI4paI4paI4paI4paI4paI4paI4pWR4paI4paI4paI4paI4paI4paI4paI4pWR4paI4paI4paI4paI4paI4paI4paI4pWRICAgIOKWiOKWiOKWiOKWiOKWiOKWiOKWiOKVkeKWiOKWiOKVkSAgIOKWiOKWiOKVkeKWiOKWiOKWiOKWiOKWiOKWiOKVlOKVnQrilojilojilZHilojilojilojilZfilojilojilZHilojilojilZTilZDilZDilojilojilZHilojilojilZTilZDilZDilojilojilZHilojilojilZTilZDilZDilojilojilZEgICAg4paI4paI4pWU4pWQ4pWQ4paI4paI4pWR4paI4paI4pWRICAg4paI4paI4pWR4paI4paI4pWU4pWQ4pWQ4paI4paI4pWXCuKVmuKWiOKWiOKWiOKVlOKWiOKWiOKWiOKVlOKVneKWiOKWiOKVkSAg4paI4paI4pWR4paI4paI4pWRICDilojilojilZHilojilojilZEgIOKWiOKWiOKVkSAgICDilojilojilZEgIOKWiOKWiOKVkeKVmuKWiOKWiOKWiOKWiOKWiOKWiOKVlOKVneKWiOKWiOKWiOKWiOKWiOKWiOKVlOKVnQog4pWa4pWQ4pWQ4pWd4pWa4pWQ4pWQ4pWdIOKVmuKVkOKVnSAg4pWa4pWQ4pWd4pWa4pWQ4pWdICDilZrilZDilZ3ilZrilZDilZ0gIOKVmuKVkOKVnSAgICDilZrilZDilZ0gIOKVmuKVkOKVnSDilZrilZDilZDilZDilZDilZDilZ0g4pWa4pWQ4pWQ4pWQ4pWQ4pWQ4pWdCl1dCl9HWyJTZXR0aW5ncyJdID0gewogICAgWyJUZWFtIl0gPSAiUGlyYXRlcyI7IC0tUGlyYXRlcyBvciBNYXJpbmVzCiAgICBbIkZQUyBCb290Il0gPSB0cnVlOwogICAgWyIiXSA9IHRydWU7Cn07CgpwcmludCgiXG4iIC4uIFtbCiAgb29vb29vICAgb29vb29vICAgICBvbyAgICAgLm8uICAgICAgICBvb29vbyAgIG9vb28gIG9vb28gICAgb29vbyAgICAgICBvb29vICAgIG9vb28gIG9vbyAgICAgIG9vICAgb29vb29vb29vbwogIGA4ODguICAgIGA4ODguICAgICAuOCcgICAgLjg4OC4gICAgICBgODg4JyAgIGA4ODgnIGA4ODgnICAgYDg4OCcgICAgICBgODg4JyAgIGA4ODgnIGA4ODgnICAgICBgOCcgYDg4OCcgICBgWThiCiAgIGA4ODguICAgLjg4ODguICAgLjgnICAgIC44Ijg4OC4gICAgICA4ODggICAgIDg4OCAgIDg4OCAgICAgODg4ICAgICAgICA4ODggICAgIDg4OCAgIDg4OCAgICAgICA4ICAgODg4ICAgICA4ODgKICAgIGA4ODggIC44J2A4ODguIC44JyAgICAuOCcgYDg4OC4gICAgIDg4OG9vb29vODg4ICAgODg4b29vb284ODggICAgICAgIDg4OG9vb29vODg4ICAgODg4ICAgICAgIDggICA4ODhvb29vODg4JwogICAgIGA4ODguOCcgIGA4ODguOCcgICAgLjg4b29vODg4OC4gICAgODg4ICAgICA4ODggICA4ODggICAgIDg4OCAgICAgICAgODg4ICAgICA4ODggICA4ODggICAgICAgOCAgIDg4OCAgICBgODhiCiAgICAgIGA4ODgnICAgIGA4ODgnICAgIC44JyAgICAgYDg4OC4gICA4ODggICAgIDg4OCAgIDg4OCAgICAgODg4ICAgICAgICA4ODggICAgIDg4OCAgIGA4OC4gICAgLjgnICAgODg4ICAgIC44OFAKICAgICAgIGA4JyAgICAgIGA4JyAgICBvODhvICAgICBvODg4OG8gbzg4OG8gICBvODg4byBvODg4byAgIG84ODhvICAgICAgbzg4OG8gICBvODg4byAgICBgWWJvZFAnICAgIG84ODhib29kOFAnCl1dKQppZiBub3QgZ2FtZTpJc0xvYWRlZCgpIHRoZW4gcmVwZWF0IGdhbWUuTG9hZGVkOldhaXQoKSB1bnRpbCBnYW1lOklzTG9hZGVkKCkgZW5kCi0tW1sK4paI4paI4paI4pWXICAg4paI4paI4pWX4paI4paI4paI4paI4paI4paI4paI4pWX4paI4paI4paI4paI4paI4paI4paI4pWX4paI4paI4paI4paI4paI4paI4paI4pWX4paI4paI4paI4paI4paI4paI4paI4pWX4paI4paI4paI4paI4paI4paI4paI4pWXIOKWiOKWiOKWiOKWiOKWiOKVlyDilojilojilojilojilojilojilZcg4paI4paI4paI4paI4paI4paI4pWXIOKWiOKWiOKVlyAgIOKWiOKWiOKVlyAgICDilojilojilojilojilojilojilojilZcg4paI4paI4paI4paI4paI4paI4pWXIOKWiOKWiOKWiOKWiOKWiOKWiOKVlyAgICAg4paI4paI4paI4paI4paI4paI4paI4pWXIOKWiOKWiOKWiOKWiOKWiOKWiOKVl+KWiOKWiOKWiOKWiOKWiOKWiOKVlyDilojilojilZfilojilojilojilojilojilojilZcg4paI4paI4paI4paI4paI4paI4paI4paI4pWXCuKWiOKWiOKWiOKWiOKVlyAg4paI4paI4pWR4paI4paI4pWU4pWQ4pWQ4pWQ4pWQ4pWd4paI4paI4pWU4pWQ4pWQ4pWQ4pWQ4pWd4paI4paI4pWU4pWQ4pWQ4pWQ4pWQ4pWd4paI4paI4pWU4pWQ4pWQ4pWQ4pWQ4pWd4paI4paI4pWU4pWQ4pWQ4pWQ4pWQ4pWd4paI4paI4pWU4pWQ4pWQ4paI4paI4pWX4paI4paI4pWU4pWQ4pWQ4paI4paI4pWX4paI4paI4pWU4pWQ4pWQ4paI4paI4pWX4pWa4paI4paI4pWXIOKWiOKWiOKVlOKVnSAgICDilojilojilZTilZDilZDilZDilZDilZ3ilojilojilZTilZDilZDilZDilojilojilZfilojilojilZTilZDilZDilojilojilZcgICAg4paI4paI4pWU4pWQ4pWQ4pWQ4pWQ4pWd4paI4paI4pWU4pWQ4pWQ4pWQ4pWQ4pWd4paI4paI4pWU4pWQ4pWQ4paI4paI4pWX4paI4paI4pWR4paI4paI4pWU4pWQ4pWQ4paI4paI4pWX4pWa4pWQ4pWQ4paI4paI4pWU4pWQ4pWQ4pWdCuKWiOKWiOKVlOKWiOKWiOKVlyDilojilojilZHilojilojilojilojilojilZcgIOKWiOKWiOKWiOKWiOKWiOKWiOKWiOKVl+KWiOKWiOKWiOKWiOKWiOKWiOKWiOKVl+KWiOKWiOKWiOKWiOKWiOKVlyAg4paI4paI4paI4paI4paI4paI4paI4pWX4paI4paI4paI4paI4paI4paI4paI4pWR4paI4paI4paI4paI4paI4paI4pWU4pWd4paI4paI4paI4paI4paI4paI4pWU4pWdIOKVmuKWiOKWiOKWiOKWiOKVlOKVnSAgICAg4paI4paI4paI4paI4paI4pWXICDilojilojilZEgICDilojilojilZHilojilojilojilojilojilojilZTilZ0gICAg4paI4paI4paI4paI4paI4paI4paI4pWX4paI4paI4pWRICAgICDilojilojilojilojilojilojilZTilZ3ilojilojilZHilojilojilojilojilojilojilZTilZ0gICDilojilojilZEK4paI4paI4pWR4pWa4paI4paI4pWX4paI4paI4pWR4paI4paI4pWU4pWQ4pWQ4pWdICDilZrilZDilZDilZDilZDilojilojilZHilZrilZDilZDilZDilZDilojilojilZHilojilojilZTilZDilZDilZ0gIOKVmuKVkOKVkOKVkOKVkOKWiOKWiOKVkeKWiOKWiOKVlOKVkOKVkOKWiOKWiOKVkeKWiOKWiOKVlOKVkOKVkOKWiOKWiOKVl+KWiOKWiOKVlOKVkOKVkOKWiOKWiOKVlyAg4pWa4paI4paI4pWU4pWdICAgICAg4paI4paI4pWU4pWQ4pWQ4pWdICDilojilojilZEgICDilojilojilZHilojilojilZTilZDilZDilojilojilZcgICAg4pWa4pWQ4pWQ4pWQ4pWQ4paI4paI4pWR4paI4paI4pWRICAgICDilojilojilZTilZDilZDilojilojilZfilojilojilZHilojilojilZTilZDilZDilZDilZ0gICAg4paI4paI4pWRCuKWiOKWiOKVkSDilZrilojilojilojilojilZHilojilojilojilojilojilojilojilZfilojilojilojilojilojilojilojilZHilojilojilojilojilojilojilojilZHilojilojilojilojilojilojilojilZfilojilojilojilojilojilojilojilZHilojilojilZEgIOKWiOKWiOKVkeKWiOKWiOKVkSAg4paI4paI4pWR4paI4paI4pWRICDilojilojilZEgICDilojilojilZEgICAgICAg4paI4paI4pWRICAgICDilZrilojilojilojilojilojilojilZTilZ3ilojilojilZEgIOKWiOKWiOKVkSAgICDilojilojilojilojilojilojilojilZHilZrilojilojilojilojilojilojilZfilojilojilZEgIOKWiOKWiOKVkeKWiOKWiOKVkeKWiOKWiOKVkSAgICAgICAg4paI4paI4pWRCuKVmuKVkOKVnSAg4pWa4pWQ4pWQ4pWQ4pWd4pWa4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWd4pWa4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWd4pWa4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWd4pWa4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWd4pWa4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWd4pWa4pWQ4pWdICDilZrilZDilZ3ilZrilZDilZ0gIOKVmuKVkOKVneKVmuKVkOKVnSAg4pWa4pWQ4pWdICAg4pWa4pWQ4pWdICAgICAgIOKVmuKVkOKVnSAgICAgIOKVmuKVkOKVkOKVkOKVkOKVkOKVnSDilZrilZDilZ0gIOKVmuKVkOKVnSAgICDilZrilZDilZDilZDilZDilZDilZDilZ0g4pWa4pWQ4pWQ4pWQ4pWQ4pWQ4pWd4pWa4pWQ4pWdICDilZrilZDilZ3ilZrilZDilZ3ilZrilZDilZ0gICAgICAgIOKVmuKVkOKVnQpdXQoKcGNhbGwoZnVuY3Rpb24oKQogICAgYXNzZXJ0KGdldHJhd21ldGF0YWJsZSkKICAgIGxvY2FsIGdybSA9IGdldHJhd21ldGF0YWJsZShnYW1lKQogICAgbG9jYWwgb2xkID0gZ3JtLl9fbmFtZWNhbGwKICAgIHNldHJlYWRvbmx5KGdybSwgZmFsc2UpCiAgICBncm0uX19uYW1lY2FsbCA9IG5ld2NjbG9zdXJlKGZ1bmN0aW9uKHNlbGYsIC4uLikKICAgICAgICBsb2NhbCBhcmdzID0gey4uLn0KICAgICAgICBpZiB0b3N0cmluZyhhcmdzWzFdKSA9PSAiVGVsZXBvcnREZXRlY3QiIHRoZW4gcmV0dXJuCiAgICAgICAgZWxzZWlmIHRvc3RyaW5nKGFyZ3NbMV0pID09ICJDSEVDS0VSXzEiIHRoZW4gcmV0dXJuCiAgICAgICAgZWxzZWlmIHRvc3RyaW5nKGFyZ3NbMV0pID09ICJDSEVDS0VSIiB0aGVuIHJldHVybgogICAgICAgIGVsc2VpZiB0b3N0cmluZyhhcmdzWzFdKSA9PSAiR1VJX0NIRUNLIiB0aGVuIHJldHVybgogICAgICAgIGVsc2VpZiB0b3N0cmluZyhhcmdzWzFdKSA9PSAiT25lTW9yZVRpbWUiIHRoZW4gcmV0dXJuCiAgICAgICAgZWxzZWlmIHRvc3RyaW5nKGFyZ3NbMV0pID09ICJjaGVja2luZ1NQRUVEIiB0aGVuIHJldHVybgogICAgICAgIGVsc2VpZiB0b3N0cmluZyhhcmdzWzFdKSA9PSAiQkFOUkVNT1RFIiB0aGVuIHJldHVybgogICAgICAgIGVsc2VpZiB0b3N0cmluZyhhcmdzWzFdKSA9PSAiUEVSTUFJREJBTiIgdGhlbiByZXR1cm4KICAgICAgICBlbHNlaWYgdG9zdHJpbmcoYXJnc1sxXSkgPT0gIktJQ0tSRU1PVEUiIHRoZW4gcmV0dXJuCiAgICAgICAgZWxzZWlmIHRvc3RyaW5nKGFyZ3NbMV0pID09ICJCUl9LSUNLUEMiIHRoZW4gcmV0dXJuCiAgICAgICAgZWxzZWlmIHRvc3RyaW5nKGFyZ3NbMV0pID09ICJCUl9LSUNLTU9CSUxFIiB0aGVuIHJldHVybgogICAgICAgIGVuZAogICAgICAgIHJldHVybiBvbGQoc2VsZiwgLi4uKQogICAgZW5kKQplbmQpCgotLSBwY2FsbChmdW5jdGlvbigpCi0tICAgICB3aGlsZSB0YXNrLndhaXQoKSBkbwotLSAgICAgICAgIGZvciBfLCB2IGluIHBhaXJzKGdhbWU6R2V0U2VydmljZSgiUGxheWVycyIpLkxvY2FsUGxheWVyLkNoYXJhY3RlcjpHZXREZXNjZW5kYW50cygpKSBkbwotLSAgICAgICAgICAgICBpZiB2OklzQSgiTG9jYWxTY3JpcHQiKSBhbmQgdi5OYW1lID09ICJHZW5lcmFsIiBvciB2Lk5hbWUgPT0gIlNoaWZ0bG9jayIgb3Igdi5OYW1lID09ICJGYWxsRGFtYWdlIiBvciB2Lk5hbWUgPT0gIjQ0NDQiIG9yIHYuTmFtZSA9PSAiQ2FtQm9iIiBvciB2Lk5hbWUgPT0gIkp1bXBDRCIgb3Igdi5OYW1lID09ICJMb29raW5nIiBvciB2Lk5hbWUgPT0gIlJ1biIgdGhlbiB2OkRlc3Ryb3koKQotLSAgICAgICAgICAgICBlbmQKLS0gICAgICAgICBlbmQKLS0gICAgICAgICBmb3IgXywgdiBpbiBwYWlycyhnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKS5Mb2NhbFBsYXllci5QbGF5ZXJTY3JpcHRzOkdldERlc2NlbmRhbnRzKCkpIGRvCi0tICAgICAgICAgICAgIGlmIHY6SXNBKCJMb2NhbFNjcmlwdCIpIGFuZCB2Lk5hbWUgPT0gIlJvYmxveE1vdG9yNkRCdWdGaXgiIG9yIHYuTmFtZSA9PSAiQ2xhbnMiIG9yIHYuTmFtZSA9PSAiQ29kZXMiIG9yIHYuTmFtZSA9PSAiQ3VzdG9tRm9yY2VGaWVsZCIgb3Igdi5OYW1lID09ICJNZW51Qmxvb2RTcCIgb3Igdi5OYW1lID09ICJQbGF5ZXJMaXN0IiB0aGVuIHY6RGVzdHJveSgpCi0tICAgICAgICAgICAgIGVuZAotLSAgICAgICAgIGVuZAotLSAgICAgZW5kCi0tIGVuZCkKaWYgc2V0ZmZsYWcgYW5kIHR5cGUoc2V0ZmZsYWcpID09ICJmdW5jdGlvbiIgdGhlbgogICAgd2hpbGUgdGFzay53YWl0KCkgZG8KICAgICAgICBzZXRmZmxhZygiQWJ1c2VSZXBvcnRTY3JlZW5zaG90IiwgImZhbHNlIikKICAgICAgICBzZXRmZmxhZygiQWJ1c2VSZXBvcnRTY3JlZW5zaG90UGVyY2VudGFnZSIsICIwIikKICAgICAgICAtLXNldGZmbGFnKCJBYnVzZVJlcG9ydFNjcmVlbnNob3RNYXhSZXBvcnRzIiwgIjAiKQogICAgICAgIC0tc2V0ZmZsYWcoIkFidXNlUmVwb3J0U2NyZWVuc2hvdE1heFJlcG9ydHNQZXJjZW50YWdlIiwgIjAiKQogICAgICAgIC0tc2V0ZmZsYWcoIkFidXNlUmVwb3J0U2NyZWVuc2hvdE1heFJlcG9ydHNEZWxheSIsICIwIikKICAgICAgICAtLXNldGZmbGFnKCJBYnVzZVJlcG9ydFNjcmVlbnNob3RNYXhSZXBvcnRzUXVhbGl0eSIsICIwIikKICAgIGVuZAplbmQKCmdhbWU6R2V0U2VydmljZSgiU3RhcnRlckd1aSIpOlNldENvcmUoIlNlbmROb3RpZmljYXRpb24iLCB7VGl0bGUgPSAiV0FISCBIdWIiLCBUZXh0ID0gIlNjcmlwdCBsb2FkaW5nLi4uIiwgSWNvbiA9ICJyYnhhc3NldGlkOi8vMTIwOTkzODEwMzAxMzU1In0pCmlmIGdhbWUuUGxheWVycy5Mb2NhbFBsYXllci5UZWFtID09IG5pbCB0aGVuIGdhbWU6R2V0U2VydmljZSgiUmVwbGljYXRlZFN0b3JhZ2UiKS5SZW1vdGVzWyJDb21tRl8iXTpJbnZva2VTZXJ2ZXIoIlNldFRlYW0iLCBfR1siU2V0dGluZ3MiXVsiVGVhbSJdKQplbmQgcmVwZWF0IHdhaXQoMSkgdW50aWwgZ2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLkNoYXJhY3RlciBhbmQgZ2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLkNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWRSb290UGFydCIpCgotLSJSZWQiLCAiR3JlZW4iLCAiQmx1ZSIsICJZZWxsb3ciLCAiUHVycGxlIiwgIk9yYW5nZSIsICJQaW5rIiwgIkdyYXkiLCAiQnJvd24iLCAiV2hpdGUiLCAiQ3lhbiIsICJNYWdlbnRhIiwgIlNpbHZlciIsICJHb2xkIiwgIkxpbWUiLCAiTWFyb29uIiwgIk9saXZlIiwgIk5hdnkiLCAiVGVhbCIsICJOYXZ5IgpmdW5jdGlvbiBPd25DaGF0ZnVuY3Rpb24oVGV4dCwgQ29sb3IsIFRleHRTaXplLCBGb250KQogICAgZ2FtZTpHZXRTZXJ2aWNlKCJTdGFydGVyR3VpIik6U2V0Q29yZSgiQ2hhdE1ha2VTeXN0ZW1NZXNzYWdlIiwge1RleHQgPSBUZXh0OyBDb2xvciA9IChmdW5jdGlvbigpCiAgICAgICAgaWYgICAgIENvbG9yID09ICJSZWQiICAgICB0aGVuIHJldHVybiBDb2xvcjMuZnJvbVJHQigyNTUsIDAsIDApCiAgICAgICAgZWxzZWlmIENvbG9yID09ICJHcmVlbiIgICB0aGVuIHJldHVybiBDb2xvcjMuZnJvbVJHQigwLCAyNTUsIDApCiAgICAgICAgZWxzZWlmIENvbG9yID09ICJCbHVlIiAgICB0aGVuIHJldHVybiBDb2xvcjMuZnJvbVJHQigwLCAwLCAyNTUpCiAgICAgICAgZWxzZWlmIENvbG9yID09ICJZZWxsb3ciICB0aGVuIHJldHVybiBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMCkKICAgICAgICBlbHNlaWYgQ29sb3IgPT0gIlB1cnBsZSIgIHRoZW4gcmV0dXJuIENvbG9yMy5mcm9tUkdCKDEyOCwgMCwgMTI4KQogICAgICAgIGVsc2VpZiBDb2xvciA9PSAiT3JhbmdlIiAgdGhlbiByZXR1cm4gQ29sb3IzLmZyb21SR0IoMjU1LCAxNjUsIDApCiAgICAgICAgZWxzZWlmIENvbG9yID09ICJQaW5rIiAgICB0aGVuIHJldHVybiBDb2xvcjMuZnJvbVJHQigyNTUsIDE5MiwgMjAzKQogICAgICAgIGVsc2VpZiBDb2xvciA9PSAiR3JheSIgICAgdGhlbiByZXR1cm4gQ29sb3IzLmZyb21SR0IoMTI4LCAxMjgsIDEyOCkKICAgICAgICBlbHNlaWYgQ29sb3IgPT0gIkJyb3duIiAgIHRoZW4gcmV0dXJuIENvbG9yMy5mcm9tUkdCKDEzOSwgNjksIDE5KQogICAgICAgIGVsc2VpZiBDb2xvciA9PSAiV2hpdGUiICAgdGhlbiByZXR1cm4gQ29sb3IzLmZyb21SR0IoMjU1LCAyNTUsIDI1NSkKICAgICAgICBlbHNlaWYgQ29sb3IgPT0gIkN5YW4iICAgIHRoZW4gcmV0dXJuIENvbG9yMy5mcm9tUkdCKDAsIDI1NSwgMjU1KQogICAgICAgIGVsc2VpZiBDb2xvciA9PSAiTWFnZW50YSIgdGhlbiByZXR1cm4gQ29sb3IzLmZyb21SR0IoMjU1LCAwLCAyNTUpCiAgICAgICAgZWxzZWlmIENvbG9yID09ICJTaWx2ZXIiICB0aGVuIHJldHVybiBDb2xvcjMuZnJvbVJHQigxOTIsIDE5MiwgMTkyKQogICAgICAgIGVsc2VpZiBDb2xvciA9PSAiR29sZCIgICAgdGhlbiByZXR1cm4gQ29sb3IzLmZyb21SR0IoMjU1LCAyMTUsIDApCiAgICAgICAgZWxzZWlmIENvbG9yID09ICJMaW1lIiAgICB0aGVuIHJldHVybiBDb2xvcjMuZnJvbVJHQigxOTMsIDI1NSwgMTEpCiAgICAgICAgZWxzZWlmIENvbG9yID09ICJNYXJvb24iICB0aGVuIHJldHVybiBDb2xvcjMuZnJvbVJHQigxMjgsIDAsIDApCiAgICAgICAgZWxzZWlmIENvbG9yID09ICJPbGl2ZSIgICB0aGVuIHJldHVybiBDb2xvcjMuZnJvbVJHQigxMjgsIDEyOCwgMCkKICAgICAgICBlbHNlaWYgQ29sb3IgPT0gIk5hdnkiICAgIHRoZW4gcmV0dXJuIENvbG9yMy5mcm9tUkdCKDAsIDAsIDEyOCkKICAgICAgICBlbHNlaWYgQ29sb3IgPT0gIlRlYWwiICAgIHRoZW4gcmV0dXJuIENvbG9yMy5mcm9tUkdCKDAsIDEyOCwgMTI4KQogICAgICAgIGVsc2VpZiBDb2xvciA9PSAiTmF2eSIgICAgdGhlbiByZXR1cm4gQ29sb3IzLmZyb21SR0IoMCwgMCwgMTI4KSBlbmQKICAgICAgICAtLWVsc2VpZiBDb2xvciA9PSAiQmxhY2siIHRoZW4gcmV0dXJuIENvbG9yMy5mcm9tUkdCKDAsIDAsIDApCiAgICBlbmQpKCk7IFRleHRTaXplID0gVGV4dFNpemU7IEZvbnQgPSBGb250fSkKZW5kCk93bkNoYXRmdW5jdGlvbigiW1dBSEggSHViXTogU2NyaXB0IGV4ZWN1dGVkXG5wbGVhc2Ugd2FpdCBmb3IgdGhlIHNjcmlwdCB0byBsb2FkXG5zY3JpcHQgbG9hZGluZy4uLlxuIiwgIlJlZCIsIDE4LCBFbnVtLkZvbnQuU291cmNlU2Fuc0JvbGQpCi0tW1sK4paI4paI4paI4paI4paI4paI4paI4pWXIOKWiOKWiOKWiOKWiOKWiOKWiOKVl+KWiOKWiOKWiOKWiOKWiOKWiOKVlyDilojilojilZfilojilojilojilojilojilojilZcg4paI4paI4paI4paI4paI4paI4paI4paI4pWXICAgIOKWiOKWiOKWiOKWiOKWiOKWiOKWiOKVl+KWiOKWiOKWiOKWiOKWiOKWiOKWiOKVl+KWiOKWiOKWiOKWiOKWiOKWiOKWiOKWiOKVl+KWiOKWiOKVlyAgIOKWiOKWiOKVl+KWiOKWiOKWiOKWiOKWiOKWiOKVlyAgICAg4paI4paI4paI4paI4paI4paI4paI4pWX4paI4paI4pWXICAg4paI4paI4pWX4paI4paI4paI4pWXICAg4paI4paI4pWXCuKWiOKWiOKVlOKVkOKVkOKVkOKVkOKVneKWiOKWiOKVlOKVkOKVkOKVkOKVkOKVneKWiOKWiOKVlOKVkOKVkOKWiOKWiOKVl+KWiOKWiOKVkeKWiOKWiOKVlOKVkOKVkOKWiOKWiOKVl+KVmuKVkOKVkOKWiOKWiOKVlOKVkOKVkOKVnSAgICDilojilojilZTilZDilZDilZDilZDilZ3ilojilojilZTilZDilZDilZDilZDilZ3ilZrilZDilZDilojilojilZTilZDilZDilZ3ilojilojilZEgICDilojilojilZHilojilojilZTilZDilZDilojilojilZcgICAg4paI4paI4pWU4pWQ4pWQ4pWQ4pWQ4pWd4paI4paI4pWRICAg4paI4paI4pWR4paI4paI4paI4paI4pWXICDilojilojilZEK4paI4paI4paI4paI4paI4paI4paI4pWX4paI4paI4pWRICAgICDilojilojilojilojilojilojilZTilZ3ilojilojilZHilojilojilojilojilojilojilZTilZ0gICDilojilojilZEgICAgICAg4paI4paI4paI4paI4paI4paI4paI4pWX4paI4paI4paI4paI4paI4pWXICAgICDilojilojilZEgICDilojilojilZEgICDilojilojilZHilojilojilojilojilojilojilZTilZ0gICAg4paI4paI4paI4paI4paI4pWXICDilojilojilZEgICDilojilojilZHilojilojilZTilojilojilZcg4paI4paI4pWRCuKVmuKVkOKVkOKVkOKVkOKWiOKWiOKVkeKWiOKWiOKVkSAgICAg4paI4paI4pWU4pWQ4pWQ4paI4paI4pWX4paI4paI4pWR4paI4paI4pWU4pWQ4pWQ4pWQ4pWdICAgIOKWiOKWiOKVkSAgICAgICDilZrilZDilZDilZDilZDilojilojilZHilojilojilZTilZDilZDilZ0gICAgIOKWiOKWiOKVkSAgIOKWiOKWiOKVkSAgIOKWiOKWiOKVkeKWiOKWiOKVlOKVkOKVkOKVkOKVnSAgICAg4paI4paI4pWU4pWQ4pWQ4pWdICDilZrilojilojilZcg4paI4paI4pWU4pWd4paI4paI4pWR4pWa4paI4paI4pWX4paI4paI4pWRCuKWiOKWiOKWiOKWiOKWiOKWiOKWiOKVkeKVmuKWiOKWiOKWiOKWiOKWiOKWiOKVl+KWiOKWiOKVkSAg4paI4paI4pWR4paI4paI4pWR4paI4paI4pWRICAgICAgICDilojilojilZEgICAgICAg4paI4paI4paI4paI4paI4paI4paI4pWR4paI4paI4paI4paI4paI4paI4paI4pWXICAg4paI4paI4pWRICAg4pWa4paI4paI4paI4paI4paI4paI4pWU4pWd4paI4paI4pWRICAgICAgICAg4paI4paI4paI4paI4paI4paI4paI4pWXIOKVmuKWiOKWiOKWiOKWiOKVlOKVnSDilojilojilZEg4pWa4paI4paI4paI4paI4pWRCuKVmuKVkOKVkOKVkOKVkOKVkOKVkOKVnSDilZrilZDilZDilZDilZDilZDilZ3ilZrilZDilZ0gIOKVmuKVkOKVneKVmuKVkOKVneKVmuKVkOKVnSAgICAgICAg4pWa4pWQ4pWdICAgICAgIOKVmuKVkOKVkOKVkOKVkOKVkOKVkOKVneKVmuKVkOKVkOKVkOKVkOKVkOKVkOKVnSAgIOKVmuKVkOKVnSAgICDilZrilZDilZDilZDilZDilZDilZ0g4pWa4pWQ4pWdICAgICAgICAg4pWa4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWdICDilZrilZDilZDilZDilZ0gIOKVmuKVkOKVnSAg4pWa4pWQ4pWQ4pWQ4pWdCl1dCmdldGdlbnYoKS5Mb2NhbENvbmZpZyA9IHsKICAgIFsiRmFybSJdID0gewogICAgICAgIFsiTGV2ZWwiXSA9IGZhbHNlOwogICAgICAgIFsiV29ybGQiXSA9IHsKICAgICAgICAgICAgWyJXb3JsZCAyIl0gPSBmYWxzZTsKICAgICAgICAgICAgWyJXb3JsZCAzIl0gPSBmYWxzZTsKICAgICAgICB9OwogICAgICAgIFsiTW9uc3RlciBGYXJtIl0gPSB7CiAgICAgICAgICAgIFsiRW5hYmxlIl0gPSBmYWxzZTsKICAgICAgICAgICAgWyJTZWxlY3QgTW9uc3RlciBGYXJtIl0gPSAiIjsKICAgICAgICB9OwogICAgICAgIFsiQm9zcyBGYXJtIl0gPSB7CiAgICAgICAgICAgIFsiRW5hYmxlIl0gPSBmYWxzZTsKICAgICAgICAgICAgWyJTZWxlY3QgQm9zcyBGYXJtIl0gPSAiIjsKICAgICAgICB9OwogICAgICAgIFsiUXVlc3QiXSA9IHsKICAgICAgICAgICAgWyJDaXRpemVuIl0gPSBmYWxzZTsKICAgICAgICAgICAgWyJSYWluYm93IEhha2kiXSA9IGZhbHNlOwogICAgICAgICAgICBbIkJhcnRpbG8iXSA9IGZhbHNlOwogICAgICAgICAgICBbIk11c2tldGVlciJdID0gZmFsc2U7CiAgICAgICAgICAgIFsiU3dhbiJdID0gZmFsc2U7CiAgICAgICAgfTsKICAgICAgICBbIk1hc3RlcnkiXSA9IGZhbHNlOwogICAgICAgIFsiQ2hlc3RzIl0gPSBmYWxzZTsKICAgICAgICBbIldoaXRlIEJlYXJkIl0gPSBmYWxzZTsKICAgICAgICBbIkxhdyJdID0gZmFsc2U7CiAgICAgICAgWyJGYWN0b3J5Il0gPSBmYWxzZTsKICAgICAgICBbIkRhcmsgQmVhcmQiXSA9IGZhbHNlOwogICAgICAgIFsiRWN0b3BsYXNtIl0gPSBmYWxzZTsKICAgICAgICBbIlBpcmF0ZXMgUmFpZCJdID0gZmFsc2U7CiAgICAgICAgWyJCb25lIl0gPSBmYWxzZTsKICAgICAgICBbIlNvdWwgUmVhcGVyIl0gPSBmYWxzZTsKICAgICAgICBbIkNha2UgUHJpbmNlIl0gPSBmYWxzZTsKICAgICAgICBbIlJpcCBJbmRyYSJdID0gZmFsc2U7CiAgICAgICAgWyJHZXQgTWF0ZXJpYWwiXSA9IHsKICAgICAgICAgICAgWyJUdXJuIE9uIl0gPSBmYWxzZTsKICAgICAgICAgICAgWyJNYXRlcmlhbCJdID0gIiI7CiAgICAgICAgfTsKICAgIH07CiAgICBbIkdldCBJdGVtIl0gPSB7CiAgICAgICAgWyJNZWxlZSJdID0gewogICAgICAgICAgICBbIkRlYWx0aCBTdGVwIl0gPSBmYWxzZTsKICAgICAgICAgICAgWyJFbGVjdHJpYyBDbGF3Il0gPSBmYWxzZTsKICAgICAgICAgICAgWyJTaGFybWFuIEthcmF0ZSJdID0gZmFsc2U7CiAgICAgICAgICAgIFsiU3VwZXJodW1hbiJdID0gZmFsc2U7CiAgICAgICAgICAgIFsiRHJhZ29uIFRhbG9uIl0gPSBmYWxzZTsKICAgICAgICAgICAgWyJHb2RIdW1hbiJdID0gZmFsc2U7CiAgICAgICAgfTsKICAgICAgICBbIlN3b3JkIl0gPSB7CiAgICAgICAgICAgIFsiU2FiZXIiXSA9IGZhbHNlOwogICAgICAgICAgICBbIlBvbGUiXSA9IGZhbHNlOwogICAgICAgICAgICBbIlBvbGUgVjIiXSA9IGZhbHNlOwogICAgICAgICAgICBbIlR1c2hpdGEiXSA9IGZhbHNlOwogICAgICAgIH07CiAgICAgICAgWyJHdW4iXSA9IHsKICAgICAgICAgICAgWyJTb3VsIEd1aXRhciJdID0gZmFsc2U7CiAgICAgICAgfTsKICAgICAgICBbIlJhY2UiXSA9IHsKICAgICAgICAgICAgWyJHaG91bCJdID0gZmFsc2U7CiAgICAgICAgICAgIFsiQ3lib3JnIl0gPSBmYWxzZTsKICAgICAgICAgICAgWyJVcGdyYWRlIl0gPSB7CiAgICAgICAgICAgICAgICBbIlYyIl0gPSBmYWxzZTsKICAgICAgICAgICAgICAgIFsiVjMiXSA9IGZhbHNlOwogICAgICAgICAgICAgICAgWyJWNCJdID0gZmFsc2U7CiAgICAgICAgICAgIH07CiAgICAgICAgfTsKICAgIH07CiAgICBbIlJhaWQiXSA9IHsKICAgICAgICBbIkNoaXAgUmFpZCBTZWxsZWN0ZWQiXSA9ICJGbGFtZSI7CiAgICB9OwogICAgWyJGcnVpdHMiXSA9IHsKICAgICAgICBbIkZydWl0IFNlbGxlY3RlZCJdID0gIiI7CiAgICAgICAgWyJBdXRvIENvbGxlY3QgRnJ1aXRzIl0gPSBmYWxzZTsKICAgICAgICBbIkF1dG8gQnV5IEZydWl0Il0gPSBmYWxzZTsKICAgICAgICBbIkF1dG8gRWF0IEZydWl0Il0gPSBmYWxzZTsKICAgIH07CiAgICBbIlNldHRpbmdzIl0gPSB7CiAgICAgICAgWyJTZWxlY3QgV2VhcG9uIl0gPSAiTWVsZWUiOwogICAgICAgIFsiVHdlZW4gU3BlZWQiXSA9IDMwMDsKICAgICAgICBbIlF1ZXN0IE9wdGlvbiJdID0gIlNpbmdsZSI7CiAgICAgICAgWyJGYXN0IEF0dGFjayBEZWxheSJdID0gMC4xOwogICAgICAgIFsiQnJpbmcgTW9kIERpc3RhbmNlIl0gPSAzMDA7CiAgICAgICAgWyJNYXN0ZXJ5IEl0ZW0iXSA9ICIiOwogICAgICAgIFsiTWFzdGVyeSBIZWFsdGggUGVyY2VudCJdID0gMzsKICAgICAgICBbIlJlbW92ZSBFZmZlY3QiXSA9IHsKICAgICAgICAgICAgWyJEZWF0aCJdID0gZmFsc2U7CiAgICAgICAgICAgIFsiTGV2ZWwgVXAiXSA9IGZhbHNlOwogICAgICAgICAgICBbIkhpdCJdID0gZmFsc2U7CiAgICAgICAgICAgIFsiUmVzcGF3biJdID0gZmFsc2U7CiAgICAgICAgfTsKICAgICAgICBbIlNjcmVlbiJdID0gewogICAgICAgICAgICBbIkRpc2FibGUgM0QgUmVuZGVyIl0gPSBmYWxzZTsKICAgICAgICAgICAgWyJEaXNhYmxlIFBsYXllciBHVUkiXSA9IGZhbHNlOwogICAgICAgICAgICBbIkF1dG8gVHVybiBPZmYgVUkiXSA9IGZhbHNlOwogICAgICAgIH07CiAgICAgICAgWyJUaGVtZSJdID0gIkRhcmtlciI7CiAgICAgICAgWyJNYXggUGxheWVycyBIb3AiXSA9IDk7CiAgICAgICAgLS0gWyJHcmFwaGljcyJdID0gewogICAgICAgIC0tICAgICBbIkZQUyBCb29zdGVyIl0gPSBmYWxzZTsKICAgICAgICAtLSAgICAgWyJCZXR0ZXIgR3JhcGhpY3MiXSA9IGZhbHNlOwogICAgICAgIC0tIH07CiAgICB9Owp9OwoKZ2V0Z2VudigpLlNjcmlwdFNldCA9IHt9Owpmb3IgXywgdiBpbiBwYWlycyh7IldBSEggSHViIiwgIldBSEggSHViL0Jsb3ggRnJ1aXRzIiwgIldBSEggSHViL0Jsb3ggRnJ1aXRzLyIgLi4gZ2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLk5hbWV9KSBkbwogICAgaWYgbm90IGlzZm9sZGVyKHYpIHRoZW4gbWFrZWZvbGRlcih2KSBlbmQKZW5kCgpmdW5jdGlvbiBzYXZlU2V0dGluZ3MoKQogICAgd3JpdGVmaWxlKCJXQUhIIEh1Yi9CbG94IEZydWl0cy8iIC4uIGdhbWUuUGxheWVycy5Mb2NhbFBsYXllci5OYW1lIC4uICJtYWluLkpTT04iLCBnYW1lOkdldFNlcnZpY2UoIkh0dHBTZXJ2aWNlIik6SlNPTkVuY29kZShnZXRnZW52KCkuTG9jYWxDb25maWcpKQplbmQKCmlmIGlzZmlsZSgiV0FISCBIdWIvQmxveCBGcnVpdHMvIiAuLiBnYW1lLlBsYXllcnMuTG9jYWxQbGF5ZXIuTmFtZSAuLiAibWFpbi5KU09OIikgdGhlbgogICAgZ2V0Z2VudigpLkxvY2FsQ29uZmlnID0gZ2FtZTpHZXRTZXJ2aWNlKCJIdHRwU2VydmljZSIpOkpTT05EZWNvZGUocmVhZGZpbGUoIldBSEggSHViL0Jsb3ggRnJ1aXRzLyIgLi4gZ2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLk5hbWUgLi4gIm1haW4uSlNPTiIpKQplbmQKCmxvY2FsIE1hdGVyaWFsc0xpc3RzID0ge30KbG9jYWwgQ0ZyYW1lSXNsYW5kcyA9IHt9CmxvY2FsIFRhYmxlTW9uc3RlciwgVGFibGVNb25zdGVyQm9zcyA9IHt9LCB7fQoKbG9jYWwgbW9uc3RlcnMsIG1vbnN0ZXJMZXZlbHMgPSB7fSwge30KbG9jYWwgYm9zc01vbnN0ZXJzLCBib3NzTGV2ZWxzID0ge30sIHt9Cgpsb2NhbCBtb25zdGVyTGV2ZWxTZXQgPSB7fQpsb2NhbCBib3NzTGV2ZWxTZXQgPSB7fQoKZm9yIF8sIHYgaW4gcGFpcnMod29ya3NwYWNlLl9Xb3JsZE9yaWdpbi5FbmVteVNwYXduczpHZXRDaGlsZHJlbigpKSBkbwogICAgbG9jYWwgbmFtZSA9IHYuTmFtZQogICAgbG9jYWwgbGV2ZWwgPSB0b251bWJlcihuYW1lOm1hdGNoKCIlZCsiKSkKICAgIGlmIGxldmVsIHRoZW4KICAgICAgICBpZiBuYW1lOmxvd2VyKCk6ZmluZCgiYm9zcyIpIHRoZW4KICAgICAgICAgICAgaWYgbm90IGJvc3NMZXZlbFNldFtsZXZlbF0gdGhlbgogICAgICAgICAgICAgICAgYm9zc01vbnN0ZXJzW2xldmVsXSA9IG5hbWUKICAgICAgICAgICAgICAgIHRhYmxlLmluc2VydChib3NzTGV2ZWxzLCBsZXZlbCkKICAgICAgICAgICAgICAgIGJvc3NMZXZlbFNldFtsZXZlbF0gPSB0cnVlCiAgICAgICAgICAgIGVuZAogICAgICAgIGVsc2UKICAgICAgICAgICAgaWYgbm90IG1vbnN0ZXJMZXZlbFNldFtsZXZlbF0gdGhlbgogICAgICAgICAgICAgICAgbW9uc3RlcnNbbGV2ZWxdID0gbmFtZQogICAgICAgICAgICAgICAgdGFibGUuaW5zZXJ0KG1vbnN0ZXJMZXZlbHMsIGxldmVsKQogICAgICAgICAgICAgICAgbW9uc3RlckxldmVsU2V0W2xldmVsXSA9IHRydWUKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICBlbmQKZW5kCgp0YWJsZS5zb3J0KG1vbnN0ZXJMZXZlbHMpCnRhYmxlLnNvcnQoYm9zc0xldmVscykKCmZvciBfLCB2IGluIGlwYWlycyhtb25zdGVyTGV2ZWxzKSBkbyB0YWJsZS5pbnNlcnQoVGFibGVNb25zdGVyLCBzdHJpbmcuZm9ybWF0KCIlcyIsIG1vbnN0ZXJzW3ZdKSkKZW5kCmZvciBfLCB2IGluIGlwYWlycyhib3NzTGV2ZWxzKSBkbyB0YWJsZS5pbnNlcnQoVGFibGVNb25zdGVyQm9zcywgc3RyaW5nLmZvcm1hdCgiJXMiLCBib3NzTW9uc3RlcnNbdl0pKQplbmQKCmxvY2FsIE90aGVySXNsYW5kcyA9IHt9CmxvY2FsIHdvcmtzcGFjZUlzbGFuZHMgPSB3b3Jrc3BhY2UuX1dvcmxkT3JpZ2luLlBsYXllclNwYXduc1tnYW1lLlBsYXllcnMuTG9jYWxQbGF5ZXIuVGVhbS5OYW1lXQppZiBnYW1lLlBsYWNlSWQgPT0gMjc1MzkxNTU0OSB0aGVuCiAgICBNYXRlcmlhbHNMaXN0cyA9IHsiQW5nZWwgV2luZ3MiLCAiTGVhdGhlciIsICJNYWdtYSBPcmUiLCAiU2NyYXAgTWV0YWwiLCAiWWV0aSBGdXIiLCAiRmlzaCBUYWlsIn0KICAgIENGcmFtZUlzbGFuZHMgPSB7CiAgICAgICAgWyJQaXJhdGVzIElzbGFuZCJdID0gd29ya3NwYWNlSXNsYW5kcy5EZWZhdWx0LlBhcnQuQ0ZyYW1lOwogICAgICAgIFsiTWFyaW5lcyBJc2xhbmQiXSA9IHdvcmtzcGFjZUlzbGFuZHMuRGVmYXVsdC5QYXJ0LkNGcmFtZTsKICAgICAgICBbIldpbmRNaWxsIl0gPSB3b3Jrc3BhY2VJc2xhbmRzLlRvd24uUGFydC5DRnJhbWU7CiAgICAgICAgWyJKdW5nbGUiXSA9IHdvcmtzcGFjZUlzbGFuZHMuSnVuZ2xlLlBhcnQuQ0ZyYW1lOwogICAgICAgIFsiUGlyYXRlIFZpbGxhZ2UiXSA9IHdvcmtzcGFjZUlzbGFuZHMuUGlyYXRlLlBhcnQuQ0ZyYW1lOwogICAgICAgIFsiRGVzZXJ0Il0gPSB3b3Jrc3BhY2VJc2xhbmRzLkRlc2VydC5QYXJ0LkNGcmFtZTsKICAgICAgICBbIkZyb3plbiBWaWxsYWdlIl0gPSB3b3Jrc3BhY2VJc2xhbmRzLkljZS5QYXJ0LkNGcmFtZTsKICAgICAgICBbIk1hcmluZUZvcmQiXSA9IHdvcmtzcGFjZUlzbGFuZHMuTWFyaW5lQmFzZS5QYXJ0LkNGcmFtZTsKICAgICAgICBbIkNvbG9zc2V1bSJdID0gd29ya3NwYWNlSXNsYW5kcy5Db2xvc3NldW0uUGFydC5DRnJhbWU7CiAgICAgICAgWyJTa3kgMXN0IEZsb29yIl0gPSB3b3Jrc3BhY2VJc2xhbmRzLlNreS5QYXJ0LkNGcmFtZTsKICAgICAgICBbIlNreSAyc3QgRmxvb3IiXSA9IHdvcmtzcGFjZS5NYXAuU2t5QXJlYTIuUGF0aHdheUhvdXNlLkV4aXQuQ0ZyYW1lOyAtLS00NjAwLCA4NzAsIC0xNjcwCiAgICAgICAgWyJTa3kgM3N0IEZsb29yIl0gPSB3b3Jrc3BhY2UuTWFwLlNreUFyZWExLlBhdGh3YXlUZW1wbGUuRW50cmFuY2UuQ0ZyYW1lOyAtLS03OTAwLCA1NTUwLCAtMzgwCiAgICAgICAgWyJQcmlzb24iXSA9IHdvcmtzcGFjZUlzbGFuZHMuUHJpc29uLlBhcnQuQ0ZyYW1lOwogICAgICAgIFsiTWFnbWEgVmlsbGFnZSJdID0gd29ya3NwYWNlSXNsYW5kcy5NYWdtYS5QYXJ0LkNGcmFtZTsKICAgICAgICBbIlVuZGVyd2F0ZXIgQ2l0eSBbRU5UUkFOQ0VdIl0gPSB3b3Jrc3BhY2UuTWFwLlRlbGVwb3J0U3Bhd24uRW50cmFuY2UuQ0ZyYW1lOyAtLS02MTEwMCwgMCwgMTgwMAogICAgICAgIFsiVW5kZXJ3YXRlciBDaXR5IFtFWElUXSJdID0gd29ya3NwYWNlLk1hcC5UZWxlcG9ydFNwYXduLkV4aXQuQ0ZyYW1lOwogICAgICAgIFsiRm91bnRhaW4gQ2l0eSJdID0gd29ya3NwYWNlSXNsYW5kcy5Gb3VudGFpbi5QYXJ0LkNGcmFtZTsKICAgICAgICBbIk1vYiBJc2xhbmQiXSA9IHdvcmtzcGFjZS5NYXAuTW9iQm9zczpHZXRDaGlsZHJlbigpWzI1XS5DRnJhbWU7CiAgICB9OwplbHNlaWYgZ2FtZS5QbGFjZUlkID09IDQ0NDIyNzIxODMgdGhlbgogICAgTWF0ZXJpYWxzTGlzdHMgPSB7Ik1hZ21hIE9yZSI7ICJFY3RvcGxhc20iOyAiTXlzdGljIERyb3BsZXQiOyAiUmFkaW9hY3RpdmUgTWF0ZXJpYWwiOyAiVmFtcGlyZSBGYW5nIn0KICAgIENGcmFtZUlzbGFuZHMgPSB7CiAgICAgICAgWyJGcmlzdCBBcmVuYSJdID0gd29ya3NwYWNlSXNsYW5kcy5EZWZhdWx0LldvcmxkUGl2b3Q7CiAgICAgICAgWyJUaGUgQ2FmZSJdID0gd29ya3NwYWNlSXNsYW5kcy5CYXIuV29ybGRQaXZvdDsKICAgICAgICBbIkdyZWVuIFpvbmUiXSA9IHdvcmtzcGFjZUlzbGFuZHMuR3JlZW5iLldvcmxkUGl2b3Q7CiAgICAgICAgWyJab21iaWUgSXNsYW5kIl0gPSB3b3Jrc3BhY2VJc2xhbmRzLkdyYXZleWFyZC5Xb3JsZFBpdm90OwogICAgICAgIFsiU25vdyBNb3VudGFpbiJdID0gd29ya3NwYWNlSXNsYW5kcy5Tbm93eS5Xb3JsZFBpdm90OwogICAgICAgIFsiSG90IElzbGFuZCJdID0gd29ya3NwYWNlSXNsYW5kcy5DaXJjbGVJc2xhbmRGaXJlLldvcmxkUGl2b3Q7CiAgICAgICAgWyJDb2xkIElzbGFuZCJdID0gd29ya3NwYWNlSXNsYW5kcy5DaXJjbGVJc2xhbmRJY2UuV29ybGRQaXZvdDsKICAgICAgICBbIlJhaWQgTGFicyJdID0gd29ya3NwYWNlLk1hcC5DaXJjbGVJc2xhbmQuTGFiLkxhYkludGVyaW9yLk1vZGVsLldvcmxkUGl2b3Q7CiAgICAgICAgWyJMYWIgMiJdID0gd29ya3NwYWNlLk1hcC5DaXJjbGVJc2xhbmQ6R2V0Q2hpbGRyZW4oKVs1Ml06R2V0Q2hpbGRyZW4oKVsxN10uUGFydC5DRnJhbWU7IC0td29ya3NwYWNlLk1hcC5DaXJjbGVJc2xhbmQuQmxvY2tQYXJ0CiAgICAgICAgWyJDdXJzZWQgU2hpcCJdID0gd29ya3NwYWNlLk1hcC5HaG9zdFNoaXAuVGVsZXBvcnQuQ0ZyYW1lOwogICAgICAgIFsiSWNlIENhc3RsZSJdID0gd29ya3NwYWNlSXNsYW5kcy5JY2VDYXN0bGUuV29ybGRQaXZvdDsKICAgICAgICBbIkZvcmdvdHRlbiBJc2xhbmQiXSA9IHdvcmtzcGFjZUlzbGFuZHMuRm9yZ290dGVuSXNsYW5kLldvcmxkUGl2b3Q7CiAgICAgICAgWyJEYXJrYmVhcmQgQXJlbmEiXSA9IHdvcmtzcGFjZS5NYXAuRGFya2JlYXJkQXJlbmEuU3VtbW9uZXIuQ0ZyYW1lOwogICAgfTsKICAgIE90aGVySXNsYW5kcyA9IHsKICAgICAgICBbIkZhY3RvcnkiXSA9IHdvcmtzcGFjZS5NYXAuRHJlc3Nyb3NhLlNtaWxlRmFjdG9yeS5Db3JlLldvcmxkUGl2b3Q7CiAgICAgICAgWyJPdmVyaGVhdmVuIl0gPSB3b3Jrc3BhY2UuTWFwLkRyZXNzcm9zYS5PdmVyaGVhdmVuUm9vbS5UZWxlcG9ydFBsYXRlLkNGcmFtZTsKICAgIH0KZWxzZWlmIGdhbWUuUGxhY2VJZCA9PSA3NDQ5NDIzNjM1IHRoZW4KICAgIE1hdGVyaWFsc0xpc3RzID0geyJGaXNoIFRhaWwiOyAiR3VucG93ZGVyIjsgIk1pbmkgVHVzayI7ICJDb25qdXJlZCBDb2NvYSI7ICJEcmFnb24gU2NhbGUifQogICAgQ0ZyYW1lSXNsYW5kcyA9IHsKICAgICAgICBbIlBvcnQgVG93biJdID0gd29ya3NwYWNlSXNsYW5kcy5EZWZhdWx0LldvcmxkUGl2b3Q7CiAgICAgICAgWyJNYW5zaW9uIl0gPSB3b3Jrc3BhY2VJc2xhbmRzLkJpZ01hbnNpb24uV29ybGRQaXZvdDsKICAgICAgICBbIkNhc3RsZSBPbiBUaGUgU2VhIl0gPSB3b3Jrc3BhY2VJc2xhbmRzLk1hcmluZXMuU2VhQ2FzdGxlLldvcmxkUGl2b3Q7IC0td29ya3NwYWNlLk1hcC5UdXJ0bGUuTWFwVGVsZXBvcnRCLkhpdGJveAogICAgICAgIFsiSHlkcmEgQ2VudHJlIl0gPSB3b3Jrc3BhY2VJc2xhbmRzLkh5ZHJhMS5Xb3JsZFBpdm90OwogICAgICAgIFsiSHlkcmEgMiJdID0gd29ya3NwYWNlSXNsYW5kcy5IeWRyYTIuV29ybGRQaXZvdDsKICAgICAgICBbIkh5ZHJhIDMiXSA9IHdvcmtzcGFjZUlzbGFuZHMuSHlkcmEzLldvcmxkUGl2b3Q7CgogICAgICAgIFsiR3JlYXQgVHJlZSJdID0gd29ya3NwYWNlSXNsYW5kcy5HcmVhdFRyZWUuV29ybGRQaXZvdDsKICAgICAgICBbIkhhdW50ZWQgQ2FzdGxlIl0gPSB3b3Jrc3BhY2VJc2xhbmRzLkhhdW50ZWRDYXN0bGUuV29ybGRQaXZvdDsKICAgICAgICBbIkljZSBDcmVhbSBJc2xhbmQiXSA9IHdvcmtzcGFjZUlzbGFuZHMuSWNlQ3JlYW1Jc2xhbmQuV29ybGRQaXZvdDsKICAgICAgICBbIlBlYW51dCBJc2xhbmQiXSA9IENGcmFtZS5uZXcoLTIxMzEsIDM4LCAtMTAxMDYpOwogICAgICAgIFsiQ2FrZSBJc2xhbmQiXSA9IENGcmFtZS5uZXcoLTE3NjIsIDM4LCAtMTE4NzgpOwogICAgICAgIFsiU2VhIHRvIFRyZWF0cyJdID0gQ0ZyYW1lLm5ldygtMTc2MiwgMzgsIC0xMTg3OCk7CiAgICB9OwplbmQKCi0tRnJ1aXRMaXN0ID0geyJCb21iIEZydWl0IiwgIlNwaWtlIEZydWl0IiwgIkNob3AgRnJ1aXQiLCAiU3ByaW5nIEZydWl0IiwgIktpbG8gRnJ1aXQiLCAiU21va2UgRnJ1aXQiLCAiU3BpbiBGcnVpdCIsICJGbGFtZSBGcnVpdCIsICJCaXJkOiBGYWxjb24gRnJ1aXQiLCAiSWNlIEZydWl0IiwgIlNhbmQgRnJ1aXQiLCAiRGFyayBGcnVpdCIsICJSZXZpdmUgRnJ1aXQiLCAiRGlhbW9uZCBGcnVpdCIsICJMaWdodCBGcnVpdCIsICJMb3ZlIEZydWl0IiwgIlJ1YmJlciBGcnVpdCIsICJCYXJyaWVyIEZydWl0IiwgIk1hZ21hIEZydWl0IiwgIlBvcnRhbCBGcnVpdCIsICJRdWFrZSBGcnVpdCIsICJIdW1hbi1IdW1hbjogQnVkZGhhIEZydWl0IiwgIlNwaWRlciBGcnVpdCIsICJCaXJkOiBQaG9lbml4IEZydWl0IiwgIlJ1bWJsZSBGcnVpdCIsICJQYXcgRnJ1aXQiLCAiR3Jhdml0eSBGcnVpdCIsICJEb3VnaCBGcnVpdCIsICJTaGFkb3cgRnJ1aXQiLCAiVmVub20gRnJ1aXQiLCAiQ29udHJvbCBGcnVpdCIsICJTcGlyaXQgRnJ1aXQiLCAiRHJhZ29uIEZydWl0In0KLS1Db21tb25GcnVpdHMgPSB7IlJvY2tldC1Sb2NrZXQiLCAiU3Bpbi1TcGluIiwgIkNob3AtQ2hvcCIsICJTcHJpbmctU3ByaW5nIiwgIkJvbWItQm9tYiIsICJTbW9rZS1TbW9rZSIsICJTcGlrZS1TcGlrZSJ9Ci0tWDJDb2RlID0geyJGVUREMTAiLCAiQklHTkVXUyIsICJUSEVHUkVBVEFDRSIsICJTVUIyR0FNRVJST0JPVF9FWFAxIiwgIlN0cmF3SGF0TWFpbmUiLCAiU3ViMk9mZmljaWFsTm9vYmllIiwgIlNVQjJOT09CTUFTVEVSMTIzIiwgIlN1YjJEYWlncm9jayIsICJBeGlvcmUiLCAiVGFudGFpR2FtaW5nIiwgIkpDV0siLCAiU3RhcmNvZGVoZW8iLCAiU3ViMkZlcjk5OSIsICJNYWdpY2J1cyIsICJFbnl1X2lzX1BybyIsICJCbHV4eHkiLCAiS2l0dEdhbWluZyIsfQotLVJlc2V0Q29kZSA9IHsiS0lUVF9SRVNFVCIsICJTdWIyVW5jbGVLaXphcnUiLCAiU1VCMkdBTUVSUk9CT1RfUkVTRVQxIix9Ci0tVHJhc2hDb2RlID0geyJmdWRkMTAiLCAiZnVkZDEwX1YyIn0KCmZ1bmN0aW9uIEludm9rZVNlcnZlckNhbGwoQ29tbWFuZENhbGwsIC4uLikKICAgIGxvY2FsIGFyZ3MgPSB7Li4ufQogICAgZ2FtZTpHZXRTZXJ2aWNlKCJSZXBsaWNhdGVkU3RvcmFnZSIpLlJlbW90ZXMuQ29tbUZfOkludm9rZVNlcnZlcihDb21tYW5kQ2FsbCwgdW5wYWNrKGFyZ3MpKQplbmQKCmZ1bmN0aW9uIEdldERpc3RhbmNlKFBhcnRUb0Rpc2FuY2UpCiAgICBsb2NhbCBQbGF5ZXJQb3NpdGlvbiA9IGdhbWUuUGxheWVycy5Mb2NhbFBsYXllci5DaGFyYWN0ZXIuSHVtYW5vaWRSb290UGFydC5Qb3NpdGlvbgoKICAgIGlmIHR5cGVvZihQYXJ0VG9EaXNhbmNlKSA9PSAiQ0ZyYW1lIiB0aGVuCiAgICAgICAgcmV0dXJuIChQYXJ0VG9EaXNhbmNlLlBvc2l0aW9uIC0gUGxheWVyUG9zaXRpb24pLk1hZ25pdHVkZQogICAgZWxzZWlmIFBhcnRUb0Rpc2FuY2U6SXNBKCJCYXNlUGFydCIpIHRoZW4KICAgICAgICByZXR1cm4gKFBhcnRUb0Rpc2FuY2UuUG9zaXRpb24gLSBQbGF5ZXJQb3NpdGlvbikuTWFnbml0dWRlCiAgICBlbHNlaWYgUGFydFRvRGlzYW5jZTpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWRSb290UGFydCIpIHRoZW4KICAgICAgICByZXR1cm4gKFBhcnRUb0Rpc2FuY2UuSHVtYW5vaWRSb290UGFydC5Qb3NpdGlvbiAtIFBsYXllclBvc2l0aW9uKS5NYWduaXR1ZGUKICAgIGVsc2UKICAgICAgICBsb2NhbCBtaW5EaXN0YW5jZSA9IG1hdGguaHVnZQogICAgICAgIGZvciBfLCB2IGluIGlwYWlycyhQYXJ0VG9EaXNhbmNlOkdldERlc2NlbmRhbnRzKCkpIGRvCiAgICAgICAgICAgIGlmIHY6SXNBKCJCYXNlUGFydCIpIHRoZW4KICAgICAgICAgICAgICAgIGxvY2FsIGRpc3RhbmNlID0gKHYuUG9zaXRpb24gLSBQbGF5ZXJQb3NpdGlvbikuTWFnbml0dWRlCiAgICAgICAgICAgICAgICBpZiBkaXN0YW5jZSA8IG1pbkRpc3RhbmNlIHRoZW4KICAgICAgICAgICAgICAgICAgICBtaW5EaXN0YW5jZSA9IGRpc3RhbmNlCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICAgICAgcmV0dXJuIG1pbkRpc3RhbmNlCiAgICBlbmQKZW5kCgpmdW5jdGlvbiBTZWxlY3RXZWFwb24odHlwZVNlbGVjdFdlYXBvbikKICAgIGZvciBfLCB2IGluIHBhaXJzKGdhbWUuUGxheWVycy5Mb2NhbFBsYXllci5CYWNrcGFjazpHZXRDaGlsZHJlbigpKSBkbwogICAgICAgIGlmIHY6SXNBKCJUb29sIikgYW5kIHYuVG9vbFRpcCA9PSB0eXBlU2VsZWN0V2VhcG9uIHRoZW4KICAgICAgICAgICAgZ2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLkNoYXJhY3Rlci5IdW1hbm9pZDpFcXVpcFRvb2wodikKICAgICAgICBlbmQKICAgIGVuZAplbmQKCmZ1bmN0aW9uIEVxdWlwKEVxdWlwTmFtZSkKICAgIGdhbWUuUGxheWVycy5Mb2NhbFBsYXllci5DaGFyYWN0ZXIuSHVtYW5vaWQ6RXF1aXBUb29sKGdhbWUuUGxheWVycy5Mb2NhbFBsYXllci5CYWNrcGFja1tFcXVpcE5hbWVdKQplbmQKCmZ1bmN0aW9uIEVudHJhbmNlUmVxdWVzdChFbnRyYW5jZU5hbWUpCiAgICBnYW1lOkdldFNlcnZpY2UoIlJlcGxpY2F0ZWRTdG9yYWdlIikuUmVtb3Rlcy5Db21tRl86SW52b2tlU2VydmVyKCJyZXF1ZXN0RW50cmFuY2UiLCBWZWN0b3IzLm5ldyhFbnRyYW5jZU5hbWUpKQplbmQKCmZ1bmN0aW9uIFR3ZWVuKFRhcmdldENGcmFtZVR3ZWVuKQogICAgaWYgbm90IFRhcmdldENGcmFtZVR3ZWVuIG9yIFRhcmdldENGcmFtZVR3ZWVuID09IGZhbHNlIG9yIFRhcmdldENGcmFtZVR3ZWVuID09ICJmYWxzZSIgdGhlbgogICAgICAgIGlmIGN1cnJlbnRUd2VlbiB0aGVuCiAgICAgICAgICAgIGN1cnJlbnRUd2VlbjpDYW5jZWwoKQogICAgICAgICAgICBjdXJyZW50VHdlZW4gPSBuaWwKICAgICAgICBlbmQKICAgICAgICBpZiB0d2VlbkhlYXJ0YmVhdENvbm5lY3Rpb24gdGhlbgogICAgICAgICAgICB0d2VlbkhlYXJ0YmVhdENvbm5lY3Rpb246RGlzY29ubmVjdCgpCiAgICAgICAgICAgIHR3ZWVuSGVhcnRiZWF0Q29ubmVjdGlvbiA9IG5pbAogICAgICAgIGVuZAogICAgICAgIHJldHVybgogICAgZW5kCgogICAgbG9jYWwgUGxheWVycyA9IGdhbWU6R2V0U2VydmljZSgiUGxheWVycyIpCiAgICBsb2NhbCBSdW5TZXJ2aWNlID0gZ2FtZTpHZXRTZXJ2aWNlKCJSdW5TZXJ2aWNlIikKICAgIGxvY2FsIFR3ZWVuU2VydmljZSA9IGdhbWU6R2V0U2VydmljZSgiVHdlZW5TZXJ2aWNlIikKICAgIGxvY2FsIENoYXJhY3RlciA9IFBsYXllcnMuTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyIG9yIFBsYXllcnMuTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyQWRkZWQ6V2FpdCgpCiAgICBDaGFyYWN0ZXI6V2FpdEZvckNoaWxkKCJIdW1hbm9pZCIpLlNpdCA9IGZhbHNlCgogICAgbG9jYWwgUGFydEMgPSBJbnN0YW5jZS5uZXcoIlBhcnQiKQogICAgUGFydEMuTmFtZSA9ICJQYXJ0QyIKICAgIFBhcnRDLkFuY2hvcmVkID0gdHJ1ZQogICAgUGFydEMuVHJhbnNwYXJlbmN5ID0gMQogICAgUGFydEMuQ0ZyYW1lID0gQ2hhcmFjdGVyOldhaXRGb3JDaGlsZCgiSHVtYW5vaWRSb290UGFydCIpLkNGcmFtZQogICAgUGFydEMuUGFyZW50ID0gd29ya3NwYWNlCgogICAgdHdlZW5IZWFydGJlYXRDb25uZWN0aW9uID0gUnVuU2VydmljZS5IZWFydGJlYXQ6Q29ubmVjdChmdW5jdGlvbigpCiAgICAgICAgaWYgbm90IENoYXJhY3RlciBvciBub3QgQ2hhcmFjdGVyOkZpbmRGaXJzdENoaWxkKCJIdW1hbm9pZFJvb3RQYXJ0IikgdGhlbgogICAgICAgICAgICBpZiB0d2VlbkhlYXJ0YmVhdENvbm5lY3Rpb24gdGhlbgogICAgICAgICAgICAgICAgdHdlZW5IZWFydGJlYXRDb25uZWN0aW9uOkRpc2Nvbm5lY3QoKQogICAgICAgICAgICAgICAgdHdlZW5IZWFydGJlYXRDb25uZWN0aW9uID0gbmlsCiAgICAgICAgICAgIGVuZAogICAgICAgICAgICByZXR1cm4KICAgICAgICBlbmQKICAgICAgICBDaGFyYWN0ZXI6V2FpdEZvckNoaWxkKCJIdW1hbm9pZFJvb3RQYXJ0IikuQ0ZyYW1lID0gUGFydEMuQ0ZyYW1lICogQ0ZyYW1lLm5ldygwLCAyLCAwKQogICAgZW5kKQoKICAgIGxvY2FsIHR3ZWVuSW5mbyA9IFR3ZWVuSW5mby5uZXcoCiAgICAgICAgKFRhcmdldENGcmFtZVR3ZWVuLlBvc2l0aW9uIC0gQ2hhcmFjdGVyOldhaXRGb3JDaGlsZCgiSHVtYW5vaWRSb290UGFydCIpLlBvc2l0aW9uKS5NYWduaXR1ZGUgLyBnZXRnZW52KCkuTG9jYWxDb25maWcuU2V0dGluZ3NbIlR3ZWVuIFNwZWVkIl0sCiAgICAgICAgRW51bS5FYXNpbmdTdHlsZS5MaW5lYXIsCiAgICAgICAgRW51bS5FYXNpbmdEaXJlY3Rpb24uSW5PdXQKICAgICkKICAgIGxvY2FsIHR3ZWVuSW5zdGFuY2UgPSBUd2VlblNlcnZpY2U6Q3JlYXRlKFBhcnRDLCB0d2VlbkluZm8sIHtDRnJhbWUgPSBUYXJnZXRDRnJhbWVUd2Vlbn0pCiAgICB0d2Vlbkluc3RhbmNlOkNhbmNlbCgpIC0tIMSQ4bqjbSBi4bqjbyB0cuG6oW5nIHRow6FpIHR3ZWVuIG3hu5tpCiAgICB0d2Vlbkluc3RhbmNlOlBsYXkoKQogICAgY3VycmVudFR3ZWVuID0gdHdlZW5JbnN0YW5jZQoKICAgIHR3ZWVuSW5zdGFuY2UuQ29tcGxldGVkOldhaXQoKQogICAgUGFydEM6RGVzdHJveSgpCiAgICBpZiB0d2VlbkhlYXJ0YmVhdENvbm5lY3Rpb24gdGhlbgogICAgICAgIHR3ZWVuSGVhcnRiZWF0Q29ubmVjdGlvbjpEaXNjb25uZWN0KCkKICAgICAgICB0d2VlbkhlYXJ0YmVhdENvbm5lY3Rpb24gPSBuaWwKICAgIGVuZAogICAgY3VycmVudFR3ZWVuID0gbmlsCmVuZAoKCmZ1bmN0aW9uIFRlbGVwb3J0KHBsYWNlVG9UZWxlcG9ydCkKICAgIGdhbWUuUGxheWVycy5Mb2NhbFBsYXllci5DaGFyYWN0ZXIuSHVtYW5vaWRSb290UGFydC5DRnJhbWUgPSBwbGFjZVRvVGVsZXBvcnQKZW5kCgpmdW5jdGlvbiBCeXBhc3NUZWxlcG9ydChDRnJhbWVCeXBhc3NUZWxlcG9ydCkKICAgIGdhbWUuUGxheWVycy5Mb2NhbFBsYXllci5DaGFyYWN0ZXIuSHVtYW5vaWQuSGVhbHRoID0gMAogICAgdGFzay53YWl0KCkKICAgIFRlbGVwb3J0KENGcmFtZUJ5cGFzc1RlbGVwb3J0KQplbmQKCmZ1bmN0aW9uIEhvdEtleUV2ZW50KEhvdEtleSwgSG9sZFRpbWUpIC0tSG90S2V5RXZlbnQoIlEiLCAwLjIpCiAgICBnYW1lOkdldFNlcnZpY2UoIlZpcnR1YWxJbnB1dE1hbmFnZXIiKTpTZW5kS2V5RXZlbnQodHJ1ZSwgSG90S2V5LCBmYWxzZSwgZ2FtZSkKICAgIHRhc2sud2FpdChIb2xkVGltZSkKICAgIGdhbWU6R2V0U2VydmljZSgiVmlydHVhbElucHV0TWFuYWdlciIpOlNlbmRLZXlFdmVudChmYWxzZSwgSG90S2V5LCBmYWxzZSwgZ2FtZSkKZW5kCgpmdW5jdGlvbiBGYXN0QXR0YWNrKEVuYWJsZUZhc3RBdHRhY2ssIEZhc3RBdHRhY2tEZWxheSkKICAgIGlmIEVuYWJsZUZhc3RBdHRhY2sgdGhlbgogICAgICAgIGxvY2FsIEF0dGFja0xpc3RzID0ge30KICAgICAgICBsb2NhbCBDaGFyYWN0ZXJBbmRFbmVtaWVzID0ge3dvcmtzcGFjZS5DaGFyYWN0ZXJzLCB3b3Jrc3BhY2UuRW5lbWllc30KICAgICAgICBmb3IgXywgR3JvdXAgaW4gcGFpcnMoQ2hhcmFjdGVyQW5kRW5lbWllcykgZG8KICAgICAgICAgICAgZm9yIF8sIHYgaW4gcGFpcnMoR3JvdXA6R2V0Q2hpbGRyZW4oKSkgZG8KICAgICAgICAgICAgICAgIGlmIHY6RmluZEZpcnN0Q2hpbGQoIkh1bWFub2lkUm9vdFBhcnQiKSBhbmQgdjpGaW5kRmlyc3RDaGlsZCgiSGVhZCIpIHRoZW4KICAgICAgICAgICAgICAgICAgICBpZiAodi5IdW1hbm9pZFJvb3RQYXJ0LlBvc2l0aW9uIC0gZ2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLkNoYXJhY3Rlci5IdW1hbm9pZFJvb3RQYXJ0LlBvc2l0aW9uKS5NYWduaXR1ZGUgPD0gNTAgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICB0YWJsZS5pbnNlcnQoQXR0YWNrTGlzdHMsIHY6RmluZEZpcnN0Q2hpbGQoIkhlYWQiKSkKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKICAgICAgICBmb3IgXywgdiBpbiBwYWlycyhBdHRhY2tMaXN0cykgZG8KICAgICAgICAgICAgZ2FtZTpHZXRTZXJ2aWNlKCJSZXBsaWNhdGVkU3RvcmFnZSIpLk1vZHVsZXMuTmV0OkZpbmRGaXJzdENoaWxkKCJSRS9SZWdpc3RlckF0dGFjayIpOkZpcmVTZXJ2ZXIoMCkKICAgICAgICAgICAgZ2FtZTpHZXRTZXJ2aWNlKCJSZXBsaWNhdGVkU3RvcmFnZSIpLk1vZHVsZXMuTmV0OkZpbmRGaXJzdENoaWxkKCJSRS9SZWdpc3RlckhpdCIpOkZpcmVTZXJ2ZXIodikKICAgICAgICBlbmQKICAgIGVuZAplbmQKCmZ1bmN0aW9uIEhvcFNlcnZlcihQbGF5ZXJJbikKICAgIGxvY2FsIE1heFBsYXllcnNIb3AgPSBnZXRnZW52KCkuTG9jYWxDb25maWcuU2V0dGluZ3NbIk1heCBQbGF5ZXJzIEhvcCJdCiAgICBsb2NhbCBzdWNjZXNzLCBlcnJvciA9IHBjYWxsKGZ1bmN0aW9uKCkKICAgICAgICBmb3IgXywgdiBpbiBpcGFpcnMoZ2FtZTpHZXRTZXJ2aWNlKCJIdHRwU2VydmljZSIpOkpTT05EZWNvZGUoZ2FtZTpIdHRwR2V0KCJodHRwczovL2dhbWVzLnJvYmxveC5jb20vdjEvZ2FtZXMvIiAuLiBnYW1lLlBsYWNlSWQgLi4gIi9zZXJ2ZXJzL1B1YmxpYz9zb3J0T3JkZXI9QXNjJmxpbWl0PTEwMCIpKS5kYXRhKSBkbwogICAgICAgICAgICBpZiB2LnBsYXlpbmcgPCB2Lm1heFBsYXllcnMgYW5kIHYucGxheWluZyA8PSBNYXhQbGF5ZXJzSG9wIHRoZW4KICAgICAgICAgICAgICAgIGdhbWU6R2V0U2VydmljZSgiVGVsZXBvcnRTZXJ2aWNlIik6VGVsZXBvcnRUb1BsYWNlSW5zdGFuY2UoZ2FtZS5QbGFjZUlkLCB2LmlkLCBnYW1lLlBsYXllcnMuTG9jYWxQbGF5ZXIpCiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgIEZsdWVudDpOb3RpZnkoe1RpdGxlID0gIk5vdGlmaWNhdGlvbiIsIENvbnRlbnQgPSAiRG9lc24ndCBoYXZlIGFueSBzZXJ2ZXIiLCBTdWJDb250ZW50ID0gIk1heCBwbGF5ZXJzIHRoYXQgeW91IHNlbGVjdGVkOiAiIC4uIFBsYXllckluLCBEdXJhdGlvbiA9IDN9KQogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKICAgIGVuZCkKCiAgICBpZiBub3Qgc3VjY2VzcyB0aGVuCiAgICAgICAgZ2FtZTpHZXRTZXJ2aWNlKCJTdGFydGVyR3VpIik6U2V0Q29yZSgiU2VuZE5vdGlmaWNhdGlvbiIsIHtUaXRsZSA9ICJUZWxlcG9ydCBFcnJvciIsIFRleHQgPSAiQW4gZXJyb3Igb2NjdXJyZWQgd2hpbGUgdGVsZXBvcnRpbmcifSkKICAgICAgICB0YXNrLndhaXQoMSkKICAgICAgICBnYW1lOkdldFNlcnZpY2UoIlRlbGVwb3J0U2VydmljZSIpOlRlbGVwb3J0KGdhbWUuUGxhY2VJZCkKICAgIGVuZAplbmQKCi0tQmxhY2sgTGVnLCBFbGVjdHJpYywgRmlzaG1hbiBLYXJhdGUsIFN1cGVyaHVtYW4sIERlYXRoIFN0ZXAsIFNoYXJrbWFuIEthcmF0ZSwgRWxlY3RyaWMgQ2xhdywgRHJhZ29uIFRhbG9uLCBHb2QgSHVtYW4KLS1LYXRhbmEgU3dvcmQsIEN1dGxhc3MgU3dvcmQsIElyb24gTWFjZSBTd29yZCwgRHVhbCBLYXRhbmEgU3dvcmQsIFRyaXBsZSBLYXRhbmEgU3dvcmQsIFBpcGUgU3dvcmQsIEJpc2VudG8gU3dvcmQsIER1YWwtSGVhZGVkIEJsYWRlIFN3b3JkLCBTb3VsIENhbmUgU3dvcmQKLS1TbGluZ3Nob3QsIE11c2tldCwgRmxpbnRsb2NrLCBSZWZpbmVkIFNsaW5nc2hvdCwgUmVmaW5lZCBGbGludGxvY2ssIEthYnVjaGEKLS1CbGFjayBDYXBlLCBTd29yZHNtYW4gSGF0LCBUb21vZSBSaW5nCi0tQnVzbyBIYWtpLCBHZXBwbywgU29ydSwgSGFraSBLZW4sIFN0YXRzIFJlZnVuZCwgUmVyb2xsIFJhY2UKZnVuY3Rpb24gU2hvcChUeXBlU2hvcCkKICAgIC0tRmlnaHQgc3R5bGVzIFYxCiAgICBpZiBUeXBlU2hvcCA9PSAiQmxhY2sgTGVnIiB0aGVuIEludm9rZVNlcnZlckNhbGwoIkJ1eUJsYWNrTGVnIikKICAgIGVsc2VpZiBUeXBlU2hvcCA9PSAiRWxlY3RyaWMiIHRoZW4gSW52b2tlU2VydmVyQ2FsbCgiQnV5RWxlY3RybyIpCiAgICBlbHNlaWYgVHlwZVNob3AgPT0gIkZpc2htYW4gS2FyYXRlIiB0aGVuIEludm9rZVNlcnZlckNhbGwoIkJ1eUZpc2htYW5LYXJhdGUiKQogICAgZWxzZWlmIFR5cGVTaG9wID09ICJEcmFnb24gQ2xhdyIgdGhlbiBJbnZva2VTZXJ2ZXJDYWxsKCJCbGFja2JlYXJkUmV3YXJkIiwgIkRyYWdvbkNsYXciLCAiMSIpOyBJbnZva2VTZXJ2ZXJDYWxsKCJCbGFja2JlYXJkUmV3YXJkIiwgIkRyYWdvbkNsYXciLCAiMiIpCiAgICBlbHNlaWYgVHlwZVNob3AgPT0gIlN1cGVyaHVtYW4iIHRoZW4gSW52b2tlU2VydmVyQ2FsbCgiQnV5U3VwZXJodW1hbiIpCiAgICAtLUZpZ2h0IHN0eWxlcyBWMgogICAgZWxzZWlmIFR5cGVTaG9wID09ICJEZWF0aCBTdGVwIiB0aGVuIEludm9rZVNlcnZlckNhbGwoIkJ1eURlYXRoU3RlcCIpCiAgICBlbHNlaWYgVHlwZVNob3AgPT0gIlNoYXJrbWFuIEthcmF0ZSIgdGhlbiBJbnZva2VTZXJ2ZXJDYWxsKCJCdXlTaGFya21hbkthcmF0ZSIsIHRydWUpOyBJbnZva2VTZXJ2ZXJDYWxsKCJCdXlTaGFya21hbkthcmF0ZSIpCiAgICBlbHNlaWYgVHlwZVNob3AgPT0gIkVsZWN0cmljIENsYXciIHRoZW4gSW52b2tlU2VydmVyQ2FsbCgiQnV5RWxlY3RyaWNDbGF3IikKICAgIGVsc2VpZiBUeXBlU2hvcCA9PSAiRHJhZ29uIFRhbG9uIiB0aGVuIEludm9rZVNlcnZlckNhbGwoIkJ1eURyYWdvblRhbG9uIikKICAgIGVsc2VpZiBUeXBlU2hvcCA9PSAiR29kIEh1bWFuIiB0aGVuIEludm9rZVNlcnZlckNhbGwoIkJ1eUdvZGh1bWFuIikKICAgIGVsc2VpZiBUeXBlU2hvcCA9PSAiU2FuZ3VpbmUgQXJ0IiB0aGVuIEludm9rZVNlcnZlckNhbGwoIkJ1eVNhbmd1aW5lQXJ0IikKICAgIC0tU3dvcmQKICAgIGVsc2VpZiBUeXBlU2hvcCA9PSAiS2F0YW5hIFN3b3JkIiB0aGVuIEludm9rZVNlcnZlckNhbGwoIkJ1eUl0ZW0iLCAiS2F0YW5hIikKICAgIGVsc2VpZiBUeXBlU2hvcCA9PSAiQ3V0bGFzcyBTd29yZCIgdGhlbiBJbnZva2VTZXJ2ZXJDYWxsKCJCdXlJdGVtIiwgIkN1dGxhc3MiKQogICAgZWxzZWlmIFR5cGVTaG9wID09ICJJcm9uIE1hY2UgU3dvcmQiIHRoZW4gSW52b2tlU2VydmVyQ2FsbCgiQnV5SXRlbSIsICJJcm9uIE1hY2UiKQogICAgZWxzZWlmIFR5cGVTaG9wID09ICJEdWFsIEthdGFuYSBTd29yZCIgdGhlbiBJbnZva2VTZXJ2ZXJDYWxsKCJCdXlJdGVtIiwgIkR1ZWwgS2F0YW5hIikKICAgIGVsc2VpZiBUeXBlU2hvcCA9PSAiVHJpcGxlIEthdGFuYSBTd29yZCIgdGhlbiBJbnZva2VTZXJ2ZXJDYWxsKCJCdXlJdGVtIiwgIlRyaXBsZSBLYXRhbmEiKQogICAgZWxzZWlmIFR5cGVTaG9wID09ICJQaXBlIFN3b3JkIiB0aGVuIEludm9rZVNlcnZlckNhbGwoIkJ1eUl0ZW0iLCAiUGlwZSIpCiAgICBlbHNlaWYgVHlwZVNob3AgPT0gIkJpc2VudG8gU3dvcmQiIHRoZW4gSW52b2tlU2VydmVyQ2FsbCgiQnV5SXRlbSIsICJCaXNlbnRvIikKICAgIGVsc2VpZiBUeXBlU2hvcCA9PSAiRHVhbC1IZWFkZWQgQmxhZGUgU3dvcmQiIHRoZW4gSW52b2tlU2VydmVyQ2FsbCgiQnV5SXRlbSIsICJEdWFsLUhlYWRlZCBCbGFkZSIpCiAgICBlbHNlaWYgVHlwZVNob3AgPT0gIlNvdWwgQ2FuZSBTd29yZCIgdGhlbiBJbnZva2VTZXJ2ZXJDYWxsKCJCdXlJdGVtIiwgIlNvdWwgQ2FuZSIpCiAgICBlbHNlaWYgVHlwZVNob3AgPT0gIlBvbGUgdjIiIHRoZW4gSW52b2tlU2VydmVyQ2FsbCgiVGh1bmRlckdvZFRhbGsiKQogICAgZWxzZWlmIFR5cGVTaG9wID09ICJMZWdlbmRhcnkgU3dvcmQiIHRoZW4gSW52b2tlU2VydmVyQ2FsbCgiTGVnZW5kYXJ5U3dvcmxkRGVhbGVyIiwgIjEiKTsgSW52b2tlU2VydmVyQ2FsbCgiTGVnZW5kYXJ5U3dvcmxkRGVhbGVyIiwgIjIiKQogICAgLS1HdW4KICAgIGVsc2VpZiBUeXBlU2hvcCA9PSAiU2xpbmdzaG90IiB0aGVuIEludm9rZVNlcnZlckNhbGwoIkJ1eUl0ZW0iLCAiU2xpbmdzaG90IikKICAgIGVsc2VpZiBUeXBlU2hvcCA9PSAiTXVza2V0IiB0aGVuIEludm9rZVNlcnZlckNhbGwoIkJ1eUl0ZW0iLCAiTXVza2V0IikKICAgIGVsc2VpZiBUeXBlU2hvcCA9PSAiRmxpbnRsb2NrIiB0aGVuIEludm9rZVNlcnZlckNhbGwoIkJ1eUl0ZW0iLCAiRmxpbnRsb2NrIikKICAgIGVsc2VpZiBUeXBlU2hvcCA9PSAiUmVmaW5lZCBTbGluZ3Nob3QiIHRoZW4gSW52b2tlU2VydmVyQ2FsbCgiQnV5SXRlbSIsICJSZWZpbmVkIFNsaW5nc2hvdCIpCiAgICBlbHNlaWYgVHlwZVNob3AgPT0gIlJlZmluZWQgRmxpbnRsb2NrIiB0aGVuIEludm9rZVNlcnZlckNhbGwoIkJ1eUl0ZW0iLCAiUmVmaW5lZCBGbGludGxvY2siKQogICAgZWxzZWlmIFR5cGVTaG9wID09ICJLYWJ1Y2hhIiB0aGVuIEludm9rZVNlcnZlckNhbGwoIkJsYWNrYmVhcmRSZXdhcmQiLCAiU2xpbmdzaG90IiwgIjIiKQogICAgLS1BY2Nlc3NvcmllcwogICAgZWxzZWlmIFR5cGVTaG9wID09ICJCbGFjayBDYXBlIiB0aGVuIEludm9rZVNlcnZlckNhbGwoIkJ1eUl0ZW0iLCAiQmxhY2sgQ2FwZSIpCiAgICBlbHNlaWYgVHlwZVNob3AgPT0gIlN3b3Jkc21hbiBIYXQiIHRoZW4gSW52b2tlU2VydmVyQ2FsbCgiQnV5SXRlbSIsICJTd29yZHNtYW4gSGF0IikKICAgIGVsc2VpZiBUeXBlU2hvcCA9PSAiVG9tb2UgUmluZyIgdGhlbiBJbnZva2VTZXJ2ZXJDYWxsKCJCdXlJdGVtIiwgIlRvbW9lIFJpbmciKQogICAgLS1PdGhlcgogICAgZWxzZWlmIFR5cGVTaG9wID09ICJCdXNvIEhha2kiIHRoZW4gSW52b2tlU2VydmVyQ2FsbCgiQnV5SGFraSIsICJCdXNvIikKICAgIGVsc2VpZiBUeXBlU2hvcCA9PSAiR2VwcG8iIHRoZW4gSW52b2tlU2VydmVyQ2FsbCgiQnV5SGFraSIsICJHZXBwbyIpCiAgICBlbHNlaWYgVHlwZVNob3AgPT0gIlNvcnUiIHRoZW4gSW52b2tlU2VydmVyQ2FsbCgiQnV5SGFraSIsICJTb3J1IikKICAgIGVsc2VpZiBUeXBlU2hvcCA9PSAiSGFraSBLZW4iIHRoZW4gSW52b2tlU2VydmVyQ2FsbCgiS2VuVGFsayIsICJCdXkiKQogICAgZWxzZWlmIFR5cGVTaG9wID09ICJTdGF0cyBSZWZ1bmQiIHRoZW4gSW52b2tlU2VydmVyQ2FsbCgiQmxhY2tiZWFyZFJld2FyZCIsICJSZWZ1bmQiLCAiMSIpOyBJbnZva2VTZXJ2ZXJDYWxsKCJCbGFja2JlYXJkUmV3YXJkIiwgIlJlZnVuZCIsICIyIikKICAgIGVsc2VpZiBUeXBlU2hvcCA9PSAiUmVyb2xsIFJhY2UiIHRoZW4gSW52b2tlU2VydmVyQ2FsbCgiQmxhY2tiZWFyZFJld2FyZCIsICJSZXJvbGwiLCAiMSIpOyBJbnZva2VTZXJ2ZXJDYWxsKCJCbGFja2JlYXJkUmV3YXJkIiwgIlJlcm9sbCIsICIyIikKICAgIGVsc2VpZiBUeXBlU2hvcCA9PSAiUmFjZSBHaG91bCIgdGhlbiBJbnZva2VTZXJ2ZXJDYWxsKCJFY3RvcGxhc20iLCAiQnV5Q2hlY2siLCA0KTsgSW52b2tlU2VydmVyQ2FsbCgiRWN0b3BsYXNtIiwgIkNoYW5nZSIsIDQpCiAgICBlbHNlaWYgVHlwZVNob3AgPT0gIlJhY2UgQ3lib3JnIiB0aGVuIEludm9rZVNlcnZlckNhbGwoIkN5Ym9yZ1RyYWluZXIiLCAiQnV5IikKICAgIGVsc2VpZiBUeXBlU2hvcCA9PSAiQWxsIEZpZ2h0IFN0eWxlIiB0aGVuIFNob3AoIkJsYWNrIExlZyIpOyBTaG9wKCJFbGVjdHJpYyIpOyBTaG9wKCJGaXNobWFuIEthcmF0ZSIpOyBTaG9wKCJEcmFnb24gQ2xhdyIpOyBTaG9wKCJTdXBlcmh1bWFuIik7IFNob3AoIkRlYXRoIFN0ZXAiKTsgU2hvcCgiU2hhcmttYW4gS2FyYXRlIik7IFNob3AoIkVsZWN0cmljIENsYXciKTsgU2hvcCgiRHJhZ29uIFRhbG9uIik7IFNob3AoIkdvZCBIdW1hbiIpOyBTaG9wKCJTYW5ndWluZSBBcnQiKQogICAgZWxzZWlmIFR5cGVTaG9wID09ICJBbGwgU3dvcmQiIHRoZW4gU2hvcCgiS2F0YW5hIFN3b3JkIik7IFNob3AoIkN1dGxhc3MgU3dvcmQiKTsgU2hvcCgiSXJvbiBNYWNlIFN3b3JkIik7IFNob3AoIkR1YWwgS2F0YW5hIFN3b3JkIik7IFNob3AoIlRyaXBsZSBLYXRhbmEgU3dvcmQiKTsgU2hvcCgiUGlwZSBTd29yZCIpOyBTaG9wKCJCaXNlbnRvIFN3b3JkIik7IFNob3AoIkJpc2VudG8gU3dvcmQiKTsgU2hvcCgiRHVhbC1IZWFkZWQgQmxhZGUgU3dvcmQiKTsgU2hvcCgiU291bCBDYW5lIFN3b3JkIikKICAgIGVsc2VpZiBUeXBlU2hvcCA9PSAiQWxsIE90aGVyIiB0aGVuIFNob3AoIkJ1c28gSGFraSIpOyBTaG9wKCJHZXBwbyIpOyBTaG9wKCJTb3J1Iik7IFNob3AoIkhha2kgS2VuIikKICAgIGVuZAplbmQKCmZ1bmN0aW9uIEJyaW5nTW9kKEVuYWJsZUJyaW5nTW9kLCBEaXN0YW5jZVRvQnJpbmcpCiAgICBpZiBFbmFibGVCcmluZ01vZCB0aGVuCiAgICAgICAgd2hpbGUgdGFzay53YWl0KCkgZG8KICAgICAgICAgICAgZm9yIF8sIHYgaW4gcGFpcnMoZ2FtZS5Xb3Jrc3BhY2UuRW5lbWllczpHZXRDaGlsZHJlbigpKSBkbwogICAgICAgICAgICAgICAgaWYgKGdhbWUuUGxheWVycy5Mb2NhbFBsYXllci5DaGFyYWN0ZXIuSHVtYW5vaWRSb290UGFydC5Qb3NpdGlvbiAtIHYuSHVtYW5vaWRSb290UGFydC5Qb3NpdGlvbikuTWFnbml0dWRlIDw9IERpc3RhbmNlVG9CcmluZyB0aGVuCiAgICAgICAgICAgICAgICAgICAgdi5IdW1hbm9pZFJvb3RQYXJ0LkNGcmFtZSA9IHYuSHVtYW5vaWRSb290UGFydC5DRnJhbWUKICAgICAgICAgICAgICAgICAgICB2Lkh1bWFub2lkUm9vdFBhcnQuU2l6ZSA9IFZlY3RvcjMubmV3KG1hdGguaHVnZSwgbWF0aC5odWdlLCBtYXRoLmh1Z2UpCiAgICAgICAgICAgICAgICAgICAgdi5IdW1hbm9pZFJvb3RQYXJ0LkNhbkNvbGxpZGUgPSBmYWxzZQogICAgICAgICAgICAgICAgICAgIHYuSGVhZC5DYW5Db2xsaWRlID0gZmFsc2UKICAgICAgICAgICAgICAgICAgICBpZiB2Lkh1bWFub2lkOkZpbmRGaXJzdENoaWxkKCJBbmltYXRvciIpIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgdi5IdW1hbm9pZC5BbmltYXRvcjpEZXN0cm95KCkKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICBpZiBzZXRzY3JpcHRhYmxlIGFuZCB0eXBlb2Yoc2V0c2NyaXB0YWJsZSkgPT0gImZ1bmN0aW9uIiB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIHNldHNjcmlwdGFibGUoZ2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLCAiU2ltdWxhdGlvblJhZGl1cyIsIHRydWUpCiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgaWYgc2V0aGlkZGVucHJvcGVydHkgYW5kIHR5cGVvZihzZXRoaWRkZW5wcm9wZXJ0eSkgPT0gImZ1bmN0aW9uIiB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIHNldGhpZGRlbnByb3BlcnR5KGdhbWUuUGxheWVycy5Mb2NhbFBsYXllciwgIlNpbXVsYXRpb25SYWRpdXMiLCBtYXRoLmh1Z2UpCiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICBlbmQKZW5kCgpmdW5jdGlvbiBUYXJnZXRGYXJtKFRhcmdldFRvRmFybSkKICAgIGZvciBfLCB2IGluIHBhaXJzKGdhbWU6R2V0U2VydmljZSgiV29ya3NwYWNlIikuRW5lbWllczpHZXRDaGlsZHJlbigpKSBkbwogICAgICAgIGlmIHYuTmFtZSA9PSBUYXJnZXRUb0Zhcm0gYW5kIHYuSHVtYW5vaWQuSGVhbHRoID4gMCB0aGVuCiAgICAgICAgICAgIHJlcGVhdCB0YXNrLndhaXQoKQogICAgICAgICAgICAgICAgLS0gcHJpbnQodi5OYW1lKQogICAgICAgICAgICB1bnRpbCBub3QgdiBvciBub3Qgdi5QYXJlbnQgb3Igdi5IdW1hbm9pZC5IZWFsdGggPT0gMCBvciBnYW1lLlBsYXllcnMuTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyLkh1bWFub2lkLkhlYWx0aCA9PSAwIG9yIG5vdCBnYW1lLlBsYXllcnMuTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyOkZpbmRGaXJzdENoaWxkKCJIdW1hbm9pZFJvb3RQYXJ0IikKICAgICAgICBlbHNlCiAgICAgICAgICAgIC0tVHdlZW4oKQogICAgICAgIGVuZAogICAgZW5kCmVuZAoKLS1bWwogICAg4paI4paI4pWXICAg4paI4paI4pWX4paI4paI4pWXICAgIOKWiOKWiOKWiOKWiOKWiOKWiOKWiOKVlyDilojilojilojilojilojilojilZfilojilojilojilojilojilojilZcg4paI4paI4pWX4paI4paI4paI4paI4paI4paI4pWXIOKWiOKWiOKWiOKWiOKWiOKWiOKWiOKWiOKVlwogICAg4paI4paI4pWRICAg4paI4paI4pWR4paI4paI4pWRICAgIOKWiOKWiOKVlOKVkOKVkOKVkOKVkOKVneKWiOKWiOKVlOKVkOKVkOKVkOKVkOKVneKWiOKWiOKVlOKVkOKVkOKWiOKWiOKVl+KWiOKWiOKVkeKWiOKWiOKVlOKVkOKVkOKWiOKWiOKVl+KVmuKVkOKVkOKWiOKWiOKVlOKVkOKVkOKVnQogICAg4paI4paI4pWRICAg4paI4paI4pWR4paI4paI4pWRICAgIOKWiOKWiOKWiOKWiOKWiOKWiOKWiOKVl+KWiOKWiOKVkSAgICAg4paI4paI4paI4paI4paI4paI4pWU4pWd4paI4paI4pWR4paI4paI4paI4paI4paI4paI4pWU4pWdICAg4paI4paI4pWRCiAgICDilojilojilZEgICDilojilojilZHilojilojilZEgICAg4pWa4pWQ4pWQ4pWQ4pWQ4paI4paI4pWR4paI4paI4pWRICAgICDilojilojilZTilZDilZDilojilojilZfilojilojilZHilojilojilZTilZDilZDilZDilZ0gICAg4paI4paI4pWRCiAgICDilZrilojilojilojilojilojilojilZTilZ3ilojilojilZEgICAg4paI4paI4paI4paI4paI4paI4paI4pWR4pWa4paI4paI4paI4paI4paI4paI4pWX4paI4paI4pWRICDilojilojilZHilojilojilZHilojilojilZEgICAgICAgIOKWiOKWiOKVkQogICAgIOKVmuKVkOKVkOKVkOKVkOKVkOKVnSDilZrilZDilZ0gICAg4pWa4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWdIOKVmuKVkOKVkOKVkOKVkOKVkOKVneKVmuKVkOKVnSAg4pWa4pWQ4pWd4pWa4pWQ4pWd4pWa4pWQ4pWdICAgICAgICDilZrilZDilZ0KXV0KbG9jYWwgRmx1ZW50ID0gbG9hZHN0cmluZyhnYW1lOkh0dHBHZXQoImh0dHBzOi8vZ2l0aHViLmNvbS9kYXdpZC1zY3JpcHRzL0ZsdWVudC9yZWxlYXNlcy9sYXRlc3QvZG93bmxvYWQvbWFpbi5sdWEiKSkoKQotLSBsb2NhbCBGbHVlbnQgPSBsb2Fkc3RyaW5nKGdhbWU6SHR0cEdldEFzeW5jKCJodHRwczovL2dpdGh1Yi5jb20vQWN0dWFsTWFzdGVyT29nd2F5L0ZsdWVudC1SZW5ld2VkL3JlbGVhc2VzL2xhdGVzdC9kb3dubG9hZC9GbHVlbnQubHVhdSIsIHRydWUpKSgpCi0tIGxvY2FsIEZsdWVudCA9IGxvYWRzdHJpbmcoZ2FtZTpIdHRwR2V0KCJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vdmluaHVjaGkvcmJseC9tYWluL0ZpeGVkRmx1ZW50Lmx1YSIpKSgpCi0tIGxvY2FsIEZsdWVudCA9IGxvYWRzdHJpbmcoZ2FtZTpIdHRwR2V0KCJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20veFF1YXJ0eXgvVUlMaWJyYXJ5L3JlZnMvaGVhZHMvbWFpbi9GbHVlbnQiKSkoKQpsb2NhbCBXaW5kb3cgPSBGbHVlbnQ6Q3JlYXRlV2luZG93KHsKICAgIFRpdGxlID0gIldBSEggSHViIHwgdjAuMC4xIiwgU3ViVGl0bGUgPSAiYnkgVGFubnkgJiBIdXl5aGVyZSIsCiAgICBUYWJXaWR0aCA9IDE0NCwgU2l6ZSA9IFVEaW0yLmZyb21PZmZzZXQoODAwLCA0NTApLAogICAgVGhlbWUgPSBnZXRnZW52KCkuTG9jYWxDb25maWcuU2V0dGluZ3NbIlRoZW1lIl0sIE1pbmltaXplckljb24gPSAicmJ4YXNzZXRpZDovLzEyMDk5MzgxMDMwMTM1NSIsCiAgICBNaW5pbWl6ZUtleSA9IEVudW0uS2V5Q29kZS5SaWdodENvbnRyb2wKfSkKCmxvY2FsIFRhYnMgPSB7CiAgICBNYWluID0gV2luZG93OkFkZFRhYih7VGl0bGUgPSAiTWFpbiIsIEljb24gPSAiaG9tZSJ9KTsKICAgIE90aGVyRmFybSA9IFdpbmRvdzpBZGRUYWIoe1RpdGxlID0gIk90aGVyIEZhcm0iLCBJY29uID0gImxlYWYifSk7CiAgICBHZXRJdGVtID0gV2luZG93OkFkZFRhYih7VGl0bGUgPSAiR2V0IEl0ZW0iLCBJY29uID0gInBhY2thZ2UifSk7CiAgICBTdGF0dXMgPSBXaW5kb3c6QWRkVGFiKHtUaXRsZSA9ICJTdGF0dXMiLCBJY29uID0gImxpbmUtY2hhcnQifSk7CiAgICBQVlAgPSBXaW5kb3c6QWRkVGFiKHtUaXRsZSA9ICJQVlAiLCBJY29uID0gInN3b3JkcyJ9KTsKICAgIFNlYUV2ZW50ID0gV2luZG93OkFkZFRhYih7VGl0bGUgPSAiU2VhIEV2ZW50IiwgSWNvbiA9ICJhbmNob3IifSk7CiAgICBUcmlhbFY0ID0gV2luZG93OkFkZFRhYih7VGl0bGUgPSAiVHJpYWwgVjQiLCBJY29uID0gImR1bWJiZWxsIn0pOyAtLSBvciBmbGFtZQogICAgVHJhdmVsID0gV2luZG93OkFkZFRhYih7VGl0bGUgPSAiVHJhdmVsIiwgSWNvbiA9ICJtYXAifSk7CiAgICBTaG9wID0gV2luZG93OkFkZFRhYih7VGl0bGUgPSAiU2hvcCIsIEljb24gPSAic2hvcHBpbmctYmFnIn0pOwogICAgRnJ1aXRzQW5kUmFpZCA9IFdpbmRvdzpBZGRUYWIoe1RpdGxlID0gIkZydWl0cyAmIFJhaWQiLCBJY29uID0gImNoZXJyeSJ9KTsKICAgIE1JQ1MgPSBXaW5kb3c6QWRkVGFiKHtUaXRsZSA9ICJNSUNTIiwgSWNvbiA9ICJzbGlkZXJzIn0pOwogICAgU2V0dGluZ3NTY3JpcHQgPSBXaW5kb3c6QWRkVGFiKHtUaXRsZSA9ICJTZXR0aW5ncyBTY3JpcHQiLCBJY29uID0gImNvZGUifSk7CiAgICBTZXR0aW5ncyA9IFdpbmRvdzpBZGRUYWIoe1RpdGxlID0gIlNldHRpbmdzIiwgSWNvbiA9ICJzZXR0aW5ncyJ9KTsKfTsKV2luZG93OlNlbGVjdFRhYigxKQpXaW5kb3c6TWluaW1pemUoLS1bW3RydWVdXSkKCi0tIE1BSU4KVGFicy5NYWluOkFkZFRvZ2dsZSgiQXV0b0Zhcm0iLCB7CiAgICBUaXRsZSA9ICJBdXRvIEZhcm0iLAogICAgRGVmYXVsdCA9IGdldGdlbnYoKS5Mb2NhbENvbmZpZy5GYXJtLkxldmVsLAogICAgQ2FsbGJhY2sgPSBmdW5jdGlvbihBdXRvRmFybUJvb2xlYW4pCiAgICAgICAgZ2V0Z2VudigpLkxvY2FsQ29uZmlnLkZhcm0uTGV2ZWwgPSBBdXRvRmFybUJvb2xlYW4KICAgICAgICBzYXZlU2V0dGluZ3MoKQogICAgZW5kCn0pCgppZiBub3QgZ2FtZTpHZXRTZXJ2aWNlKCJSZXBsaWNhdGVkU3RvcmFnZSIpLlJlbW90ZXMuQ29tbUZfOkludm9rZVNlcnZlcigiRHJlc3Nyb3NhUXVlc3RQcm9ncmVzcyIpLktpbGxlZEljZUJvc3MgdGhlbgogICAgVGFicy5NYWluOkFkZFRvZ2dsZSgiQXV0b1dvcmxkMiIsIHsKICAgICAgICBUaXRsZSA9ICJBdXRvIFdvcmxkIDIiLAogICAgICAgIERlZmF1bHQgPSBnZXRnZW52KCkuTG9jYWxDb25maWcuRmFybVsiV29ybGQiXVsiV29ybGQgMiJdLAogICAgICAgIENhbGxiYWNrID0gZnVuY3Rpb24oQXV0b1dvcmxkMkJvb2xlYW4pCiAgICAgICAgICAgIGdldGdlbnYoKS5Mb2NhbENvbmZpZy5GYXJtWyJXb3JsZCJdWyJXb3JsZCAyIl0gPSBBdXRvV29ybGQyQm9vbGVhbgogICAgICAgICAgICBzYXZlU2V0dGluZ3MoKQogICAgICAgIGVuZAogICAgfSkKZW5kCgppZiBnYW1lOkdldFNlcnZpY2UoIlJlcGxpY2F0ZWRTdG9yYWdlIikuUmVtb3Rlcy5Db21tRl86SW52b2tlU2VydmVyKCJaUXVlc3RQcm9ncmVzcyIsIkNoZWNrIikgPT0gMCB0aGVuCiAgICBUYWJzLk1haW46QWRkVG9nZ2xlKCJBdXRvV29ybGQzIiwgewogICAgICAgIFRpdGxlID0gIkF1dG8gV29ybGQgMyIsCiAgICAgICAgRGVmYXVsdCA9IGdldGdlbnYoKS5Mb2NhbENvbmZpZy5GYXJtWyJXb3JsZCJdWyJXb3JsZCAzIl0sCiAgICAgICAgQ2FsbGJhY2sgPSBmdW5jdGlvbihBdXRvV29ybGQzQm9vbGVhbikKICAgICAgICAgICAgZ2V0Z2VudigpLkxvY2FsQ29uZmlnLkZhcm1bIldvcmxkIl1bIldvcmxkIDMiXSA9IEF1dG9Xb3JsZDNCb29sZWFuCiAgICAgICAgICAgIHNhdmVTZXR0aW5ncygpCiAgICAgICAgZW5kCiAgICB9KQplbmQKClRhYnMuTWFpbjpBZGREcm9wZG93bigiU2VsZWN0TW9uc3RlciIsIHsKICAgIFRpdGxlID0gIlNlbGVjdCBNb25zdGVyIiwKICAgIFZhbHVlcyA9IFRhYmxlTW9uc3RlciwKICAgIE11bHRpID0gZmFsc2UsCiAgICBEZWZhdWx0ID0gZ2V0Z2VudigpLkxvY2FsQ29uZmlnLkZhcm1bIk1vbnN0ZXIgRmFybSJdWyJTZWxlY3QgTW9uc3RlciBGYXJtIl0gb3IgbmlsLAogICAgQ2FsbGJhY2sgPSBmdW5jdGlvbihTZWxlY3RNb25zdGVyVmFsdWUpCiAgICAgICAgZ2V0Z2VudigpLkxvY2FsQ29uZmlnLkZhcm1bIk1vbnN0ZXIgRmFybSJdWyJTZWxlY3QgTW9uc3RlciBGYXJtIl0gPSBTZWxlY3RNb25zdGVyVmFsdWUKICAgICAgICBzYXZlU2V0dGluZ3MoKQogICAgZW5kCn0pCgpUYWJzLk1haW46QWRkRHJvcGRvd24oIlNlbGVjdEJvc3NzIiwgewogICAgVGl0bGUgPSAiU2VsZWN0IEJvc3MiLAogICAgVmFsdWVzID0gVGFibGVNb25zdGVyQm9zcywKICAgIC0tW1sKICAgICAgICAgICAgbG9jYWwgZW5lbWllcywgbGV2ZWxzLCBtYXhMZXZlbCA9IHt9LCB7fSwgMAoKICAgICAgICBmb3IgXywgdiBpbiBwYWlycyh3b3Jrc3BhY2UuX1dvcmxkT3JpZ2luLkVuZW15U3Bhd25zOkdldENoaWxkcmVuKCkpIGRvCiAgICAgICAgICAgIGxvY2FsIG5hbWUsIGxldmVsID0gdi5OYW1lLCB0b251bWJlcih2Lk5hbWU6bWF0Y2goIiVkKyIpKQogICAgICAgICAgICBpZiBsZXZlbCBhbmQgbmFtZTpsb3dlcigpOm1hdGNoKCJib3NzIikgYW5kIG5vdCBlbmVtaWVzW2xldmVsXSB0aGVuCiAgICAgICAgICAgICAgICBlbmVtaWVzW2xldmVsXSA9IG5hbWUKICAgICAgICAgICAgICAgIHRhYmxlLmluc2VydChsZXZlbHMsIGxldmVsKQogICAgICAgICAgICAgICAgbWF4TGV2ZWwgPSBtYXRoLm1heChtYXhMZXZlbCwgbGV2ZWwpCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZAogICAgICAgIHRhYmxlLnNvcnQobGV2ZWxzKQogICAgICAgIGxvY2FsIHNvcnRlZEVuZW1pZXMgPSB7fQogICAgICAgIGZvciBfLCBsZXZlbCBpbiBpcGFpcnMobGV2ZWxzKSBkbwogICAgICAgICAgICB0YWJsZS5pbnNlcnQoc29ydGVkRW5lbWllcywgZW5lbWllc1tsZXZlbF0pCiAgICAgICAgZW5kCiAgICAgICAgcmV0dXJuIHNvcnRlZEVuZW1pZXMKICAgIF1dCiAgICBNdWx0aSA9IGZhbHNlLAogICAgRGVmYXVsdCA9IGdldGdlbnYoKS5Mb2NhbENvbmZpZy5GYXJtWyJCb3NzIEZhcm0iXVsiU2VsZWN0IEJvc3MgRmFybSJdIG9yICIiLAogICAgQ2FsbGJhY2sgPSBmdW5jdGlvbihTZWxlY3RCb3NzVmFsdWUpCiAgICAgICAgZ2V0Z2VudigpLkxvY2FsQ29uZmlnLkZhcm1bIkJvc3MgRmFybSJdWyJTZWxlY3QgQm9zcyBGYXJtIl0gPSBTZWxlY3RCb3NzVmFsdWUKICAgICAgICBzYXZlU2V0dGluZ3MoKQogICAgZW5kCn0pCgpUYWJzLk1haW46QWRkRHJvcGRvd24oIlNlbGVjdE1hdGVyaWFsRmFybSIsIHsKICAgIFRpdGxlID0gIlNlbGVjdCBNYXRlcmlhbCBGYXJtIiwKICAgIFZhbHVlcyA9IChmdW5jdGlvbigpCiAgICAgICAgZm9yIF8sIHYgaW4gcGFpcnMoTWF0ZXJpYWxzTGlzdHMpIGRvCiAgICAgICAgICAgIHRhYmxlLmluc2VydChNYXRlcmlhbHNMaXN0cywgdi5OYW1lKQogICAgICAgIGVuZAogICAgICAgIHJldHVybiBNYXRlcmlhbHNMaXN0cwogICAgZW5kKSgpLAogICAgTXVsdGkgPSBmYWxzZSwKICAgIERlZmF1bHQgPSBnZXRnZW52KCkuTG9jYWxDb25maWcuRmFybVsiR2V0IE1hdGVyaWFsIl0uTWF0ZXJpYWwgb3IgIiIsCiAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKFNlbGVjdE1hdGVyaWFsRmFybVZhbHVlKQogICAgICAgIGdldGdlbnYoKS5Mb2NhbENvbmZpZy5GYXJtWyJHZXQgTWF0ZXJpYWwiXS5NYXRlcmlhbCA9IFNlbGVjdE1hdGVyaWFsRmFybVZhbHVlCiAgICAgICAgc2F2ZVNldHRpbmdzKCkKICAgIGVuZAp9KQoKVGFicy5NYWluOkFkZFRvZ2dsZSgiU2VsZWN0TW9uc3RlckZhcm0iLCB7CiAgICBUaXRsZSA9ICJNb25zdGVyIEZhcm0iLAogICAgRGVmYXVsdCA9IGdldGdlbnYoKS5Mb2NhbENvbmZpZy5GYXJtWyJNb25zdGVyIEZhcm0iXS5FbmFibGUsCiAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKFNlbGVjdE1vbnN0ZXJGYXJtQm9vbGVhbikKICAgICAgICBnZXRnZW52KCkuTG9jYWxDb25maWcuRmFybVsiTW9uc3RlciBGYXJtIl0uRW5hYmxlID0gU2VsZWN0TW9uc3RlckZhcm1Cb29sZWFuCiAgICAgICAgc2F2ZVNldHRpbmdzKCkKICAgIGVuZAp9KQoKVGFicy5NYWluOkFkZFRvZ2dsZSgiU2VsZWN0Qm9zc0Zhcm0iLCB7CiAgICBUaXRsZSA9ICJCb3NzIEZhcm0iLAogICAgRGVmYXVsdCA9IGdldGdlbnYoKS5Mb2NhbENvbmZpZy5GYXJtWyJCb3NzIEZhcm0iXS5FbmFibGUsCiAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKFNlbGVjdEJvc3NGYXJtQm9vbGVhbikKICAgICAgICBnZXRnZW52KCkuTG9jYWxDb25maWcuRmFybVsiQm9zcyBGYXJtIl0uRW5hYmxlID0gU2VsZWN0Qm9zc0Zhcm1Cb29sZWFuCiAgICAgICAgc2F2ZVNldHRpbmdzKCkKICAgIGVuZAp9KQoKVGFicy5NYWluOkFkZFRvZ2dsZSgiTWF0ZXJpYWxGYXJtIiwgewogICAgVGl0bGUgPSAiTWF0ZXJpYWwgRmFybSIsCiAgICBEZWZhdWx0ID0gZ2V0Z2VudigpLkxvY2FsQ29uZmlnLkZhcm1bIkdldCBNYXRlcmlhbCJdWyJUdXJuIE9uIl0sCiAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKE1hdGVyaWFsRmFybUJvb2xlYW4pCiAgICAgICAgZ2V0Z2VudigpLkxvY2FsQ29uZmlnLkZhcm1bIkdldCBNYXRlcmlhbCJdWyJUdXJuIE9uIl0gPSBNYXRlcmlhbEZhcm1Cb29sZWFuCiAgICAgICAgc2F2ZVNldHRpbmdzKCkKICAgIGVuZAp9KQoKaWYgZ2FtZS5QbGFjZUlkID09IDQ0NDIyNzIxODMgdGhlbgogICAgVGFicy5NYWluOkFkZFRvZ2dsZSgiRWN0b3BsYXNtRmFybSIsIHsKICAgICAgICBUaXRsZSA9ICJFY3RvcGxhc20iLAogICAgICAgIERlZmF1bHQgPSBnZXRnZW52KCkuTG9jYWxDb25maWcuRmFybS5FY3RvcGxhc20sCiAgICAgICAgQ2FsbGJhY2sgPSBmdW5jdGlvbihFY3RvcGxhc21GYXJtQm9vbGVhbikKICAgICAgICAgICAgZ2V0Z2VudigpLkxvY2FsQ29uZmlnLkZhcm0uRWN0b3BsYXNtID0gRWN0b3BsYXNtRmFybUJvb2xlYW4KICAgICAgICAgICAgc2F2ZVNldHRpbmdzKCkKICAgICAgICBlbmQKICAgIH0pCmVsc2VpZiBnYW1lLlBsYWNlSWQgPT0gNzQ0OTQyMzYzNSB0aGVuCiAgICBUYWJzLk1haW46QWRkVG9nZ2xlKCJDYWtlUHJpbmNlRmFybSIsIHsKICAgICAgICBUaXRsZSA9ICJDYWtlIFByaW5jZSIsCiAgICAgICAgRGVmYXVsdCA9IGdldGdlbnYoKS5Mb2NhbENvbmZpZy5GYXJtWyJDYWtlIFByaW5jZSJdLAogICAgICAgIENhbGxiYWNrID0gZnVuY3Rpb24oQ2FrZVByaW5jZUZhcm1Cb29sZWFuKQogICAgICAgICAgICBnZXRnZW52KCkuTG9jYWxDb25maWcuRmFybVsiQ2FrZSBQcmluY2UiXSA9IENha2VQcmluY2VGYXJtQm9vbGVhbgogICAgICAgICAgICBzYXZlU2V0dGluZ3MoKQogICAgICAgIGVuZAogICAgfSkKICAgIFRhYnMuTWFpbjpBZGRUb2dnbGUoIkJvbmVGYXJtIiwgewogICAgICAgIFRpdGxlID0gIkJvbmUiLAogICAgICAgIERlZmF1bHQgPSBnZXRnZW52KCkuTG9jYWxDb25maWcuRmFybS5Cb25lLAogICAgICAgIENhbGxiYWNrID0gZnVuY3Rpb24oQm9uZUZhcm1Cb29sZWFuKQogICAgICAgICAgICBnZXRnZW52KCkuTG9jYWxDb25maWcuRmFybS5Cb25lID0gQm9uZUZhcm1Cb29sZWFuCiAgICAgICAgICAgIHNhdmVTZXR0aW5ncygpCiAgICAgICAgZW5kCiAgICB9KQplbmQKClRhYnMuTWFpbjpBZGRUb2dnbGUoIlVwZ3JhZGVSYWNlIiwgewogICAgVGl0bGUgPSAiVXBncmFkZSBSYWNlIFYyIiwKICAgIERlZmF1bHQgPSBnZXRnZW52KCkuTG9jYWxDb25maWdbIkdldCBJdGVtIl0uUmFjZVsiVXBncmFkZSJdWyJWMiJdLAogICAgQ2FsbGJhY2sgPSBmdW5jdGlvbihVcGdyYWRlUmFjZUJvb2xlYW4pCiAgICAgICAgZ2V0Z2VudigpLkxvY2FsQ29uZmlnWyJHZXQgSXRlbSJdLlJhY2VbIlVwZ3JhZGUiXVsiVjIiXSA9IFVwZ3JhZGVSYWNlQm9vbGVhbgogICAgICAgIHNhdmVTZXR0aW5ncygpCiAgICBlbmQKfSkKClRhYnMuTWFpbjpBZGRUb2dnbGUoIlVwZ3JhZGVSYWNlVjMiLCB7CiAgICBUaXRsZSA9ICJVcGdyYWRlIFJhY2UgVjMiLAogICAgRGVmYXVsdCA9IGdldGdlbnYoKS5Mb2NhbENvbmZpZ1siR2V0IEl0ZW0iXS5SYWNlWyJVcGdyYWRlIl1bIlYzIl0sCiAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKFVwZ3JhZGVSYWNlVjNCb29sZWFuKQogICAgICAgIGdldGdlbnYoKS5Mb2NhbENvbmZpZ1siR2V0IEl0ZW0iXS5SYWNlWyJVcGdyYWRlIl1bIlYzIl0gPSBVcGdyYWRlUmFjZVYzQm9vbGVhbgogICAgICAgIHNhdmVTZXR0aW5ncygpCiAgICBlbmQKfSkKCi0tIFNUQUNLQUJMRSBGQVJNCi0tIE9USEVSIEZBUk0KVGFicy5PdGhlckZhcm06QWRkVG9nZ2xlKCJDaGVzdEZhcm0iLCB7CiAgICBUaXRsZSA9ICJDaGVzdCBGYXJtIiwKICAgIERlZmF1bHQgPSBnZXRnZW52KCkuTG9jYWxDb25maWcuRmFybS5DaGVzdHMsCiAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKENoZXN0RmFybUJvb2xlYW4pCiAgICAgICAgZ2V0Z2VudigpLkxvY2FsQ29uZmlnLkZhcm0uQ2hlc3RzID0gQ2hlc3RGYXJtQm9vbGVhbgogICAgICAgIHNhdmVTZXR0aW5ncygpCiAgICBlbmQKfSkKClRhYnMuT3RoZXJGYXJtOkFkZFRvZ2dsZSgiQXV0b1doaXRlQmVhcmQiLCB7CiAgICBUaXRsZSA9ICJBdXRvIFdoaXRlIEJlYXJkIiwKICAgIERlZmF1bHQgPSBnZXRnZW52KCkuTG9jYWxDb25maWcuRmFybVsiV2hpdGUgQmVhcmQiXSwKICAgIENhbGxiYWNrID0gZnVuY3Rpb24oV2hpdGVCZWFyZEJvb2xlYW4pCiAgICAgICAgZ2V0Z2VudigpLkxvY2FsQ29uZmlnLkZhcm1bIldoaXRlIEJlYXJkIl0gPSBXaGl0ZUJlYXJkQm9vbGVhbgogICAgICAgIHNhdmVTZXR0aW5ncygpCiAgICBlbmQKfSkKCmlmIGdhbWUuUGxhY2VJZCA9PSA0NDQyMjcyMTgzIHRoZW4KICAgIFRhYnMuT3RoZXJGYXJtOkFkZFRvZ2dsZSgiQXV0b0xhdyIsIHsKICAgICAgICBUaXRsZSA9ICJBdXRvTGF3IiwKICAgICAgICBEZWZhdWx0ID0gZ2V0Z2VudigpLkxvY2FsQ29uZmlnLkZhcm0uTGF3LAogICAgICAgIENhbGxiYWNrID0gZnVuY3Rpb24oTGF3RmFybUJvb2xlYW4pCiAgICAgICAgICAgIGdldGdlbnYoKS5Mb2NhbENvbmZpZy5GYXJtLkxhdyA9IExhd0Zhcm1Cb29sZWFuCiAgICAgICAgICAgIHNhdmVTZXR0aW5ncygpCiAgICAgICAgZW5kCiAgICB9KQogICAgVGFicy5PdGhlckZhcm06QWRkVG9nZ2xlKCJGYWN0b3J5IiwgewogICAgICAgIFRpdGxlID0gIkZhY3RvcnkiLAogICAgICAgIERlZmF1bHQgPSBnZXRnZW52KCkuTG9jYWxDb25maWcuRmFybS5GYWN0b3J5LAogICAgICAgIENhbGxiYWNrID0gZnVuY3Rpb24oRmFjdG9yeUJvb2xlYW4pCiAgICAgICAgICAgIGdldGdlbnYoKS5Mb2NhbENvbmZpZy5GYXJtLkZhY3RvcnkgPSBGYWN0b3J5Qm9vbGVhbgogICAgICAgICAgICBzYXZlU2V0dGluZ3MoKQogICAgICAgIGVuZAogICAgfSkKICAgIFRhYnMuT3RoZXJGYXJtOkFkZFRvZ2dsZSgiQXV0b0JsYWNrQmVhcmQiLCB7CiAgICAgICAgVGl0bGUgPSAiQXV0byBCbGFjayBCZWFyZCIsCiAgICAgICAgRGVmYXVsdCA9IGdldGdlbnYoKS5Mb2NhbENvbmZpZy5GYXJtWyJEYXJrIEJlYXJkIl0sCiAgICAgICAgQ2FsbGJhY2sgPSBmdW5jdGlvbihCbGFja0JlYXJkQm9vbGVhbikKICAgICAgICAgICAgZ2V0Z2VudigpLkxvY2FsQ29uZmlnLkZhcm1bIkRhcmsgQmVhcmQiXSA9IEJsYWNrQmVhcmRCb29sZWFuCiAgICAgICAgICAgIHNhdmVTZXR0aW5ncygpCiAgICAgICAgZW5kCiAgICB9KQplbmQKCmlmIGdhbWUuUGxhY2VJZCA9PSA3NDQ5NDIzNjM1IHRoZW4KICAgIFRhYnMuT3RoZXJGYXJtOkFkZFRvZ2dsZSgiQXV0b1BpcmF0ZXNSYWlkIiwgewogICAgICAgIFRpdGxlID0gIkF1dG8gUGlyYXRlcyBSYWlkIiwKICAgICAgICBEZWZhdWx0ID0gZ2V0Z2VudigpLkxvY2FsQ29uZmlnLkZhcm1bIlBpcmF0ZXMgUmFpZCJdLAogICAgICAgIENhbGxiYWNrID0gZnVuY3Rpb24oUGlyYXRlc1JhaWRCb29sZWFuKQogICAgICAgICAgICBnZXRnZW52KCkuTG9jYWxDb25maWcuRmFybVsiUGlyYXRlcyBSYWlkIl0gPSBQaXJhdGVzUmFpZEJvb2xlYW4KICAgICAgICAgICAgc2F2ZVNldHRpbmdzKCkKICAgICAgICBlbmQKICAgIH0pCiAgICBUYWJzLk90aGVyRmFybTpBZGRUb2dnbGUoIlJpcEluZHJhIiwgewogICAgICAgIFRpdGxlID0gIlJpcEluZHJhIiwKICAgICAgICBEZWZhdWx0ID0gZ2V0Z2VudigpLkxvY2FsQ29uZmlnLkZhcm1bIlJpcCBJbmRyYSJdLAogICAgICAgIENhbGxiYWNrID0gZnVuY3Rpb24oUmlwSW5kcmFCb29sZWFuKQogICAgICAgICAgICBnZXRnZW52KCkuTG9jYWxDb25maWcuRmFybVsiUmlwIEluZHJhIl0gPSBSaXBJbmRyYUJvb2xlYW4KICAgICAgICAgICAgc2F2ZVNldHRpbmdzKCkKICAgICAgICBlbmQKICAgIH0pCiAgICBUYWJzLk90aGVyRmFybTpBZGRUb2dnbGUoIlNvdWxSZWFwZXIiLCB7CiAgICAgICAgVGl0bGUgPSAiU291bCBSZWFwZXIiLAogICAgICAgIERlZmF1bHQgPSBnZXRnZW52KCkuTG9jYWxDb25maWcuRmFybVsiU291bCBSZWFwZXIiXSwKICAgICAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKFNvdWxSZWFwZXJCb29sZWFuKQogICAgICAgICAgICBnZXRnZW52KCkuTG9jYWxDb25maWcuRmFybVsiU291bCBSZWFwZXIiXSA9IFNvdWxSZWFwZXJCb29sZWFuCiAgICAgICAgICAgIHNhdmVTZXR0aW5ncygpCiAgICAgICAgZW5kCiAgICB9KQplbmQKCi0tR0VUIElURU0KVGFicy5HZXRJdGVtOkFkZFBhcmFncmFwaCh7VGl0bGUgPSAiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTWVsZWUgdjIifSkKVGFicy5HZXRJdGVtOkFkZFRvZ2dsZSgiQXV0b0dldERlYWx0aFN0ZXAiLCB7CiAgICBUaXRsZSA9ICJBdXRvIEdldCBEZWFsdGggU3RlcCIsCiAgICBEZWZhdWx0ID0gZ2V0Z2VudigpLkxvY2FsQ29uZmlnWyJHZXQgSXRlbSJdLk1lbGVlWyJEZWFsdGggU3RlcCJdLAogICAgQ2FsbGJhY2sgPSBmdW5jdGlvbihHZXREZWFsdGhTdGVwQm9vbGVhbikKICAgICAgICBnZXRnZW52KCkuTG9jYWxDb25maWdbIkdldCBJdGVtIl0uTWVsZWVbIkRlYWx0aCBTdGVwIl0gPSBHZXREZWFsdGhTdGVwQm9vbGVhbgogICAgICAgIHNhdmVTZXR0aW5ncygpCiAgICBlbmQKfSkKClRhYnMuR2V0SXRlbTpBZGRUb2dnbGUoIkF1dG9HZXRFbGVjdHJpY0NsYXciLCB7CiAgICBUaXRsZSA9ICJBdXRvIEdldCBFbGVjdHJpYyBDbGF3IiwKICAgIERlZmF1bHQgPSBnZXRnZW52KCkuTG9jYWxDb25maWdbIkdldCBJdGVtIl0uTWVsZWVbIkVsZWN0cmljIENsYXciXSwKICAgIENhbGxiYWNrID0gZnVuY3Rpb24oR2V0RWxlY3RyaWNDbGF3Qm9vbGVhbikKICAgICAgICBnZXRnZW52KCkuTG9jYWxDb25maWdbIkdldCBJdGVtIl0uTWVsZWVbIkVsZWN0cmljIENsYXciXSA9IEdldEVsZWN0cmljQ2xhd0Jvb2xlYW4KICAgICAgICBzYXZlU2V0dGluZ3MoKQogICAgZW5kCn0pCgpUYWJzLkdldEl0ZW06QWRkVG9nZ2xlKCJBdXRvR2V0U2hhcm1hbkthcmF0ZSIsIHsKICAgIFRpdGxlID0gIkF1dG8gR2V0IFNoYXJtYW4gS2FyYXRlIiwKICAgIERlZmF1bHQgPSBnZXRnZW52KCkuTG9jYWxDb25maWdbIkdldCBJdGVtIl0uTWVsZWVbIlNoYXJtYW4gS2FyYXRlIl0sCiAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKEdldFNoYXJtYW5LYXJhdGVCb29sZWFuKQogICAgICAgIGdldGdlbnYoKS5Mb2NhbENvbmZpZ1siR2V0IEl0ZW0iXS5NZWxlZVsiU2hhcm1hbiBLYXJhdGUiXSA9IEdldFNoYXJtYW5LYXJhdGVCb29sZWFuCiAgICAgICAgc2F2ZVNldHRpbmdzKCkKICAgIGVuZAp9KQoKVGFicy5HZXRJdGVtOkFkZFRvZ2dsZSgiQXV0b0dldFN1cGVyaHVtYW4iLCB7CiAgICBUaXRsZSA9ICJBdXRvIEdldCBTdXBlcmh1bWFuIiwKICAgIERlZmF1bHQgPSBnZXRnZW52KCkuTG9jYWxDb25maWdbIkdldCBJdGVtIl0uTWVsZWVbIlN1cGVyaHVtYW4iXSwKICAgIENhbGxiYWNrID0gZnVuY3Rpb24oR2V0U3VwZXJodW1hbkJvb2xlYW4pCiAgICAgICAgZ2V0Z2VudigpLkxvY2FsQ29uZmlnWyJHZXQgSXRlbSJdLk1lbGVlWyJTdXBlcmh1bWFuIl0gPSBHZXRTdXBlcmh1bWFuQm9vbGVhbgogICAgICAgIHNhdmVTZXR0aW5ncygpCiAgICBlbmQKfSkKClRhYnMuR2V0SXRlbTpBZGRUb2dnbGUoIkF1dG9HZXREcmFnb25UYWxvbiIsIHsKICAgIFRpdGxlID0gIkF1dG8gR2V0IERyYWdvbiBUYWxvbiIsCiAgICBEZWZhdWx0ID0gZ2V0Z2VudigpLkxvY2FsQ29uZmlnWyJHZXQgSXRlbSJdLk1lbGVlWyJEcmFnb24gVGFsb24iXSwKICAgIENhbGxiYWNrID0gZnVuY3Rpb24oR2V0RHJhZ29uVGFsb25Cb29sZWFuKQogICAgICAgIGdldGdlbnYoKS5Mb2NhbENvbmZpZ1siR2V0IEl0ZW0iXS5NZWxlZVsiRHJhZ29uIFRhbG9uIl0gPSBHZXREcmFnb25UYWxvbkJvb2xlYW4KICAgICAgICBzYXZlU2V0dGluZ3MoKQogICAgZW5kCn0pCgpUYWJzLkdldEl0ZW06QWRkVG9nZ2xlKCJBdXRvR2V0R29kSHVtYW4iLCB7CiAgICBUaXRsZSA9ICJBdXRvIEdldCBHb2RIdW1hbiIsCiAgICBEZWZhdWx0ID0gZ2V0Z2VudigpLkxvY2FsQ29uZmlnWyJHZXQgSXRlbSJdLk1lbGVlWyJHb2RIdW1hbiJdLAogICAgQ2FsbGJhY2sgPSBmdW5jdGlvbihHZXRHb2RIdW1hbkJvb2xlYW4pCiAgICAgICAgZ2V0Z2VudigpLkxvY2FsQ29uZmlnWyJHZXQgSXRlbSJdLk1lbGVlWyJHb2RIdW1hbiJdID0gR2V0R29kSHVtYW5Cb29sZWFuCiAgICAgICAgc2F2ZVNldHRpbmdzKCkKICAgIGVuZAp9KQoKVGFicy5HZXRJdGVtOkFkZFBhcmFncmFwaCh7VGl0bGUgPSAiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU3dvcmQifSkKVGFicy5HZXRJdGVtOkFkZFRvZ2dsZSgiQXV0b1NhYmVyIiwgewogICAgVGl0bGUgPSAiQXV0byBTYWJlciIsCiAgICBEZWZhdWx0ID0gZ2V0Z2VudigpLkxvY2FsQ29uZmlnWyJHZXQgSXRlbSJdLlN3b3JkWyJTYWJlciJdLAogICAgQ2FsbGJhY2sgPSBmdW5jdGlvbihHZXRTYWJlckJvb2xlYW4pCiAgICAgICAgZ2V0Z2VudigpLkxvY2FsQ29uZmlnWyJHZXQgSXRlbSJdLlN3b3JkWyJTYWJlciJdID0gR2V0U2FiZXJCb29sZWFuCiAgICAgICAgc2F2ZVNldHRpbmdzKCkKICAgIGVuZAp9KQoKVGFicy5HZXRJdGVtOkFkZFRvZ2dsZSgiQXV0b1BvbGUiLCB7CiAgICBUaXRsZSA9ICJBdXRvIFBvbGUiLAogICAgRGVmYXVsdCA9IGdldGdlbnYoKS5Mb2NhbENvbmZpZ1siR2V0IEl0ZW0iXS5Td29yZFsiUG9sZSJdLAogICAgQ2FsbGJhY2sgPSBmdW5jdGlvbihHZXRQb2xlQm9vbGVhbikKICAgICAgICBnZXRnZW52KCkuTG9jYWxDb25maWdbIkdldCBJdGVtIl0uU3dvcmRbIlBvbGUiXSA9IEdldFBvbGVCb29sZWFuCiAgICAgICAgc2F2ZVNldHRpbmdzKCkKICAgIGVuZAp9KQoKVGFicy5HZXRJdGVtOkFkZFRvZ2dsZSgiQXV0b1BvbGVWMiIsIHsKICAgIFRpdGxlID0gIkF1dG8gUG9sZSBWMiIsCiAgICBEZWZhdWx0ID0gZ2V0Z2VudigpLkxvY2FsQ29uZmlnWyJHZXQgSXRlbSJdLlN3b3JkWyJQb2xlIFYyIl0sCiAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKEdldFBvbGVWMkJvb2xlYW4pCiAgICAgICAgZ2V0Z2VudigpLkxvY2FsQ29uZmlnWyJHZXQgSXRlbSJdLlN3b3JkWyJQb2xlIFYyIl0gPSBHZXRQb2xlVjJCb29sZWFuCiAgICAgICAgc2F2ZVNldHRpbmdzKCkKICAgIGVuZAp9KQoKVGFicy5HZXRJdGVtOkFkZFRvZ2dsZSgiQXV0b1R1c2hpVGEiLCB7CiAgICBUaXRsZSA9ICJBdXRvIFR1c2hpdGEiLAogICAgRGVmYXVsdCA9IGdldGdlbnYoKS5Mb2NhbENvbmZpZ1siR2V0IEl0ZW0iXS5Td29yZFsiVHVzaGl0YSJdLAogICAgQ2FsbGJhY2sgPSBmdW5jdGlvbihHZXRUdXNoaXRhQm9vbGVhbikKICAgICAgICBnZXRnZW52KCkuTG9jYWxDb25maWdbIkdldCBJdGVtIl0uU3dvcmRbIlR1c2hpdGEiXSA9IEdldFR1c2hpdGFCb29sZWFuCiAgICAgICAgc2F2ZVNldHRpbmdzKCkKICAgIGVuZAp9KQoKVGFicy5HZXRJdGVtOkFkZFBhcmFncmFwaCh7VGl0bGUgPSAiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgR3VuIn0pClRhYnMuR2V0SXRlbTpBZGRUb2dnbGUoIkF1dG9Tb3VsR3VpdGFyIiwgewogICAgVGl0bGUgPSAiQXV0byBTb3VsIEd1aXRhciIsCiAgICBEZWZhdWx0ID0gZ2V0Z2VudigpLkxvY2FsQ29uZmlnWyJHZXQgSXRlbSJdLkd1blsiU291bCBHdWl0YXIiXSwKICAgIENhbGxiYWNrID0gZnVuY3Rpb24oR2V0U291bEd1aXRhckJvb2xlYW4pCiAgICAgICAgZ2V0Z2VudigpLkxvY2FsQ29uZmlnWyJHZXQgSXRlbSJdLkd1blsiU291bCBHdWl0YXIiXSA9IEdldFNvdWxHdWl0YXJCb29sZWFuCiAgICAgICAgc2F2ZVNldHRpbmdzKCkKICAgIGVuZAp9KQoKVGFicy5HZXRJdGVtOkFkZFBhcmFncmFwaCh7VGl0bGUgPSAiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUmFjZSJ9KQpUYWJzLkdldEl0ZW06QWRkVG9nZ2xlKCJBdXRvR2hvdWwiLCB7CiAgICBUaXRsZSA9ICJBdXRvIEdob3VsIiwKICAgIERlZmF1bHQgPSBnZXRnZW52KCkuTG9jYWxDb25maWdbIkdldCBJdGVtIl0uUmFjZS5HaG91bCwKICAgIENhbGxiYWNrID0gZnVuY3Rpb24oR2V0R2hvdWxCb29sZWFuKQogICAgICAgIGdldGdlbnYoKS5Mb2NhbENvbmZpZ1siR2V0IEl0ZW0iXS5SYWNlLkdob3VsID0gR2V0R2hvdWxCb29sZWFuCiAgICAgICAgc2F2ZVNldHRpbmdzKCkKICAgIGVuZAp9KQoKVGFicy5HZXRJdGVtOkFkZFRvZ2dsZSgiQXV0b0N5Ym9yZyIsIHsKICAgIFRpdGxlID0gIkF1dG8gQ3lib3JnIiwKICAgIERlZmF1bHQgPSBnZXRnZW52KCkuTG9jYWxDb25maWdbIkdldCBJdGVtIl0uUmFjZS5DeWJvcmcsCiAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKEdldEN5Ym9yZ0Jvb2xlYW4pCiAgICAgICAgZ2V0Z2VudigpLkxvY2FsQ29uZmlnWyJHZXQgSXRlbSJdLlJhY2UuQ3lib3JnID0gR2V0Q3lib3JnQm9vbGVhbgogICAgICAgIHNhdmVTZXR0aW5ncygpCiAgICBlbmQKfSkKClRhYnMuR2V0SXRlbTpBZGRQYXJhZ3JhcGgoe1RpdGxlID0gIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFF1ZXN0In0pClRhYnMuR2V0SXRlbTpBZGRUb2dnbGUoIkF1dG9DaXRpemVuUXVlc3QiLCB7CiAgICBUaXRsZSA9ICJBdXRvIENpdGl6ZW4gUXVlc3QiLAogICAgRGVmYXVsdCA9IGdldGdlbnYoKS5Mb2NhbENvbmZpZy5GYXJtLlF1ZXN0WyJDaXRpemVuIl0sCiAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKEdldENpdGl6ZW5Cb29sZWFuKQogICAgICAgIGdldGdlbnYoKS5Mb2NhbENvbmZpZy5GYXJtWyJRdWVzdCJdWyJDaXRpemVuIl0gPSBHZXRDaXRpemVuQm9vbGVhbgogICAgICAgIHNhdmVTZXR0aW5ncygpCiAgICBlbmQKfSkKClRhYnMuR2V0SXRlbTpBZGRUb2dnbGUoIkF1dG9SYWluYm93SGFraSIsIHsKICAgIFRpdGxlID0gIkF1dG8gUmFpbmJvdyBIYWtpIiwKICAgIERlZmF1bHQgPSBnZXRnZW52KCkuTG9jYWxDb25maWcuRmFybS5RdWVzdFsiUmFpbmJvdyBIYWtpIl0sCiAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKEdldFJhaW5ib3dIYWtpQm9vbGVhbikKICAgICAgICBnZXRnZW52KCkuTG9jYWxDb25maWcuRmFybS5RdWVzdFsiUmFpbmJvdyBIYWtpIl0gPSBHZXRSYWluYm93SGFraUJvb2xlYW4KICAgICAgICBzYXZlU2V0dGluZ3MoKQogICAgZW5kCn0pCgpUYWJzLkdldEl0ZW06QWRkVG9nZ2xlKCJBdXRvTXVza2V0ZWVyIiwgewogICAgVGl0bGUgPSAiQXV0byBNdXNrZXRlZXIiLAogICAgRGVmYXVsdCA9IGdldGdlbnYoKS5Mb2NhbENvbmZpZy5GYXJtLlF1ZXN0WyJNdXNrZXRlZXIiXSwKICAgIENhbGxiYWNrID0gZnVuY3Rpb24oR2V0TXVza2V0ZWVyQm9vbGVhbikKICAgICAgICBnZXRnZW52KCkuTG9jYWxDb25maWcuRmFybS5RdWVzdFsiTXVza2V0ZWVyIl0gPSBHZXRNdXNrZXRlZXJCb29sZWFuCiAgICAgICAgc2F2ZVNldHRpbmdzKCkKICAgIGVuZAp9KQoKVGFicy5HZXRJdGVtOkFkZFRvZ2dsZSgiQXV0b1N3YW4iLCB7CiAgICBUaXRsZSA9ICJBdXRvIFN3YW4iLAogICAgRGVmYXVsdCA9IGdldGdlbnYoKS5Mb2NhbENvbmZpZy5GYXJtLlF1ZXN0WyJTd2FuIl0sCiAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKEdldFN3YW5Cb29sZWFuKQogICAgICAgIGdldGdlbnYoKS5Mb2NhbENvbmZpZy5GYXJtLlF1ZXN0WyJTd2FuIl0gPSBHZXRTd2FuQm9vbGVhbgogICAgICAgIHNhdmVTZXR0aW5ncygpCiAgICBlbmQKfSkKClRhYnMuR2V0SXRlbTpBZGRUb2dnbGUoIkF1dG9SYWluYm93SGFraSIsIHsKICAgIFRpdGxlID0gIkF1dG8gUmFpbmJvdyBIYWtpIiwKICAgIERlZmF1bHQgPSBnZXRnZW52KCkuTG9jYWxDb25maWcuRmFybS5RdWVzdFsiUmFpbmJvdyBIYWtpIl0sCiAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKEdldFJhaW5ib3dIYWtpQm9vbGVhbikKICAgICAgICBnZXRnZW52KCkuTG9jYWxDb25maWcuRmFybS5RdWVzdFsiUmFpbmJvdyBIYWtpIl0gPSBHZXRSYWluYm93SGFraUJvb2xlYW4KICAgICAgICBzYXZlU2V0dGluZ3MoKQogICAgZW5kCn0pCgpUYWJzLkdldEl0ZW06QWRkVG9nZ2xlKCJBdXRvQmFydGlsbyIsIHsKICAgIFRpdGxlID0gIkF1dG8gQmFydGlsbyIsCiAgICBEZWZhdWx0ID0gZ2V0Z2VudigpLkxvY2FsQ29uZmlnLkZhcm0uUXVlc3RbIkJhcnRpbG8iXSwKICAgIENhbGxiYWNrID0gZnVuY3Rpb24oR2V0QmFydGlsb0Jvb2xlYW4pCiAgICAgICAgZ2V0Z2VudigpLkxvY2FsQ29uZmlnLkZhcm0uUXVlc3RbIkJhcnRpbG8iXSA9IEdldEJhcnRpbG9Cb29sZWFuCiAgICAgICAgc2F2ZVNldHRpbmdzKCkKICAgIGVuZAp9KQoKLS0gU1RBVFVTCmxvY2FsIHN0YXR1c1RpdGxlcyA9IHsKICAgICLwn5al77iPIEV4ZWN1dG9yIiwgIuKPsyBSdW50aW1lIiwKICAgICLwn5Ww77iPIEN1cnJlbnQgVGltZSIsICLwn4yVIE1vb24gU3RhdHVzIiwKICAgICLwn4+d77iPIE1pcmFnZSBJc2xhbmQiLCAi4pqU77iPIEVsaXRlIEh1bnQiLAogICAgIvCfjoIgQ2FrZSBQcmluY2UiLCAi8J+NjyBEZXZpbCBGcnVpdCIsICLwn5GlIFBsYXllciBDb3VudCIsCn0KCmxvY2FsIHN0YXR1c0NhY2hlLCB1aUVsZW1lbnRzID0ge30sIHt9Cgpmb3IgXywgdiBpbiBpcGFpcnMoc3RhdHVzVGl0bGVzKSBkbwogICAgc3RhdHVzQ2FjaGVbdl0gPSAiIgogICAgdWlFbGVtZW50c1t2XSA9IFRhYnMuU3RhdHVzOkFkZFBhcmFncmFwaCh7VGl0bGUgPSB2IC4uICI6IExvYWRpbmcuLi4ifSkKZW5kCgp0YXNrLmRlZmVyKGZ1bmN0aW9uKCkKICAgIGxvY2FsIGZ1bmN0aW9uIHVwZGF0ZVVJKHRpdGxlLCB2YWx1ZSkKICAgICAgICBpZiBzdGF0dXNDYWNoZVt0aXRsZV0gfj0gdmFsdWUgdGhlbgogICAgICAgICAgICB1aUVsZW1lbnRzW3RpdGxlXTpEZXN0cm95KCkKICAgICAgICAgICAgdWlFbGVtZW50c1t0aXRsZV0gPSBUYWJzLlN0YXR1czpBZGRQYXJhZ3JhcGgoe1RpdGxlID0gdGl0bGUgLi4gIjogIiAuLiB2YWx1ZX0pCiAgICAgICAgICAgIHN0YXR1c0NhY2hlW3RpdGxlXSA9IHZhbHVlCiAgICAgICAgZW5kCiAgICBlbmQKICAgIGxvY2FsIGZ1bmN0aW9uIGdldE1vb25TdGF0dXMoKQogICAgICAgIGxvY2FsIGxpZ2h0aW5nID0gZ2FtZTpHZXRTZXJ2aWNlKCJMaWdodGluZyIpCiAgICAgICAgbG9jYWwgbW9vbklkID0gbGlnaHRpbmc6RmluZEZpcnN0Q2hpbGQoIkZhbnRhc3lTa3kiKSBhbmQgbGlnaHRpbmcuRmFudGFzeVNreS5Nb29uVGV4dHVyZUlkIG9yIGxpZ2h0aW5nLlNreS5Nb29uVGV4dHVyZUlkCiAgICAgICAgbG9jYWwgbW9vblBoYXNlcyA9IHsKICAgICAgICAgICAgWyI5NzA5MTQ5NDMxIl0gPSAi8J+MlSBGdWxsIE1vb24gWzgvOF0iLCAgICAgICAgICBbIjk3MDkxNDk2ODAiXSA9ICLwn4yUIE1vb24gNy84IiwgICAgICAgICAgWyI5NzA5MTQzNzMzIl0gPSAi8J+MliBNb29uIDYvOCIsCiAgICAgICAgICAgIFsiOTcwOTE1MDQwMSJdID0gIvCfjJcgTW9vbiA1LzgiLCAgICAgICAgICAgICAgICAgWyI5NzA5MTM1ODk1Il0gPSAi8J+MmCBNb29uIDQvOCIsICAgICAgICAgIFsiOTcwOTEzOTU5NyJdID0gIvCfjJEgTW9vbiAzLzgiLAogICAgICAgICAgICBbIjk3MDkxNTAwODYiXSA9ICLwn4yRIE1vb24gMi84IiwgICAgICAgICAgICAgICAgIFsiOTcwOTE0OTA1MiJdID0gIvCfjJEgTW9vbiAxLzgiCiAgICAgICAgfQogICAgICAgIHJldHVybiBtb29uUGhhc2VzW3N0cmluZy5tYXRjaChtb29uSWQsICIlZCskIildIG9yICLwn4yRIFVua25vd24iCiAgICBlbmQKCiAgICBsb2NhbCBmdW5jdGlvbiBjaGVja0VsaXRlSHVudCgpCiAgICAgICAgZm9yIF8sIHYgaW4gcGFpcnMoZ2FtZTpHZXRTZXJ2aWNlKCJXb3Jrc3BhY2UiKS5FbmVtaWVzOkdldENoaWxkcmVuKCkpIGRvCiAgICAgICAgICAgIGlmIHYuTmFtZSA9PSAiRGlhYmxvIiBvciB2Lk5hbWUgPT0gIkRlYW5kcmUiIG9yIHYuTmFtZSA9PSAiVXJiYW4iIHRoZW4KICAgICAgICAgICAgICAgIHJldHVybiAi8J+foiBTcGF3bmVkOiAiIC4uIHYuTmFtZQogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKICAgICAgICByZXR1cm4gIvCflLQgTm90IEZvdW5kIgogICAgZW5kCgogICAgbG9jYWwgZnVuY3Rpb24gY2hlY2tDYWtlUHJpbmNlKCkKICAgICAgICBsb2NhbCBraWxscyA9IHRvbnVtYmVyKHN0cmluZy5tYXRjaChnYW1lOkdldFNlcnZpY2UoIlJlcGxpY2F0ZWRTdG9yYWdlIikuUmVtb3Rlcy5Db21tRl86SW52b2tlU2VydmVyKCJDYWtlUHJpbmNlU3Bhd25lciIpLCAiS2lsbGVkIDogKCVkKykiKSkgb3IgMAogICAgICAgIHJldHVybiBraWxscyA+PSA1MDAgYW5kICLwn5+iIFNwYXduZWQg8J+OgiIgb3IgIvCfjoIgUHJvZ3Jlc3M6ICIgLi4ga2lsbHMgLi4gIi81MDAiCiAgICBlbmQKCiAgICBsb2NhbCBmdW5jdGlvbiBjaGVja0RldmlsRnJ1aXQoKQogICAgICAgIGZvciBfLCB2IGluIHBhaXJzKGdhbWU6R2V0U2VydmljZSgiV29ya3NwYWNlIik6R2V0Q2hpbGRyZW4oKSkgZG8KICAgICAgICAgICAgaWYgdjpJc0EoIlRvb2wiKSBhbmQgc3RyaW5nLm1hdGNoKHYuTmFtZSwgIkZydWl0IikgdGhlbgogICAgICAgICAgICAgICAgcmV0dXJuICLwn5+iIEZvdW5kOiAiIC4uIHYuTmFtZQogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKICAgICAgICByZXR1cm4gIvCflLQgTm9uZSIKICAgIGVuZAoKICAgIHdoaWxlIHRhc2sud2FpdCgxKSBkbwogICAgICAgIHVwZGF0ZVVJKCLwn5al77iPIEV4ZWN1dG9yIiwgZ2FtZTpHZXRTZXJ2aWNlKCJIdHRwU2VydmljZSIpOkpTT05EZWNvZGUocmVxdWVzdCh7VXJsID0gImh0dHBzOi8vaHR0cGJpbi5vcmcvdXNlci1hZ2VudCJ9KS5Cb2R5KVsidXNlci1hZ2VudCJdKQogICAgICAgIHVwZGF0ZVVJKCLij7MgUnVudGltZSIsIHN0cmluZy5mb3JtYXQoIiUwMmQ6JTAyZDolMDJkIiwgd29ya3NwYWNlLkRpc3RyaWJ1dGVkR2FtZVRpbWUgLy8gMzYwMCwgKHdvcmtzcGFjZS5EaXN0cmlidXRlZEdhbWVUaW1lICUgMzYwMCkgLy8gNjAsIHdvcmtzcGFjZS5EaXN0cmlidXRlZEdhbWVUaW1lICUgNjApKQogICAgICAgIHVwZGF0ZVVJKCLwn5Ww77iPIEN1cnJlbnQgVGltZSIsIHN0cmluZy5mb3JtYXQoIiUwMmRoIFslc10iLCBtYXRoLmZsb29yKGdhbWU6R2V0U2VydmljZSgiTGlnaHRpbmciKS5DbG9ja1RpbWUpLCAobWF0aC5mbG9vcihnYW1lOkdldFNlcnZpY2UoIkxpZ2h0aW5nIikuQ2xvY2tUaW1lKSA+PSAxNiBvciBtYXRoLmZsb29yKGdhbWU6R2V0U2VydmljZSgiTGlnaHRpbmciKS5DbG9ja1RpbWUpIDwgNikgYW5kICLwn4yZIE5pZ2h0IiBvciAi4piA77iPIERheSIpKQogICAgICAgIHVwZGF0ZVVJKCLwn4yVIE1vb24gU3RhdHVzIiwgZ2V0TW9vblN0YXR1cygpKQogICAgICAgIHVwZGF0ZVVJKCLwn4+d77iPIE1pcmFnZSBJc2xhbmQiLCBnYW1lOkdldFNlcnZpY2UoIldvcmtzcGFjZSIpLk1hcDpGaW5kRmlyc3RDaGlsZCgiTXlzdGljSXNsYW5kIikgYW5kICLwn5+iIEZvdW5kIiBvciAi8J+UtCBOb3QgRm91bmQiKQogICAgICAgIHVwZGF0ZVVJKCLimpTvuI8gRWxpdGUgSHVudCIsIGNoZWNrRWxpdGVIdW50KCkpCiAgICAgICAgdXBkYXRlVUkoIvCfjoIgQ2FrZSBQcmluY2UiLCBjaGVja0Nha2VQcmluY2UoKSkKICAgICAgICB1cGRhdGVVSSgi8J+NjyBEZXZpbCBGcnVpdCIsIGNoZWNrRGV2aWxGcnVpdCgpKQogICAgICAgIHVwZGF0ZVVJKCLwn5GlIFBsYXllciBDb3VudCIsIHN0cmluZy5mb3JtYXQoIlBsYXllcnM6ICVkLyVkIiwgI2dhbWU6R2V0U2VydmljZSgiUGxheWVycyIpOkdldFBsYXllcnMoKSwgZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikuTWF4UGxheWVycykpCiAgICAgICAgLS11cGRhdGVVSSgiWW91ciBUaW1lOiAiIC4uIG9zLmRhdGUoIiVaOiBVVEMiIC4uIG9zLmRhdGUoIiV6Iik6c3ViKDEsIDMpIC4uICIgWyVwXSAlSWg6JU1tOiVTcyBbJWQtJW0tMjAleV0iKSkKICAgIGVuZAplbmQpCgoKLS1QVlAKbG9jYWwgU2VsZWN0UGxheWVyID0gVGFicy5QVlA6QWRkRHJvcGRvd24oIlNlbGVjdFBsYXllciIsIHsKICAgIFRpdGxlID0gIlNlbGVjdCBQbGF5ZXIiLAogICAgVmFsdWVzID0ge30sCiAgICBNdWx0aSA9IGZhbHNlLAogICAgRGVmYXVsdCA9IG5pbCwKfSkKCmxvY2FsIGZ1bmN0aW9uIFVwZGF0ZURyb3Bkb3duKCkKICAgIGxvY2FsIHBsYXllck5hbWVzID0ge30KICAgIGZvciBfLCB2IGluIGlwYWlycyhnYW1lLlBsYXllcnM6R2V0UGxheWVycygpKSBkbwogICAgICAgIGlmIHYgfj0gZ2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyIHRoZW4KICAgICAgICAgICAgdGFibGUuaW5zZXJ0KHBsYXllck5hbWVzLCB2Lk5hbWUpCiAgICAgICAgZW5kCiAgICBlbmQKICAgIFNlbGVjdFBsYXllcjpTZXRWYWx1ZXMocGxheWVyTmFtZXMpCmVuZAoKZ2FtZS5QbGF5ZXJzLlBsYXllckFkZGVkOkNvbm5lY3QoVXBkYXRlRHJvcGRvd24pCmdhbWUuUGxheWVycy5QbGF5ZXJSZW1vdmluZzpDb25uZWN0KFVwZGF0ZURyb3Bkb3duKQpVcGRhdGVEcm9wZG93bigpCgpsb2NhbCBTcGVjdGF0ZVBsYXllciA9IFRhYnMuUFZQOkFkZFRvZ2dsZSgiU3BlY3RhdGVQbGF5ZXIiLCB7CiAgICBUaXRsZSA9ICJTcGVjdGF0ZSBQbGF5ZXIiLAogICAgRGVmYXVsdCA9IGZhbHNlLAogICAgQ2FsbGJhY2sgPSBmdW5jdGlvbihTcGVjdGF0ZVBsYXllckJvb2xlYW4pCiAgICAgICAgLS0gaWYgU3BlY3RhdGVQbGF5ZXJCb29sZWFuIHRoZW4KICAgICAgICAtLSAgICAgbG9jYWwgc2VsZWN0ZWRQbGF5ZXIgPSBTZWxlY3RQbGF5ZXIuVmFsdWUKICAgICAgICAtLSAgICAgaWYgc2VsZWN0ZWRQbGF5ZXIgdGhlbgogICAgICAgIC0tICAgICAgICAgbG9jYWwgdGFyZ2V0UGxheWVyID0gZ2FtZS5QbGF5ZXJzOkZpbmRGaXJzdENoaWxkKHNlbGVjdGVkUGxheWVyKQogICAgICAgIC0tICAgICAgICAgaWYgdGFyZ2V0UGxheWVyIGFuZCB0YXJnZXRQbGF5ZXIuQ2hhcmFjdGVyIHRoZW4KICAgICAgICAtLSAgICAgICAgICAgICBsb2NhbCBodW1hbm9pZCA9IHRhcmdldFBsYXllci5DaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGQoIkh1bWFub2lkIikKICAgICAgICAtLSAgICAgICAgICAgICBpZiBodW1hbm9pZCB0aGVuCiAgICAgICAgLS0gICAgICAgICAgICAgICAgIGdhbWUuV29ya3NwYWNlLkNhbWVyYS5DYW1lcmFTdWJqZWN0ID0gaHVtYW5vaWQKICAgICAgICAtLSAgICAgICAgICAgICBlbmQKICAgICAgICAtLSAgICAgICAgIGVuZAogICAgICAgIC0tICAgICBlbmQKICAgICAgICAtLSBlbHNlCiAgICAgICAgLS0gICAgIGdhbWUuV29ya3NwYWNlLkNhbWVyYS5DYW1lcmFTdWJqZWN0ID0gZ2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLkNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWQiKQogICAgICAgIC0tIGVuZAogICAgZW5kCn0pCgoKbG9jYWwgVHdlZW5Ub1BsYXllciA9IFRhYnMuUFZQOkFkZFRvZ2dsZSgiVHdlZW5Ub1BsYXllciIsIHsKICAgIFRpdGxlID0gIlR3ZWVuIFRvIFBsYXllciIsCiAgICBEZWZhdWx0ID0gZmFsc2UsCiAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKFR3ZWVuVG9QbGF5ZXJCb29sZWFuKQogICAgICAgIC0tIGxvY2FsIHNlbGVjdGVkUGxheWVyID0gU2VsZWN0UGxheWVyLlZhbHVlCiAgICAgICAgLS0gaWYgc2VsZWN0ZWRQbGF5ZXIgYW5kIFR3ZWVuVG9QbGF5ZXJCb29sZWFuIHRoZW4KICAgICAgICAtLSAgICAgbG9jYWwgdGFyZ2V0UGxheWVyID0gZ2FtZS5QbGF5ZXJzOkZpbmRGaXJzdENoaWxkKHNlbGVjdGVkUGxheWVyKQogICAgICAgIC0tICAgICBpZiB0YXJnZXRQbGF5ZXIgYW5kIHRhcmdldFBsYXllci5DaGFyYWN0ZXIgdGhlbgogICAgICAgIC0tICAgICAgICAgbG9jYWwgaHVtYW5vaWRSb290UGFydCA9IHRhcmdldFBsYXllci5DaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGQoIkh1bWFub2lkUm9vdFBhcnQiKQogICAgICAgIC0tICAgICAgICAgaWYgaHVtYW5vaWRSb290UGFydCB0aGVuCiAgICAgICAgLS0gICAgICAgICAgICAgcmVwZWF0IHRhc2sud2FpdCgpCiAgICAgICAgLS0gICAgICAgICAgICAgICAgIGdhbWUuUGxheWVycy5Mb2NhbFBsYXllci5DaGFyYWN0ZXIuSHVtYW5vaWRSb290UGFydC5DRnJhbWUgPSBodW1hbm9pZFJvb3RQYXJ0LkNGcmFtZQogICAgICAgIC0tICAgICAgICAgICAgIHVudGlsIG5vdCBUd2VlblRvUGxheWVyQm9vbGVhbgogICAgICAgIC0tICAgICAgICAgZW5kCiAgICAgICAgLS0gICAgIGVuZAogICAgICAgIC0tIGVuZAogICAgZW5kCn0pCgpsb2NhbCBBaW1ib3RQbGF5ZXIgPSBUYWJzLlBWUDpBZGRUb2dnbGUoIkFpbWJvdFBsYXllciIsIHtUaXRsZSA9ICJBaW1ib3QgUGxheWVyIiwgRGVmYXVsdCA9IGZhbHNlLCBDYWxsYmFjayA9IGZ1bmN0aW9uKCllbmR9KQpsb2NhbCBBaW1OZWFyUGxheWVyID0gVGFicy5QVlA6QWRkVG9nZ2xlKCJBaW1OZWFyUGxheWVyIiwge1RpdGxlID0gIkFpbSBOZWFyIFBsYXllciIsIERlZmF1bHQgPSBmYWxzZSwgQ2FsbGJhY2sgPSBmdW5jdGlvbigpZW5kfSkKbG9jYWwgQXV0b0tpbGxQbGF5ZXIgPSBUYWJzLlBWUDpBZGRUb2dnbGUoIkF1dG9LaWxsUGxheWVyIiwge1RpdGxlID0gIkF1dG8gS2lsbCBQbGF5ZXIiLCBEZWZhdWx0ID0gZmFsc2UsIENhbGxiYWNrID0gZnVuY3Rpb24oKWVuZH0pCgotLVNlbGVjdFBsYXllcjpPbkNoYW5nZWQoZnVuY3Rpb24oc2VsZWN0ZWRQbGF5ZXIpCi0tICAgIGxvY2FsIHRhcmdldFBsYXllciA9IGdhbWUuUGxheWVyczpGaW5kRmlyc3RDaGlsZChzZWxlY3RlZFBsYXllcikKLS0gICAgaWYgdGFyZ2V0UGxheWVyIGFuZCB0YXJnZXRQbGF5ZXIuQ2hhcmFjdGVyIHRoZW4KLS0gICAgICAgIGxvY2FsIHJvb3RQYXJ0ID0gdGFyZ2V0UGxheWVyLkNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWRSb290UGFydCIpCi0tICAgICAgICBpZiByb290UGFydCBhbmQgZ2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLkNoYXJhY3RlciB0aGVuCi0tICAgICAgICAgICAgbG9jYWwgbG9jYWxSb290ID0gZ2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLkNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWRSb290UGFydCIpCi0tICAgICAgICAgICAgaWYgbG9jYWxSb290IHRoZW4KLS0gICAgICAgICAgICAgICAgbG9jYWwgdGFyZ2V0Q0ZyYW1lID0gcm9vdFBhcnQuQ0ZyYW1lCi0tICAgICAgICAgICAgICAgIC0tRGkgY2h1eeG7g24gbmfGsOG7nWkgY2jGoWkgdOG7m2kgduG7iyB0csOtIG3hu5tpIChi4buPIGNvbW1lbnQgZMOybmcgZMaw4bubaSDEkeG7gyBz4butIGThu6VuZykKICAgICAgICAtLWdhbWUuUGxheWVycy5Mb2NhbFBsYXllci5DaGFyYWN0ZXIuSHVtYW5vaWRSb290UGFydC5DRnJhbWUgPSB0YXJnZXRDRnJhbWUKLS0gICAgICAgICAgICBlbmQKLS0gICAgICAgIGVuZAotLSAgICBlbmQKLS1lbmQpCgotLWdhbWUuUGxheWVycy5QbGF5ZXJBZGRlZDpDb25uZWN0KGZ1bmN0aW9uKClTZWxlY3RQbGF5ZXI6U2V0VmFsdWVzKEdldFBsYXllcnMoKSllbmQpCi0tZ2FtZS5QbGF5ZXJzLlBsYXllclJlbW92aW5nOkNvbm5lY3QoZnVuY3Rpb24oKVNlbGVjdFBsYXllcjpTZXRWYWx1ZXMoR2V0UGxheWVycygpKWVuZCkKCi0tVFJBVkVMClRhYnMuVHJhdmVsOkFkZEJ1dHRvbih7CiAgICBUaXRsZSA9ICJTZXJ2ZXIiLAogICAgQ2FsbGJhY2sgPSBmdW5jdGlvbigpCiAgICAgICAgV2luZG93OkRpYWxvZyh7CiAgICAgICAgICAgIFRpdGxlID0gIkNIT09TRSBPTkUiLAogICAgICAgICAgICBDb250ZW50ID0gIiIsCiAgICAgICAgICAgIEJ1dHRvbnMgPSB7ewogICAgICAgICAgICBUaXRsZSA9ICJIb3AgU2VydmVyIiwKICAgICAgICAgICAgICAgIENhbGxiYWNrID0gZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgICAgIGxvY2FsIHN1Y2Nlc3MsIGVycm9yID0gcGNhbGwoZnVuY3Rpb24oKSBIb3BTZXJ2ZXIoZ2V0Z2VudigpLkxvY2FsQ29uZmlnLlNldHRpbmdzWyJNYXggUGxheWVycyBIb3AiXSkgZW5kKQogICAgICAgICAgICAgICAgICAgIGlmIHN1Y2Nlc3MgdGhlbiBGbHVlbnQ6Tm90aWZ5KHtUaXRsZSA9ICJOb3RpZmljYXRpb24iLCBDb250ZW50ID0gIkhvcHBpbmcgc2VydmVyIiwgU3ViQ29udGVudCA9ICJUZWxlcG9yaW5nLCBwbGVhc2Ugd2FpdCIsIER1cmF0aW9uID0gMX0pCiAgICAgICAgICAgICAgICAgICAgZWxzZSBGbHVlbnQ6Tm90aWZ5KHtUaXRsZSA9ICJOb3RpZmljYXRpb24iLCBDb250ZW50ID0gIkVycm9yIHdoaWxlIGhvcHBpbmcgc2VydmVyIiwgU3ViQ29udGVudCA9IGVycm9yLCBEdXJhdGlvbiA9IDF9KQogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAge1RpdGxlID0gIlJlam9pbiIsCiAgICAgICAgICAgICAgICAgICAgQ2FsbGJhY2sgPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgICAgICAgICAgIEZsdWVudDpOb3RpZnkoe1RpdGxlID0gIk5vdGlmaWNhdGlvbiIsIENvbnRlbnQgPSAiUmVqb2luIHRoaXMgc2VydmVyIiwgU3ViQ29udGVudCA9ICJUZWxlcG9yaW5nLCBwbGVhc2Ugd2FpdCIsIER1cmF0aW9uID0gMX0pCiAgICAgICAgICAgICAgICAgICAgICAgIGdhbWU6R2V0U2VydmljZSgiVGVsZXBvcnRTZXJ2aWNlIik6VGVsZXBvcnRUb1BsYWNlSW5zdGFuY2UoZ2FtZS5QbGFjZUlkLCBnYW1lLkpvYklkLCBnYW1lLlBsYXllcnMuTG9jYWxQbGF5ZXIpCiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAge1RpdGxlID0gIkNhbmNlbCJ9CiAgICAgICAgICAgIH0KICAgICAgICB9KQogICAgZW5kCn0pClRhYnMuVHJhdmVsOkFkZEJ1dHRvbih7CiAgICBUaXRsZSA9ICJUcmF2ZWwgc2VhIiwKICAgIENhbGxiYWNrID0gZnVuY3Rpb24oKQogICAgICAgIGxvY2FsIGJ1dHRvbnMgPSB7fQogICAgICAgIGlmIGdhbWUuUGxhY2VJZCB+PSAyNzUzOTE1NTQ5IHRoZW4gdGFibGUuaW5zZXJ0KGJ1dHRvbnMsIHtUaXRsZSA9ICJTZWEgMSIsIENhbGxiYWNrID0gZnVuY3Rpb24oKSBnYW1lOkdldFNlcnZpY2UoIlJlcGxpY2F0ZWRTdG9yYWdlIikuUmVtb3Rlcy5Db21tRl86SW52b2tlU2VydmVyKCJUcmF2ZWxNYWluIikKICAgICAgICAgICAgICAgIEZsdWVudDpOb3RpZnkoe1RpdGxlID0gIk5vdGlmaWNhdGlvbiIsIENvbnRlbnQgPSAiVHJhdmVsaW5nIHRvIFNlYSAxIiwgU3ViQ29udGVudCA9ICJQbGVhc2Ugd2FpdC4uLiIsIER1cmF0aW9uID0gMX0pCiAgICAgICAgICAgIGVuZH0pCiAgICAgICAgZW5kCiAgICAgICAgaWYgZ2FtZS5QbGFjZUlkIH49IDQ0NDIyNzIxODMgdGhlbiB0YWJsZS5pbnNlcnQoYnV0dG9ucywge1RpdGxlID0gIlNlYSAyIiwgQ2FsbGJhY2sgPSBmdW5jdGlvbigpIGdhbWU6R2V0U2VydmljZSgiUmVwbGljYXRlZFN0b3JhZ2UiKS5SZW1vdGVzLkNvbW1GXzpJbnZva2VTZXJ2ZXIoIlRyYXZlbERyZXNzcm9zYSIpCiAgICAgICAgICAgICAgICBGbHVlbnQ6Tm90aWZ5KHtUaXRsZSA9ICJOb3RpZmljYXRpb24iLCBDb250ZW50ID0gIlRyYXZlbGluZyB0byBTZWEgMiIsIFN1YkNvbnRlbnQgPSAiUGxlYXNlIHdhaXQuLi4iLCBEdXJhdGlvbiA9IDF9KQogICAgICAgICAgICBlbmR9KQogICAgICAgIGVuZAogICAgICAgIGlmIGdhbWUuUGxhY2VJZCB+PSA3NDQ5NDIzNjM1IHRoZW4gdGFibGUuaW5zZXJ0KGJ1dHRvbnMsIHtUaXRsZSA9ICJTZWEgMyIsIENhbGxiYWNrID0gZnVuY3Rpb24oKSBnYW1lOkdldFNlcnZpY2UoIlJlcGxpY2F0ZWRTdG9yYWdlIikuUmVtb3Rlcy5Db21tRl86SW52b2tlU2VydmVyKCJUcmF2ZWxab3UiKQogICAgICAgICAgICAgICAgRmx1ZW50Ok5vdGlmeSh7VGl0bGUgPSAiTm90aWZpY2F0aW9uIiwgQ29udGVudCA9ICJUcmF2ZWxpbmcgdG8gU2VhIDMiLCBTdWJDb250ZW50ID0gIlBsZWFzZSB3YWl0Li4uIiwgRHVyYXRpb24gPSAxfSkKICAgICAgICAgICAgZW5kfSkKICAgICAgICBlbmQKICAgICAgICB0YWJsZS5pbnNlcnQoYnV0dG9ucywge1RpdGxlID0gIkNhbmNlbCJ9KQogICAgICAgIFdpbmRvdzpEaWFsb2coewogICAgICAgICAgICBUaXRsZSA9ICJDSE9PU0UgT05FIiwKICAgICAgICAgICAgQ29udGVudCA9ICJXaGF0IHNlYSB3b3VsZCB5b3UgbGlrZSB0byB0cmF2ZWwgdG8/IiwKICAgICAgICAgICAgQnV0dG9ucyA9IGJ1dHRvbnMKICAgICAgICB9KQogICAgZW5kCn0pCgpUYWJzLlRyYXZlbDpBZGRCdXR0b24oewogICAgVGl0bGUgPSAiU3RvcCBUd2VlbiIsCiAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKCkKICAgICAgICBUd2VlbihmYWxzZSkKICAgIGVuZAp9KQoKVGFicy5UcmF2ZWw6QWRkRHJvcGRvd24oIlR3ZWVuVG9Jc2xhbmQiLCB7CiAgICBUaXRsZSA9ICJTZWxlY3QgSXNsYW5kIiwKICAgIFZhbHVlcyA9IChmdW5jdGlvbigpCiAgICAgICAgbG9jYWwgSXNsYW5kcyA9IHt9CiAgICAgICAgZm9yIGkgaW4gcGFpcnMoQ0ZyYW1lSXNsYW5kcykgZG8KICAgICAgICAgICAgdGFibGUuaW5zZXJ0KElzbGFuZHMsIGkpCiAgICAgICAgZW5kCiAgICAgICAgdGFibGUuc29ydChJc2xhbmRzKQogICAgICAgIHJldHVybiBJc2xhbmRzCiAgICBlbmQpKCksCiAgICBNdWx0aSA9IGZhbHNlLAogICAgRGVmYXVsdCA9IG5pbCwKICAgIENhbGxiYWNrID0gZnVuY3Rpb24oQ0ZyYW1lSXNsYW5kVmFsdWUpCiAgICAgICAgaWYgQ0ZyYW1lSXNsYW5kVmFsdWUgdGhlbgogICAgICAgICAgICBGbHVlbnQuT3B0aW9ucy5Ud2VlblRvSXNsYW5kOlNldFZhbHVlKG5pbCkgdGFzay53YWl0KCkgRmx1ZW50Lk9wdGlvbnMuVHdlZW5Ub0lzbGFuZDpDbG9zZSgpIFR3ZWVuKGZhbHNlKQogICAgICAgICAgICBsb2NhbCBwbGFjZUlkID0gZ2FtZS5QbGFjZUlkCiAgICAgICAgICAgIGxvY2FsIHRhcmdldENGcmFtZSA9IENGcmFtZUlzbGFuZHNbQ0ZyYW1lSXNsYW5kVmFsdWVdCgogICAgICAgICAgICBpZiBDRnJhbWVJc2xhbmRWYWx1ZSA9PSAiU2t5IDJzdCBGbG9vciIgb3IgQ0ZyYW1lSXNsYW5kVmFsdWUgPT0gIlNreSAzc3QgRmxvb3IiIG9yIENGcmFtZUlzbGFuZFZhbHVlID09ICJVbmRlcndhdGVyIENpdHkgW0VYSVRdIiBvciBDRnJhbWVJc2xhbmRWYWx1ZSA9PSAiVW5kZXJ3YXRlciBDaXR5IFtFTlRSQU5DRV0iIHRoZW4KICAgICAgICAgICAgICAgIFRlbGVwb3J0KENGcmFtZUlzbGFuZHNbQ0ZyYW1lSXNsYW5kVmFsdWVdKQogICAgICAgICAgICBlbmQKICAgICAgICAgICAgaWYgcGxhY2VJZCA9PSAyNzUzOTE1NTQ5IHRoZW4KICAgICAgICAgICAgICAgIGlmIENGcmFtZUlzbGFuZFZhbHVlID09ICJTa3kgMXN0IEZsb29yIiB0aGVuCiAgICAgICAgICAgICAgICAgICAgaWYgR2V0RGlzdGFuY2UoQ0ZyYW1lSXNsYW5kc1tDRnJhbWVJc2xhbmRWYWx1ZV0pID4gNjAwMCB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIFRlbGVwb3J0KENGcmFtZUlzbGFuZHNbIlNreSAyc3QgRmxvb3IiXSkKICAgICAgICAgICAgICAgICAgICAgICAgcmVwZWF0IHRhc2sud2FpdCgpIHVudGlsIEdldERpc3RhbmNlKHRhcmdldENGcmFtZSkgPCA2MDAwCiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgVHdlZW4oQ0ZyYW1lSXNsYW5kc1tDRnJhbWVJc2xhbmRWYWx1ZV0pCiAgICAgICAgICAgICAgICBlbHNlaWYgQ0ZyYW1lSXNsYW5kVmFsdWUgPT0gIkZvdW50YWluIENpdHkiIHRoZW4KICAgICAgICAgICAgICAgIGVsc2VpZiBDRnJhbWVJc2xhbmRWYWx1ZSA9PSAiUHJpc29uIiB0aGVuCiAgICAgICAgICAgICAgICAgICAgaWYgR2V0RGlzdGFuY2UoQ0ZyYW1lSXNsYW5kc1siVW5kZXJ3YXRlciBDaXR5IFtFWElUXSJdKSA+IDYwMDAgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICBUZWxlcG9ydChDRnJhbWVJc2xhbmRzWyJVbmRlcndhdGVyIENpdHkgW0VYSVRdIl0pCiAgICAgICAgICAgICAgICAgICAgICAgIHJlcGVhdCB0YXNrLndhaXQoKSB1bnRpbCBHZXREaXN0YW5jZSh0YXJnZXRDRnJhbWUpIDwgNjAwMAogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgIFR3ZWVuKENGcmFtZUlzbGFuZHNbQ0ZyYW1lSXNsYW5kVmFsdWVdKQogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIFR3ZWVuKHRhcmdldENGcmFtZSkKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbHNlaWYgcGxhY2VJZCA9PSA0NDQyMjcyMTgzIHRoZW4KICAgICAgICAgICAgZWxzZWlmIHBsYWNlSWQgPT0gNzQ0OTQyMzYzNSB0aGVuCiAgICAgICAgICAgICAgICBpZiBDRnJhbWVJc2xhbmRWYWx1ZSA9PSAiQ2FzdGxlIE9uIFRoZSBTZWEiIG9yIENGcmFtZUlzbGFuZFZhbHVlID09ICJNYW5zaW9uIiB0aGVuCiAgICAgICAgICAgICAgICAgICAgVGVsZXBvcnQodGFyZ2V0Q0ZyYW1lKQogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIFR3ZWVuKHRhcmdldENGcmFtZSkKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICBUd2VlbihDRnJhbWVJc2xhbmRzW0NGcmFtZUlzbGFuZFZhbHVlXSkKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICBlbmQKfSkKClRhYnMuVHJhdmVsOkFkZERyb3Bkb3duKCJUd2VlblRvT3RoZXJJc2xhbmQiLCB7CiAgICBUaXRsZSA9ICJUd2VlbiBUbyBPdGhlciBJc2xhbmQiLAogICAgVmFsdWVzID0gKGZ1bmN0aW9uKCkKICAgICAgICBsb2NhbCBJc2xhbmRzID0ge30KICAgICAgICBmb3IgaSBpbiBwYWlycyhPdGhlcklzbGFuZHMpIGRvCiAgICAgICAgICAgIHRhYmxlLmluc2VydChJc2xhbmRzLCBpKQogICAgICAgIGVuZAogICAgICAgIHRhYmxlLnNvcnQoSXNsYW5kcykKICAgICAgICByZXR1cm4gSXNsYW5kcwogICAgZW5kKSgpLAogICAgTXVsdGkgPSBmYWxzZSwKICAgIERlZmF1bHQgPSBuaWwsCiAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKENGcmFtZUlzbGFuZFZhbHVlKQogICAgICAgIGlmIENGcmFtZUlzbGFuZFZhbHVlIHRoZW4KICAgICAgICAgICAgdGFzay53YWl0KCkKICAgICAgICAgICAgRmx1ZW50Lk9wdGlvbnMuVHdlZW5Ub090aGVySXNsYW5kOlNldFZhbHVlKG5pbCkKICAgICAgICAgICAgRmx1ZW50Lk9wdGlvbnMuVHdlZW5Ub090aGVySXNsYW5kOkNsb3NlKCkKICAgICAgICAgICAgVHdlZW4oT3RoZXJJc2xhbmRzW0NGcmFtZUlzbGFuZFZhbHVlXSkKICAgICAgICBlbmQKICAgIGVuZAp9KQoKVGFicy5UcmF2ZWw6QWRkSW5wdXQoIkVudGVySm9iSWQiLCB7CiAgICBUaXRsZSA9ICJFbnRlciBKb2JJZCIsCiAgICBEZWZhdWx0ID0gIiIsCiAgICBQbGFjZWhvbGRlciA9ICJKb2JJZCIsCiAgICBOdW1lcmljID0gZmFsc2UsCiAgICBGaW5pc2hlZCA9IHRydWUsCiAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKFZhbHVlKQogICAgICAgIGlmICNWYWx1ZSA9PSAzNiBhbmQgVmFsdWU6bWF0Y2goIl4leCV4JXgleCV4JXgleCV4JS0leCV4JXgleCUtJXgleCV4JXglLSV4JXgleCV4JS0leCV4JXgleCV4JXgleCV4JXgleCV4JXgkIikgdGhlbgogICAgICAgICAgICBpZiBnYW1lLkpvYklkID09IFZhbHVlIHRoZW4gRmx1ZW50Ok5vdGlmeSh7VGl0bGUgPSAiTm90aWZpY2F0aW9uIiwgQ29udGVudCA9ICJZb3UgYXJlIGFscmVhZHkgaW4gdGhpcyBKb2JJZCIsIFN1YkNvbnRlbnQgPSAiUGxlYXNlIGVudGVyIGEgZGlmZmVyZW50IEpvYklkIiwgRHVyYXRpb24gPSA1fSkKICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgV2luZG93OkRpYWxvZyh7CiAgICAgICAgICAgICAgICAgICAgVGl0bGUgPSAiTm90aWZpY2F0aW9uIiwKICAgICAgICAgICAgICAgICAgICBDb250ZW50ID0gIkFyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byB0ZWxlcG9ydCB0aGlzIEpvYklkPyIsCiAgICAgICAgICAgICAgICAgICAgQnV0dG9ucyA9IHsKICAgICAgICAgICAgICAgICAgICAgICAge1RpdGxlID0gIkNvbmZpcm0iLCBDYWxsYmFjayA9IGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZsdWVudDpOb3RpZnkoe1RpdGxlID0gIk5vdGlmaWNhdGlvbiIsIENvbnRlbnQgPSAiVGVsZXBvcnRpbmcgdG9cbiIgLi4gVmFsdWUsIFN1YkNvbnRlbnQgPSAiUGxlYXNlIHdhaXQuLi4iLCBEdXJhdGlvbiA9IDF9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZTpHZXRTZXJ2aWNlKCJUZWxlcG9ydFNlcnZpY2UiKTpUZWxlcG9ydFRvUGxhY2VJbnN0YW5jZShnYW1lLlBsYWNlSWQsIFZhbHVlLCBnYW1lLlBsYXllcnMuTG9jYWxQbGF5ZXIpCiAgICAgICAgICAgICAgICAgICAgICAgIGVuZH0sCiAgICAgICAgICAgICAgICAgICAgICAgIHtUaXRsZSA9ICJDYW5jZWwifQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIGVuZAogICAgICAgIGVsc2UKICAgICAgICAgICAgRmx1ZW50Ok5vdGlmeSh7CiAgICAgICAgICAgICAgICBUaXRsZSA9ICJOb3RpZmljYXRpb24iLAogICAgICAgICAgICAgICAgQ29udGVudCA9ICJJbnZhbGlkIEpvYklkOiBNdXN0IGJlIGEgdmFsaWQgVVVJRCEiLAogICAgICAgICAgICAgICAgU3ViQ29udGVudCA9ICJQbGVhc2UgZW50ZXIgYSB2YWxpZCBKb2JJZCIsCiAgICAgICAgICAgICAgICBEdXJhdGlvbiA9IDUKICAgICAgICAgICAgfSkKICAgICAgICBlbmQKICAgIGVuZAp9KQoKLS1TSE9QClRhYnMuU2hvcDpBZGREcm9wZG93bigiTWVsZWVGaWdodFYxIiwgewogICAgVGl0bGUgPSAiTWVsZWUgRmlnaHQgVjEiLAogICAgVmFsdWVzID0geyJEYXJrIFN0ZXAiLCAiRWxlY3RybyIsICJTaGFya21hbiBLYXJhdGUiLCAiRHJhZ29uIENsYXciLCAiU3VwZXJodW1hbiJ9LAogICAgTXVsdGkgPSBmYWxzZSwgRGVmYXVsdCA9IG5pbCwgQ2FsbGJhY2sgPSBmdW5jdGlvbihTaG9wTWVsZWVWYWx1ZSkKICAgIGVuZAp9KQpUYWJzLlNob3A6QWRkRHJvcGRvd24oIk1lbGVlRmlnaHRWMiIsIHsKICAgIFRpdGxlID0gIk1lbGVlIEZpZ2h0IFYyIiwKICAgIFZhbHVlcyA9IHsiRGVhbHRoIFN0ZXAiLCAiRWxlY3RyaWMgQ2xhdyIsICJLYXJhdGUgU2hhcmttYW4iLCAiRHJhZ29uIFRhbG9uIiwgIkdvZCBIdW1hbiJ9LAogICAgTXVsdGkgPSBmYWxzZSwgRGVmYXVsdCA9IG5pbCwgQ2FsbGJhY2sgPSBmdW5jdGlvbihTaG9wTWVsZWVWYWx1ZSkKICAgIGVuZAp9KQpUYWJzLlNob3A6QWRkRHJvcGRvd24oIlN3b3JkIiwgewogICAgVGl0bGUgPSAiU3dvcmQiLAogICAgVmFsdWVzID0geyJLYXRhbmEiLCAiQ3V0bGFzcyIsICJJcm9uIE1hY2UiLCAiRHVhbCBLYXRhbmEiLCAiVHJpcGxlIEthdGFuYSIsICJQaXBlIiwgIkJpc2VudG8iLCAiRHVhbC1IZWFkZWQgQmxhZGUiLCAiU291bCBDYW5lIn0sCiAgICBNdWx0aSA9IGZhbHNlLCBEZWZhdWx0ID0gbmlsLCBDYWxsYmFjayA9IGZ1bmN0aW9uKFNob3BTd29yZFZhbHVlKQogICAgZW5kCn0pClRhYnMuU2hvcDpBZGREcm9wZG93bigiR3VuIiwgewogICAgVGl0bGUgPSAiR3VuIiwKICAgIFZhbHVlcyA9IHsiU2xpbmdzaG90IiwgIk11c2tldCIsICJGbGludGxvY2siLCAiUmVmaW5lZCBTbGluZ3Nob3QiLCAiUmVmaW5lZCBGbGludGxvY2siLCAiS2FidWNoYSJ9LAogICAgTXVsdGkgPSBmYWxzZSwgRGVmYXVsdCA9IG5pbCwgQ2FsbGJhY2sgPSBmdW5jdGlvbihTaG9wR3VuVmFsdWUpCiAgICBlbmQKfSkKVGFicy5TaG9wOkFkZERyb3Bkb3duKCJBY2Nlc3NvcmllcyIsIHsKICAgIFRpdGxlID0gIkFjY2Vzc29yaWVzIiwKICAgIFZhbHVlcyA9IHsiQmxhY2sgQ2FwZSIsICJTd29yZHNtYW4gSGF0IiwgIlRvbW9lIFJpbmcifSwKICAgIE11bHRpID0gZmFsc2UsIERlZmF1bHQgPSBuaWwsIENhbGxiYWNrID0gZnVuY3Rpb24oU2hvcEFjY2Vzc29yaWVzVmFsdWUpCiAgICBlbmQKfSkKVGFicy5TaG9wOkFkZEJ1dHRvbih7CiAgICBUaXRsZSA9ICJSYWNlIiwKICAgIENhbGxiYWNrID0gZnVuY3Rpb24oKQogICAgICAgIFdpbmRvdzpEaWFsb2coewogICAgICAgICAgICBUaXRsZSA9ICJDSE9PU0UgT05FIiwKICAgICAgICAgICAgQ29udGVudCA9ICJ3aGF0IHJhY2Ugd291bGQgeW91IGxpa2UgY2hhbmdlIHRvPyIsCiAgICAgICAgICAgIEJ1dHRvbnMgPSB7CiAgICAgICAgICAgICAgICB7VGl0bGUgPSAiQ3lib3JnIiwgQ2FsbGJhY2sgPSBmdW5jdGlvbigpZW5kfSwKICAgICAgICAgICAgICAgIHtUaXRsZSA9ICJHaG91bCIsIENhbGxiYWNrID0gZnVuY3Rpb24oKWVuZH0sCiAgICAgICAgICAgICAgICB7VGl0bGUgPSAiQ2FuY2VsIn0KICAgICAgICAgICAgfQogICAgICAgIH0pCiAgICBlbmQKfSkKLS1GcnVpdHNBbmRSYWlkClRhYnMuRnJ1aXRzQW5kUmFpZDpBZGRQYXJhZ3JhcGgoe1RpdGxlID0gIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUmFpZCJ9KQpUYWJzLkZydWl0c0FuZFJhaWQ6QWRkRHJvcGRvd24oIkNoaXBSYWlkU2VsbGVjdCIsIHsKICAgIFRpdGxlID0gIkNoaXAgUmFpZCBTZWxsZWN0IiwKICAgIFZhbHVlcyA9IHsiRmxhbWUiLCAiSWNlIiwgIlF1YWtlIiwgIkxpZ2h0IiwgIkRhcmsiLCAiU3RyaW5nIiwgIlJ1bWJsZSIsICJNYWdtYSIsICJIdW1hbjogQnVkZGhhIiwgIlNhbmQiLCAiQmlyZDogUGhvZW5peCJ9LAogICAgTXVsdGkgPSBmYWxzZSwKICAgIERlZmF1bHQgPSBnZXRnZW52KCkuTG9jYWxDb25maWcuUmFpZFsiQ2hpcCBSYWlkIFNlbGxlY3RlZCJdLAogICAgQ2FsbGJhY2sgPSBmdW5jdGlvbihDaGlwUmFpZFNlbGxlY3RlZCkKICAgICAgICBnZXRnZW52KCkuTG9jYWxDb25maWcuUmFpZFsiQ2hpcCBSYWlkIFNlbGxlY3RlZCJdID0gQ2hpcFJhaWRTZWxsZWN0ZWQKICAgICAgICBzYXZlU2V0dGluZ3MoKQogICAgZW5kCn0pClRhYnMuRnJ1aXRzQW5kUmFpZDpBZGRQYXJhZ3JhcGgoe1RpdGxlID0gIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRnJ1aXRzIn0pClRhYnMuRnJ1aXRzQW5kUmFpZDpBZGREcm9wZG93bigiRnJ1aXRTZWxsZWN0IiwgewogICAgVGl0bGUgPSAiRnJ1aXQgU2VsbGVjdCIsCiAgICBWYWx1ZXMgPSB7IkJvbWIgRnJ1aXQiLCAiU3Bpa2UgRnJ1aXQiLCAiQ2hvcCBGcnVpdCIsICJTcHJpbmcgRnJ1aXQiLCAiS2lsbyBGcnVpdCIsICJTbW9rZSBGcnVpdCIsICJTcGluIEZydWl0IiwgIkZsYW1lIEZydWl0IiwgIkJpcmQ6IEZhbGNvbiBGcnVpdCIsICJJY2UgRnJ1aXQiLCAiU2FuZCBGcnVpdCIsICJEYXJrIEZydWl0IiwgIlJldml2ZSBGcnVpdCIsICJEaWFtb25kIEZydWl0IiwgIkxpZ2h0IEZydWl0IiwgIkxvdmUgRnJ1aXQiLCAiUnViYmVyIEZydWl0IiwgIkJhcnJpZXIgRnJ1aXQiLCAiTWFnbWEgRnJ1aXQiLCAiUG9ydGFsIEZydWl0IiwgIlF1YWtlIEZydWl0IiwgIkh1bWFuLUh1bWFuOiBCdWRkaGEgRnJ1aXQiLCAiU3BpZGVyIEZydWl0IiwgIkJpcmQ6IFBob2VuaXggRnJ1aXQiLCAiUnVtYmxlIEZydWl0IiwgIlBhdyBGcnVpdCIsICJHcmF2aXR5IEZydWl0IiwgIkRvdWdoIEZydWl0IiwgIlNoYWRvdyBGcnVpdCIsICJWZW5vbSBGcnVpdCIsICJDb250cm9sIEZydWl0IiwgIlNwaXJpdCBGcnVpdCIsICJEcmFnb24gRnJ1aXQifSwKICAgIE11bHRpID0gZmFsc2UsCiAgICBEZWZhdWx0ID0gZ2V0Z2VudigpLkxvY2FsQ29uZmlnLkZydWl0c1siRnJ1aXQgU2VsbGVjdGVkIl0gb3IgbmlsLAogICAgQ2FsbGJhY2sgPSBmdW5jdGlvbihGcnVpdFNlbGxlY3RlZCkKICAgICAgICBnZXRnZW52KCkuTG9jYWxDb25maWcuRnJ1aXRzWyJGcnVpdCBTZWxsZWN0ZWQiXSA9IEZydWl0U2VsbGVjdGVkCiAgICAgICAgc2F2ZVNldHRpbmdzKCkKICAgIGVuZAp9KQpUYWJzLkZydWl0c0FuZFJhaWQ6QWRkVG9nZ2xlKCJBdXRvQ29sbGVjdEZydWl0cyIsIHsKICAgIFRpdGxlID0gIkF1dG8gQ29sbGVjdCBGcnVpdHMiLAogICAgRGVmYXVsdCA9IGdldGdlbnYoKS5Mb2NhbENvbmZpZy5GcnVpdHNbIkF1dG8gQ29sbGVjdCBGcnVpdHMiXSwKICAgIENhbGxiYWNrID0gZnVuY3Rpb24oQXV0b0NvbGxlY3RGcnVpdHNCb29sZWFuKQogICAgICAgIGdldGdlbnYoKS5Mb2NhbENvbmZpZy5GcnVpdHNbIkF1dG8gQ29sbGVjdCBGcnVpdHMiXSA9IEF1dG9Db2xsZWN0RnJ1aXRzQm9vbGVhbgogICAgICAgIHNhdmVTZXR0aW5ncygpCiAgICBlbmQKfSkKVGFicy5GcnVpdHNBbmRSYWlkOkFkZFRvZ2dsZSgiQXV0b0J1eUZydWl0IiwgewogICAgVGl0bGUgPSAiQXV0byBCdXkgRnJ1aXQgW0ZSVUlUIFNFTExFQ1RdIiwKICAgIERlZmF1bHQgPSBnZXRnZW52KCkuTG9jYWxDb25maWcuRnJ1aXRzWyJBdXRvIEJ1eSBGcnVpdCJdLAogICAgQ2FsbGJhY2sgPSBmdW5jdGlvbihBdXRvQnV5RnJ1aXRCb29sZWFuKQogICAgICAgIGdldGdlbnYoKS5Mb2NhbENvbmZpZy5GcnVpdHNbIkF1dG8gQ29sbGVjdCBGcnVpdHMiXSA9IEF1dG9CdXlGcnVpdEJvb2xlYW4KICAgICAgICBzYXZlU2V0dGluZ3MoKQogICAgZW5kCn0pClRhYnMuRnJ1aXRzQW5kUmFpZDpBZGRUb2dnbGUoIkF1dG9FYXRGcnVpdCIsIHtUaXRsZSA9ICJBdXRvIEVhdCBGcnVpdCBbRlJVSVQgU0VMTEVDVF0iLAogICAgRGVmYXVsdCA9IGdldGdlbnYoKS5Mb2NhbENvbmZpZy5GcnVpdHNbIkF1dG8gRWF0IEZydWl0Il0sCiAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKEF1dG9FYXRGcnVpdEJvb2xlYW4pCiAgICAgICAgZ2V0Z2VudigpLkxvY2FsQ29uZmlnLkZydWl0c1siQXV0byBDb2xsZWN0IEZydWl0cyJdID0gQXV0b0VhdEZydWl0Qm9vbGVhbgogICAgICAgIHNhdmVTZXR0aW5ncygpCiAgICBlbmQKfSkKLS1UYWJzLkZydWl0c0FuZFJhaWQ6QWRkVG9nZ2xlKCJBdXRvQ29sbGVjdEZydWl0cyIsIHtUaXRsZSA9ICJBdXRvQ29sbGVjdEZydWl0cyIsIERlZmF1bCA9IGZhbHNlLCBDYWxsYmFjayA9IGZ1bmN0aW9uKCllbmR9KQotLVRhYnMuRnJ1aXRzQW5kUmFpZDpBZGRUb2dnbGUoIkF1dG9Db2xsZWN0RnJ1aXRzIiwge1RpdGxlID0gIkF1dG9Db2xsZWN0RnJ1aXRzIiwgRGVmYXVsdCA9IGZhbHNlLCBDYWxsYmFjID0gZnVuY3Rpb24oKWVuZH0pCi0tVGFicy5GcnVpdHNBbmRSYWlkOkFkZFRvZ2dsZSgiQXV0b0NvbGxlY3RGcnVpdHMiLCB7VGl0bGUgPSAiQXV0b0NvbGxlY3RGcnVpdHMiLCBEZWZhdWx0ID0gZmFsc2UsIENhbGxiYWMgPSBmdW5jdGlvbigpZW5kfQoKLS1NSUNTClRhYnMuTUlDUzpBZGRCdXR0b24oewogICAgVGl0bGUgPSAiSm9pbiBUZWFtIiwKICAgIENhbGxiYWNrID0gZnVuY3Rpb24oKQogICAgICAgIFdpbmRvdzpEaWFsb2coewogICAgICAgICAgICBUaXRsZSA9ICJDSE9PU0UgT05FIiwKICAgICAgICAgICAgQ29udGVudCA9ICJ3aGF0IFRlYW0gd291bGQgeW91IGxpa2UgY2hhbmdlIHRvPyIsCiAgICAgICAgICAgIEJ1dHRvbnMgPSB7CiAgICAgICAgICAgICAgICB7VGl0bGUgPSAiUGlyYXRlcyIsIENhbGxiYWNrID0gZnVuY3Rpb24oKWdhbWU6R2V0U2VydmljZSgiUmVwbGljYXRlZFN0b3JhZ2UiKS5SZW1vdGVzLkNvbW1GXzpJbnZva2VTZXJ2ZXIoIlNldFRlYW0iLCAiUGlyYXRlcyIpZW5kfSwKICAgICAgICAgICAgICAgIHtUaXRsZSA9ICJNYXJpbmVzIiwgQ2FsbGJhY2sgPSBmdW5jdGlvbigpZ2FtZTpHZXRTZXJ2aWNlKCJSZXBsaWNhdGVkU3RvcmFnZSIpLlJlbW90ZXMuQ29tbUZfOkludm9rZVNlcnZlcigiU2V0VGVhbSIsICJNYXJpbmVzIillbmR9LAogICAgICAgICAgICAgICAge1RpdGxlID0gIkNhbmNlbCJ9CiAgICAgICAgICAgIH0KICAgICAgICB9KQogICAgZW5kCn0pCgpsb2NhbCBFU1AgPSBUYWJzLk1JQ1M6QWRkRHJvcGRvd24oIkVTUCIsIHsKICAgIFRpdGxlID0gIkVTUCIsCiAgICBWYWx1ZXMgPSB7IlBsYXllcnMiLCAiSXNsYW5kIiwgIkNoZXN0IiwgIkZydWl0cyIsIkZsb3dlciIgfSwKICAgIE11bHRpID0gdHJ1ZSwgRGVmYXVsdCA9IHt9LAogICAgQ2FsbGJhY2sgPSBmdW5jdGlvbihFU1BWYWx1ZSkKICAgICAgICBzYXZlU2V0dGluZ3MoKQogICAgZW5kCn0pClRhYnMuTUlDUzpBZGRCdXR0b24oewogICAgVGl0bGUgPSAiQ29weSBKb2IgSUQiLAogICAgQ2FsbGJhY2sgPSBmdW5jdGlvbigpCiAgICAgICAgV2luZG93OkRpYWxvZyh7CiAgICAgICAgICAgIFRpdGxlID0gIkNvcHkgSm9iIElEIiwKICAgICAgICAgICAgQ29udGVudCA9ICJBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gY29weSB0aGUgSm9iIElEPyIsCiAgICAgICAgICAgIEJ1dHRvbnMgPSB7CiAgICAgICAgICAgICAgICB7VGl0bGUgPSAiQ29uZmlybSIsIENhbGxiYWNrID0gZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgICAgIGlmIHNldGNsaXBib2FyZCBhbmQgdHlwZShzZXRjbGlwYm9hcmQpID09ICJmdW5jdGlvbiIgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICBzZXRjbGlwYm9hcmQodG9zdHJpbmcoZ2FtZS5Kb2JJZCkpCiAgICAgICAgICAgICAgICAgICAgICAgIEZsdWVudDpOb3RpZnkoe1RpdGxlID0gIk5vdGlmaWNhdGlvbiIsIENvbnRlbnQgPSAiQ29waWVkIEpvYklkIHRvIGNsaXBib2FyZCIsIFN1YkNvbnRlbnQgPSBnYW1lLkpvYklkLCBEdXJhdGlvbiA9IDN9KQogICAgICAgICAgICAgICAgICAgIGVsc2UgRmx1ZW50Ok5vdGlmeSh7VGl0bGUgPSAiTm90aWZpY2F0aW9uIiwgQ29udGVudCA9ICJZb3VyIGV4ZWN1dG9yIGRvZXNuJ3Qgc3VwcG9ydCBzZXQgY2xpcGJvYXJkIGZ1bmN0aW9uIiwgRHVyYXRpb24gPSAzfSkKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGVuZH0sCiAgICAgICAgICAgICAgICB7VGl0bGUgPSAiQ2FuY2VsIn0KICAgICAgICAgICAgfQogICAgICAgIH0pCiAgICBlbmQKfSkKClRhYnMuTUlDUzpBZGREcm9wZG93bigiU2V0Y2xpcGJvYXJkQ29uZmlnIiwgewogICAgVGl0bGUgPSAiR2V0IENvbmZpZyIsCiAgICBWYWx1ZXMgPSB7Ik1haW4iLCAiUFZQIiwgIkNoZXN0cyIsICJLYWl0YW4ifSwKICAgIE11bHRpID0gZmFsc2UsCiAgICBEZWZhdWx0ID0gbmlsLAogICAgQ2FsbGJhY2sgPSBmdW5jdGlvbihTZXRjbGlwYm9hcmRDb25maWdWYWx1ZSkKICAgICAgICBsb2NhbCBHZW5lcmFsQ2xpcEJvYXJkID0gW1tfRy5TZXR0aW5ncyA9IHsKICAgIFsiTW9kZSJdID0gIk1haW4iOwogICAgWyJUZWFtIl0gPSAiUGlyYXRlcyI7CiAgICBbIkF1dG8gUmVqb2luIl0gPSBmYWxzZTsKfTsKXV0KICAgICAgICBsb2NhbCBDb25maWcgPSB7CiAgICAgICAgICAgIFsiTWFpbiJdID0gIiIsCiAgICAgICAgICAgIFsiUFZQIl0gPSBbW2dldGdlbnYoKS5TZXR0aW5nID0gewogICAgWyJNZWxlZSJdID0gewogICAgICAgIFsiRW5hYmxlIl0gPSB0cnVlOwogICAgICAgIFsiU2tpbGxzIl0gPSB7CiAgICAgICAgICAgIFsiWiJdICAgPSAgIHtbIkVuYWJsZSJdID0gZmFsc2U7ICAgWyJIb2xkIFRpbWUiXSA9IDA7ICBbIkRlbGF5Il0gPSAwfTsKICAgICAgICAgICAgWyJYIl0gICA9ICAge1siRW5hYmxlIl0gPSBmYWxzZTsgICBbIkhvbGQgVGltZSJdID0gMDsgIFsiRGVsYXkiXSA9IDB9OwogICAgICAgICAgICBbIkMiXSAgID0gICB7WyJFbmFibGUiXSA9IGZhbHNlOyAgIFsiSG9sZCBUaW1lIl0gPSAwOyAgWyJEZWxheSJdID0gMH07CiAgICAgICAgICAgIFsiQ2xpY2siXSA9IHtbIkVuYWJsZSJdID0gZmFsc2U7ICAgICAgICAgICAgICAgICAgICAgICBbIkRlbGF5Il0gPSAwfTsKICAgICAgICB9OwogICAgfTsKICAgIFsiQmxveCBGcnVpdCJdID0gewogICAgICAgIFsiRW5hYmxlIl0gPSBmYWxzZTsKICAgICAgICBbIlNraWxscyJdID0gewogICAgICAgICAgICBbIloiXSAgID0gICB7WyJFbmFibGUiXSA9IGZhbHNlOyAgIFsiSG9sZCBUaW1lIl0gPSAwOyAgWyJEZWxheSJdID0gMH07CiAgICAgICAgICAgIFsiWCJdICAgPSAgIHtbIkVuYWJsZSJdID0gZmFsc2U7ICAgWyJIb2xkIFRpbWUiXSA9IDA7ICBbIkRlbGF5Il0gPSAwfTsKICAgICAgICAgICAgWyJDIl0gICA9ICAge1siRW5hYmxlIl0gPSBmYWxzZTsgICBbIkhvbGQgVGltZSJdID0gMDsgIFsiRGVsYXkiXSA9IDB9OwogICAgICAgICAgICBbIlYiXSAgID0gICB7WyJFbmFibGUiXSA9IGZhbHNlOyAgIFsiSG9sZCBUaW1lIl0gPSAwOyAgWyJEZWxheSJdID0gMH07CiAgICAgICAgICAgIFsiRiJdICAgPSAgIHtbIkVuYWJsZSJdID0gZmFsc2U7ICAgWyJIb2xkIFRpbWUiXSA9IDA7ICBbIkRlbGF5Il0gPSAwfTsKICAgICAgICAgICAgWyJDbGljayJdID0ge1siRW5hYmxlIl0gPSBmYWxzZTsgICAgICAgICAgICAgICAgICAgICAgIFsiRGVsYXkiXSA9IDB9OwogICAgICAgIH07CiAgICB9OwogICAgWyJTd29yZCJdID0gewogICAgICAgIFsiRW5hYmxlIl0gPSBmYWxzZTsKICAgICAgICBbIlNraWxscyJdID0gewogICAgICAgICAgICBbIloiXSAgID0gICB7WyJFbmFibGUiXSA9IGZhbHNlOyAgIFsiSG9sZCBUaW1lIl0gPSAwOyAgWyJEZWxheSJdID0gMH07CiAgICAgICAgICAgIFsiWCJdICAgPSAgIHtbIkVuYWJsZSJdID0gZmFsc2U7ICAgWyJIb2xkIFRpbWUiXSA9IDA7ICBbIkRlbGF5Il0gPSAwfTsKICAgICAgICAgICAgWyJDbGljayJdID0ge1siRW5hYmxlIl0gPSBmYWxzZTsgICAgICAgICAgICAgICAgICAgICAgIFsiRGVsYXkiXSA9IDB9fTsKICAgIH07CiAgICBbIkd1biJdID0gewogICAgICAgIFsiRW5hYmxlIl0gPSBmYWxzZTsKICAgICAgICBbIlNraWxscyJdID0gewogICAgICAgICAgICBbIloiXSAgID0gICB7WyJFbmFibGUiXSA9IGZhbHNlOyAgIFsiSG9sZCBUaW1lIl0gPSAwOyAgWyJEZWxheSJdID0gMH07CiAgICAgICAgICAgIFsiWCJdICAgPSAgIHtbIkVuYWJsZSJdID0gZmFsc2U7ICAgWyJIb2xkIFRpbWUiXSA9IDA7ICBbIkRlbGF5Il0gPSAwfTsKICAgICAgICAgICAgWyJDbGljayJdID0ge1siRW5hYmxlIl0gPSBmYWxzZTsgICAgICAgICAgICAgICAgICAgICAgIFsiRGVsYXkiXSA9IDB9OwogICAgICAgIH07CiAgICB9Owp9O11dLAogICAgICAgICAgICBbIkNoZXN0cyJdID0gW1tnZXRnZW52KCkuU2V0dGluZ3MgPSB7CiAgICBbIlJlc2V0IEFmdGVyIENvbGxlY3QgQ2hlc3QiXSA9IDEwOwogICAgWyJTdG9wIElmIEhhdmUgU3BlY2lhbCBJdGVtIl0gPSB0cnVlOwogICAgWyJIb3AgU2VydmVyIl0gPSB7CiAgICAgICAgWyJIb3AgQWZ0ZXIgQ29sbGVjdCBDaGVzdCJdID0gewogICAgICAgICAgICBbIkVuYWJsZSJdID0gZmFsc2U7CiAgICAgICAgICAgIFsiTnVtYmVyIl0gPSA1fTsKICAgICAgICBbIkhvcCBJZiBUaGVyZSBJcyBObyBDaGVzdCJdID0gdHJ1ZQogICAgfTsKfTsKICAgICAgICAgICAgXV0sCiAgICAgICAgICAgIFsiS2FpdGFuIl0gPSAiIgogICAgICAgIH0KCiAgICAgICAgaWYgQ29uZmlnW1NldGNsaXBib2FyZENvbmZpZ1ZhbHVlXSB0aGVuCiAgICAgICAgICAgIFdpbmRvdzpEaWFsb2coewogICAgICAgICAgICAgICAgVGl0bGUgPSAiV2FybiIsCiAgICAgICAgICAgICAgICBDb250ZW50ID0gIkFyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBjb3B5IHRoZSBjb25maWc/ICIgLi4gIlsiIC4uIFNldGNsaXBib2FyZENvbmZpZ1ZhbHVlIC4uICJdIiwKICAgICAgICAgICAgICAgIEJ1dHRvbnMgPSB7CiAgICAgICAgICAgICAgICAgICAge1RpdGxlID0gIkNvbmZpcm0iLAogICAgICAgICAgICAgICAgICAgICAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZsdWVudC5PcHRpb25zLlNldGNsaXBib2FyZENvbmZpZzpDbG9zZSgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBGbHVlbnQuT3B0aW9ucy5TZXRjbGlwYm9hcmRDb25maWc6U2V0VmFsdWUobmlsKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgc2V0Y2xpcGJvYXJkIGFuZCB0eXBlKHNldGNsaXBib2FyZCkgPT0gImZ1bmN0aW9uIiB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0Y2xpcGJvYXJkKEdlbmVyYWxDbGlwQm9hcmQgLi4gQ29uZmlnW1NldGNsaXBib2FyZENvbmZpZ1ZhbHVlXSAuLiAiXG4iIC4uIFtbbG9hZHN0cmluZyhnYW1lOkh0dHBHZXQoImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS8iKSkoKSldXSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBGbHVlbnQ6Tm90aWZ5KHtUaXRsZSA9ICJOb3RpZmljYXRpb24iLCBDb250ZW50ID0gIkNvcHkgQ29uZmlnIFN1Y2Nlc3MiLCBTdWJDb250ZW50ID0gIkNvbmZpZzogIiAuLiBTZXRjbGlwYm9hcmRDb25maWdWYWx1ZSwgRHVyYXRpb24gPSAxfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgRmx1ZW50Ok5vdGlmeSh7VGl0bGUgPSAiTm90aWZpY2F0aW9uIiwgQ29udGVudCA9ICJDb3B5IENvbmZpZyBGYWlsZWQiLCBTdWJDb250ZW50ID0gIllvdXIgZXhlY3V0b3IgZG9lc24ndCBzdXBwb3J0IHNldCBjbGlwYm9hcmQgZnVuY3Rpb24iLCBEdXJhdGlvbiA9IDF9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAge1RpdGxlID0gIkNhbmNlbCJ9CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9KTsKICAgICAgICBlbmQKICAgIGVuZAp9KQoKLS1TRVRUSU5HUyBTQ1JJUFQKVGFicy5TZXR0aW5nc1NjcmlwdDpBZGREcm9wZG93bigiTWFzdGVySXRlbSIsIHsKICAgIFRpdGxlID0gIk1hc3RlciBTZXR0aW5nIiwKICAgIFZhbHVlcyA9IHsiQmxveCBGcnVpdHMiLCAiR3VuIn0sCiAgICBNdWx0aSA9IGZhbHNlLAogICAgRGVmYXVsdCA9IDEsCiAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKE1hc3RlcnlJdGVtVmFsdWUpCiAgICAgICAgZ2V0Z2VudigpLkxvY2FsQ29uZmlnLlNldHRpbmdzWyJNYXN0ZXJ5IEl0ZW0iXSA9IE1hc3RlcnlJdGVtVmFsdWUKICAgICAgICBzYXZlU2V0dGluZ3MoKQogICAgZW5kCn0pClRhYnMuU2V0dGluZ3NTY3JpcHQ6QWRkU2xpZGVyKCJUd2VlblNwZWVkIiwgewogICAgVGl0bGUgPSAiVHdlZW4gU3BlZWQiLAogICAgRGVmYXVsdCA9IGdldGdlbnYoKS5Mb2NhbENvbmZpZy5TZXR0aW5nc1siVHdlZW4gU3BlZWQiXSwKICAgIE1pbiA9IDIwMCwgTWF4ID0gMzUwLCBSb3VuZGluZyA9IDAsCiAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKFR3ZWVuU3BlZWRWYWx1ZSkKICAgICAgICBnZXRnZW52KCkuTG9jYWxDb25maWcuU2V0dGluZ3NbIlR3ZWVuIFNwZWVkIl0gPSBUd2VlblNwZWVkVmFsdWUKICAgICAgICBzYXZlU2V0dGluZ3MoKQogICAgZW5kCn0pCi0tIGxvY2FsIGVmZmVjdHMgPSB7IkRlYXRoIiwgIkxldmVsIFVwIiwgIkhpdCIsICJSZXNwYXduIn0KLS0gZm9yIF8sIGVmZmVjdCBpbiBpcGFpcnMoZWZmZWN0cykgZG8KLS0gICAgIFRhYnMuU2V0dGluZ3NTY3JpcHQ6QWRkVG9nZ2xlKGVmZmVjdCwgewotLSAgICAgICAgIFRpdGxlID0gIlJlbW92ZSAiIC4uIGVmZmVjdCwKLS0gICAgICAgICBEZWZhdWx0ID0gZmFsc2UsCi0tICAgICAgICAgQ2FsbGJhY2sgPSBmdW5jdGlvbihzdGF0ZSkKLS0gICAgICAgICAgICAgcHJpbnQoZWZmZWN0IC4uICIgaXMgbm93ICIgLi4gKHN0YXRlIGFuZCAiT04iIG9yICJPRkYiKSkKLS0gICAgICAgICAgICAgZ2V0Z2VudigpLkxvY2FsQ29uZmlnLlNldHRpbmdzWyJSZW1vdmUgRWZmZWN0Il1bZWZmZWN0XSA9IHN0YXRlCi0tICAgICAgICAgICAgIHNhdmVTZXR0aW5ncygpCi0tICAgICAgICAgZW5kCi0tICAgICB9KQotLSBlbmQKClRhYnMuU2V0dGluZ3NTY3JpcHQ6QWRkVG9nZ2xlKCJEaXNhYmxlM0RSZW5kZXIiLCB7CiAgICBUaXRsZSA9ICJEaXNhYmxlIDNEIFJlbmRlciIsCiAgICBEZWZhdWx0ID0gZ2V0Z2VudigpLkxvY2FsQ29uZmlnLlNldHRpbmdzLlNjcmVlblsiRGlzYWJsZSAzRCBSZW5kZXIiXSwKICAgIENhbGxiYWNrID0gZnVuY3Rpb24oRGlzYWJsZTNEUmVuZGVyQm9vbGVhbikKICAgICAgICBnYW1lOkdldFNlcnZpY2UoIlJ1blNlcnZpY2UiKTpTZXQzZFJlbmRlcmluZ0VuYWJsZWQobm90IERpc2FibGUzRFJlbmRlckJvb2xlYW4pCiAgICAgICAgdGFzay53YWl0KCkKICAgICAgICBnZXRnZW52KCkuTG9jYWxDb25maWcuU2V0dGluZ3MuU2NyZWVuWyJEaXNhYmxlIDNEIFJlbmRlciJdID0gRGlzYWJsZTNEUmVuZGVyQm9vbGVhbgogICAgICAgIHNhdmVTZXR0aW5ncygpCiAgICBlbmQKfSkKClRhYnMuU2V0dGluZ3NTY3JpcHQ6QWRkVG9nZ2xlKCJEaXNhYmxlUGxheWVyR1VJIiwge1RpdGxlID0gIkRpc2FibGUgUGxheWVyIEdVSSIsCiAgICBEZWZhdWx0ID0gZ2V0Z2VudigpLkxvY2FsQ29uZmlnLlNldHRpbmdzLlNjcmVlblsiRGlzYWJsZSBQbGF5ZXIgR1VJIl0sCiAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKERpc2FibGVQbGF5ZXJHVUlCb29sZWFuKQogICAgICAgIHBjYWxsKGZ1bmN0aW9uKCkKICAgICAgICAgICAgZ2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLlBsYXllckd1aS5NYWluLkVuYWJsZWQgPSBub3QoRGlzYWJsZVBsYXllckdVSUJvb2xlYW4pCiAgICAgICAgZW5kKQogICAgICAgIHNhdmVTZXR0aW5ncygpCiAgICBlbmQKfSkKVGFicy5TZXR0aW5nc1NjcmlwdDpBZGRTbGlkZXIoIlNsaWRlciIsIHsKICAgIFRpdGxlID0gIk1heCBQbGF5ZXJzIGZvciBob3AiLAogICAgRGVmYXVsdCA9IGdldGdlbnYoKS5Mb2NhbENvbmZpZy5TZXR0aW5nc1siTWF4IFBsYXllcnMgSG9wIl0sCiAgICBNaW4gPSAyLAogICAgTWF4ID0gKGdhbWUuUGxheWVycy5NYXhQbGF5ZXJzIC0gMSksIFJvdW5kaW5nID0gMCwKICAgIENhbGxiYWNrID0gZnVuY3Rpb24ocGxheWVyU2VsZWN0ZWQpCiAgICAgICAgZ2V0Z2VudigpLkxvY2FsQ29uZmlnLlNldHRpbmdzWyJNYXggUGxheWVycyBIb3AiXSA9IHBsYXllclNlbGVjdGVkCiAgICAgICAgc2F2ZVNldHRpbmdzKCkKICAgIGVuZAp9KQpUYWJzLlNldHRpbmdzU2NyaXB0OkFkZEJ1dHRvbih7CiAgICBUaXRsZSA9ICJHcmFwaGljcyIsCiAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKCkKICAgICAgICBXaW5kb3c6RGlhbG9nKHsKICAgICAgICAgICAgVGl0bGUgPSAiR3JhcGhpY3MiLAogICAgICAgICAgICBDb250ZW50ID0gIkNob29zZSBhIGdyYXBoaWNzIHNldHRpbmc6IiwKICAgICAgICAgICAgQnV0dG9ucyA9IHsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBUaXRsZSA9ICJMb3ciLAogICAgICAgICAgICAgICAgICAgIENhbGxiYWNrID0gZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5ncygpLlJlbmRlcmluZy5RdWFsaXR5TGV2ZWwgPSBFbnVtLlF1YWxpdHlMZXZlbC5MZXZlbDAxIC0tbG93ZXN0IHF1YWxpdHkKICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZS5MaWdodGluZy5UZWNobm9sb2d5ID0gRW51bS5UZWNobm9sb2d5LkxlZ2FjeSAtLSBFbmFibGUgTGVnYWN5IGxpZ2h0aW5nIHRlY2hub2xvZ3kKCiAgICAgICAgICAgICAgICAgICAgICAgIHBjYWxsKGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldGhpZGRlbnByb3BlcnR5KGdhbWUuTGlnaHRpbmcsICJUZWNobm9sb2d5IiwgMCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldGhpZGRlbnByb3BlcnR5KGdhbWUuV29ya3NwYWNlLlRlcnJhaW4sICJEZWNvcmF0aW9uIiwgZmFsc2UpCiAgICAgICAgICAgICAgICAgICAgICAgIGVuZCkKICAgICAgICAgICAgICAgICAgICAgICAgZm9yIF8sIHYgaW4gaXBhaXJzKGdhbWUuTGlnaHRpbmc6R2V0Q2hpbGRyZW4oKSkgZG8KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIHY6SXNBKCJCbHVyRWZmZWN0Iikgb3IgdjpJc0EoIlN1blJheXNFZmZlY3QiKSBvciB2OklzQSgiQ29sb3JDb3JyZWN0aW9uRWZmZWN0Iikgb3IgdjpJc0EoIkJsb29tRWZmZWN0Iikgb3IgdjpJc0EoIkRlcHRoT2ZGaWVsZEVmZmVjdCIpIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwY2FsbChmdW5jdGlvbigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYuRW5hYmxlZCA9IGZhbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgICAgICBnYW1lLldvcmtzcGFjZS5UZXJyYWluLldhdGVyV2F2ZVNpemUgPSAwCiAgICAgICAgICAgICAgICAgICAgICAgIGdhbWUuV29ya3NwYWNlLlRlcnJhaW4uV2F0ZXJXYXZlU3BlZWQgPSAwCiAgICAgICAgICAgICAgICAgICAgICAgIGdhbWUuV29ya3NwYWNlLlRlcnJhaW4uV2F0ZXJSZWZsZWN0YW5jZSA9IDAKICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZS5Xb3Jrc3BhY2UuVGVycmFpbi5XYXRlclRyYW5zcGFyZW5jeSA9IDAKICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZS5MaWdodGluZy5HbG9iYWxTaGFkb3dzID0gZmFsc2UKICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZS5MaWdodGluZy5Gb2dFbmQgPSA5OQogICAgICAgICAgICAgICAgICAgICAgICBnYW1lLkxpZ2h0aW5nLkJyaWdodG5lc3MgPSAwCiAgICAgICAgICAgICAgICAgICAgICAgIGZvciBfLCB2IGluIGlwYWlycyhnYW1lLldvcmtzcGFjZTpHZXREZXNjZW5kYW50cygpKSBkbwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcGNhbGwoZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIHY6SXNBKCJCYXNlUGFydCIpIGFuZCBub3QgdjpJc0EoIk1lc2hQYXJ0IikgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2Lk1hdGVyaWFsID0gRW51bS5NYXRlcmlhbC5QbGFzdGljCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYuUmVmbGVjdGFuY2UgPSAwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZWlmIHY6SXNBKCJEZWNhbCIpIG9yIHY6SXNBKCJUZXh0dXJlIikgdGhlbiB2LlRyYW5zcGFyZW5jeSA9IDEKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlaWYgdjpJc0EoIlBhcnRpY2xlRW1pdHRlciIpIG9yIHY6SXNBKCJUcmFpbCIpIHRoZW4gdi5MaWZldGltZSA9IE51bWJlclJhbmdlLm5ldygwKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VpZiB2OklzQSgiRXhwbG9zaW9uIikgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LkJsYXN0UHJlc3N1cmUgPSAxCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYuQmxhc3RSYWRpdXMgPSAxCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZWlmIHY6SXNBKCJGaXJlIikgb3IgdjpJc0EoIlNwb3RMaWdodCIpIG9yIHY6SXNBKCJTbW9rZSIpIG9yIHY6SXNBKCJTcGFya2xlcyIpIHRoZW4gdi5FbmFibGVkID0gZmFsc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlaWYgdjpJc0EoIk1lc2hQYXJ0IikgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2Lk1hdGVyaWFsID0gRW51bS5NYXRlcmlhbC5QbGFzdGljCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYuUmVmbGVjdGFuY2UgPSAwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYuVGV4dHVyZUlEID0gIiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlaWYgdjpJc0EoIlNwZWNpYWxNZXNoIikgdGhlbiB2LlRleHR1cmVJZCA9ICIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZWlmIHY6SXNBKCJTaGlydEdyYXBoaWMiKSB0aGVuIHYuR3JhcGhpYyA9ICIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZWlmIHY6SXNBKCJTaGlydCIpIG9yIHY6SXNBKCJQYW50cyIpIHRoZW4gdlt2LkNsYXNzTmFtZSAuLiAiVGVtcGxhdGUiXSA9ICIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQpCiAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBUaXRsZSA9ICJCZXR0ZXIiLAogICAgICAgICAgICAgICAgICAgIENhbGxiYWNrID0gZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5ncygpLlJlbmRlcmluZy5RdWFsaXR5TGV2ZWwgPSBFbnVtLlF1YWxpdHlMZXZlbC5MZXZlbDIxIC0taGlnaGVzdCBxdWFsaXR5CiAgICAgICAgICAgICAgICAgICAgICAgIGdhbWUuTGlnaHRpbmcuVGVjaG5vbG9neSA9IEVudW0uVGVjaG5vbG9neS5GdXR1cmUtLSBFbmFibGUgRnV0dXJlIGxpZ2h0aW5nIHRlY2hub2xvZ3kKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tIEFkanVzdCBsaWdodGluZyBzZXR0aW5ncyBmb3IgYmV0dGVyIHZpc3VhbHMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdhbWUuTGlnaHRpbmcuQnJpZ2h0bmVzcyA9IDIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdhbWUuTGlnaHRpbmcuR2xvYmFsU2hhZG93cyA9IHRydWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdhbWUuTGlnaHRpbmcuRW52aXJvbm1lbnRTcGVjdWxhclNjYWxlID0gMQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZS5MaWdodGluZy5FbnZpcm9ubWVudERpZmZ1c2VTY2FsZSA9IDEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdhbWUuTGlnaHRpbmcuT3V0ZG9vckFtYmllbnQgPSBDb2xvcjMuZnJvbVJHQigxMjgsIDEyOCwgMTI4KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcGNhbGwoZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdhbWUuTGlnaHRpbmcuQW1iaWVudE9jY2x1c2lvbiA9IHRydWUtLSBFbmFibGUgQW1iaWVudCBPY2NsdXNpb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tIEVuYWJsZSBDb2xvciBDb3JyZWN0aW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLSBsb2NhbCBDb2xvckNvcnJlY3Rpb25FZmZlY3QgPSBJbnN0YW5jZS5uZXcoIkNvbG9yQ29ycmVjdGlvbkVmZmVjdCIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLSBDb2xvckNvcnJlY3Rpb25FZmZlY3QuQnJpZ2h0bmVzcyA9IDAuMQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLS0gQ29sb3JDb3JyZWN0aW9uRWZmZWN0LkNvbnRyYXN0ID0gMC4xCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLSBDb2xvckNvcnJlY3Rpb25FZmZlY3QuU2F0dXJhdGlvbiA9IDAuMgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLS0gQ29sb3JDb3JyZWN0aW9uRWZmZWN0LlRpbnRDb2xvciA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjQwLCAyMjApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLSBDb2xvckNvcnJlY3Rpb25FZmZlY3QuUGFyZW50ID0gZ2FtZS5MaWdodGluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgLS0gLS0gRW5hYmxlIEJsb29tIGVmZmVjdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWwgQmxvb21FZmZlY3QgPSBJbnN0YW5jZS5uZXcoIkJsb29tRWZmZWN0IikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJsb29tRWZmZWN0LkludGVuc2l0eSA9IDAuNAogICAgICAgICAgICAgICAgICAgICAgICAgICAgQmxvb21FZmZlY3QuVGhyZXNob2xkID0gMQogICAgICAgICAgICAgICAgICAgICAgICAgICAgQmxvb21FZmZlY3QuU2l6ZSA9IDI0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBCbG9vbUVmZmVjdC5QYXJlbnQgPSBnYW1lLkxpZ2h0aW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLSBFbmFibGUgRGVwdGggb2YgRmllbGQgZWZmZWN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLSBsb2NhbCBEZXB0aE9mRmllbGRFZmZlY3QgPSBJbnN0YW5jZS5uZXcoIkRlcHRoT2ZGaWVsZEVmZmVjdCIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLSBEZXB0aE9mRmllbGRFZmZlY3QuSW5Gb2N1c1JhZGl1cyA9IDUwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLSBEZXB0aE9mRmllbGRFZmZlY3QuTmVhckludGVuc2l0eSA9IDAuNQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLS0gRGVwdGhPZkZpZWxkRWZmZWN0LkZhckludGVuc2l0eSA9IDAuNQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLS0gRGVwdGhPZkZpZWxkRWZmZWN0LlBhcmVudCA9IGdhbWUuTGlnaHRpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tIEVuYWJsZSBTdW4gUmF5cyBlZmZlY3QKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsIFN1blJheXNFZmZlY3QgPSBJbnN0YW5jZS5uZXcoIlN1blJheXNFZmZlY3QiKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgU3VuUmF5c0VmZmVjdC5JbnRlbnNpdHkgPSAwLjEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN1blJheXNFZmZlY3QuU3ByZWFkID0gMQogICAgICAgICAgICAgICAgICAgICAgICAgICAgU3VuUmF5c0VmZmVjdC5QYXJlbnQgPSBnYW1lLkxpZ2h0aW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLSBFbmFibGUgQmx1ciBlZmZlY3QKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsIEJsdXJFZmZlY3QgPSBJbnN0YW5jZS5uZXcoIkJsdXJFZmZlY3QiKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgQmx1ckVmZmVjdC5TaXplID0gMgogICAgICAgICAgICAgICAgICAgICAgICAgICAgQmx1ckVmZmVjdC5QYXJlbnQgPSBnYW1lLkxpZ2h0aW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLSBBZGp1c3QgRm9nIHNldHRpbmdzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnYW1lLkxpZ2h0aW5nLkZvZ1N0YXJ0ID0gMTAwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnYW1lLkxpZ2h0aW5nLkZvZ0VuZCA9IDEwMDAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdhbWUuTGlnaHRpbmcuRm9nQ29sb3IgPSBDb2xvcjMuZnJvbVJHQigyMDAsIDIwMCwgMjAwKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLS0gRW5hYmxlIENvbG9yIEdyYWRpbmcgZWZmZWN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbCBjb2xvckdyYWRpbmcgPSBJbnN0YW5jZS5uZXcoIkNvbG9yQ29ycmVjdGlvbkVmZmVjdCIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvckdyYWRpbmcuQnJpZ2h0bmVzcyA9IDAuMDUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yR3JhZGluZy5Db250cmFzdCA9IDAuMgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JHcmFkaW5nLlNhdHVyYXRpb24gPSAwLjMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yR3JhZGluZy5UaW50Q29sb3IgPSBDb2xvcjMuZnJvbVJHQigyNTUsIDIzMCwgMjAwKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JHcmFkaW5nLlBhcmVudCA9IGdhbWUuTGlnaHRpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tIEVuYWJsZSBMZW5zIEZsYXJlIGVmZmVjdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWwgbGVuc0ZsYXJlID0gSW5zdGFuY2UubmV3KCJTdW5SYXlzRWZmZWN0IikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlbnNGbGFyZS5JbnRlbnNpdHkgPSAwLjIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlbnNGbGFyZS5TcHJlYWQgPSAwLjUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlbnNGbGFyZS5QYXJlbnQgPSBnYW1lLkxpZ2h0aW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLSBFbmFibGUgQXRtb3NwaGVyZSBlZmZlY3QKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsIGF0bW9zcGhlcmUgPSBJbnN0YW5jZS5uZXcoIkF0bW9zcGhlcmUiKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXRtb3NwaGVyZS5EZW5zaXR5ID0gMC4zCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdG1vc3BoZXJlLk9mZnNldCA9IDAuMjUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0bW9zcGhlcmUuR2xhcmUgPSAwLjIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0bW9zcGhlcmUuSGF6ZSA9IDAuMQogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXRtb3NwaGVyZS5QYXJlbnQgPSBnYW1lLkxpZ2h0aW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLSBFbmFibGUgYWRkaXRpb25hbCBDb2xvciBDb3JyZWN0aW9uIGZvciBtb3JlIHZpdmlkIGNvbG9ycwogICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWwgdml2aWRDb2xvckNvcnJlY3Rpb24gPSBJbnN0YW5jZS5uZXcoIkNvbG9yQ29ycmVjdGlvbkVmZmVjdCIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aXZpZENvbG9yQ29ycmVjdGlvbi5CcmlnaHRuZXNzID0gMC4xCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aXZpZENvbG9yQ29ycmVjdGlvbi5Db250cmFzdCA9IDAuMwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdml2aWRDb2xvckNvcnJlY3Rpb24uU2F0dXJhdGlvbiA9IDAuNAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdml2aWRDb2xvckNvcnJlY3Rpb24uVGludENvbG9yID0gQ29sb3IzLmZyb21SR0IoMjU1LCAyMjAsIDIwMCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpdmlkQ29sb3JDb3JyZWN0aW9uLlBhcmVudCA9IGdhbWUuTGlnaHRpbmcKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7VGl0bGUgPSAiQ2FuY2VsIn07CiAgICAgICAgICAgIH07CiAgICAgICAgfSk7CiAgICBlbmQKfSkKClRhYnMuU2V0dGluZ3NTY3JpcHQ6QWRkRHJvcGRvd24oIkludGVyZmFjZVRoZW1lIiwgewogICAgVGl0bGUgPSAiVGhlbWUiLAogICAgRGVzY3JpcHRpb24gPSAiQ2hhbmdlcyB0aGUgaW50ZXJmYWNlIHRoZW1lIiwKICAgIFZhbHVlcyA9IEZsdWVudC5UaGVtZXMsCiAgICBEZWZhdWx0ID0gZ2V0Z2VudigpLkxvY2FsQ29uZmlnLlNldHRpbmdzWyJUaGVtZSJdLAogICAgQ2FsbGJhY2sgPSBmdW5jdGlvbihJbnRlcmZhY2VUaGVtZSkKICAgICAgICBGbHVlbnQuT3B0aW9ucy5JbnRlcmZhY2VUaGVtZTpDbG9zZSgpCiAgICAgICAgV2luZG93OkRpYWxvZyh7CiAgICAgICAgICAgIFRpdGxlID0gIldhcm4iLAogICAgICAgICAgICBDb250ZW50ID0gIkFyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBjaGFuZ2UgdGhlIHRoZW1lPyAiIC4uICJbIiAuLiBJbnRlcmZhY2VUaGVtZSAuLiAiXSIsCiAgICAgICAgICAgIEJ1dHRvbnMgPSB7CiAgICAgICAgICAgICAgICB7VGl0bGUgPSAiQ29uZmlybSIsCiAgICAgICAgICAgICAgICAgICAgQ2FsbGJhY2sgPSBmdW5jdGlvbigpCiAgICAgICAgICAgICAgICAgICAgICAgIEZsdWVudDpTZXRUaGVtZShJbnRlcmZhY2VUaGVtZSkKICAgICAgICAgICAgICAgICAgICAgICAgZ2V0Z2VudigpLkxvY2FsQ29uZmlnLlNldHRpbmdzWyJUaGVtZSJdID0gSW50ZXJmYWNlVGhlbWUKICAgICAgICAgICAgICAgICAgICAgICAgc2F2ZVNldHRpbmdzKCkKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICB7VGl0bGUgPSAiQ2FuY2VsIn07CiAgICAgICAgICAgIH07CiAgICAgICAgfSk7CiAgICAgICAgLS1GbHVlbnQuT3B0aW9ucy5JbnRlcmZhY2VUaGVtZTpTZXRWYWx1ZShuaWwpCiAgICBlbmQKfSkKLS1TRVRUSU5HUwpUYWJzLlNldHRpbmdzOkFkZERyb3Bkb3duKCJTZWxlY3RXZWFwb24iLCB7CiAgICBUaXRsZSA9ICJTZWxlY3QgV2VhcG9uIiwKICAgIFZhbHVlcyA9IHsiTWVsZWUiLCAiQmxveCBGcnVpdHMiLCAiU3dvcmQiLCAiR3VuIn0sCiAgICBNdWx0aSA9IGZhbHNlLAogICAgRGVmYXVsdCA9IGdldGdlbnYoKS5Mb2NhbENvbmZpZy5TZXR0aW5nc1siU2VsZWN0IFdlYXBvbiJdLAogICAgQ2FsbGJhY2sgPSBmdW5jdGlvbihTZWxlY3RXZWFwb25WYWx1ZSkKICAgICAgICBnZXRnZW52KCkuTG9jYWxDb25maWcuU2V0dGluZ3NbIlNlbGVjdCBXZWFwb24iXSA9IFNlbGVjdFdlYXBvblZhbHVlCiAgICAgICAgc2F2ZVNldHRpbmdzKCkKICAgIGVuZAp9KQpUYWJzLlNldHRpbmdzOkFkZERyb3Bkb3duKCJRdWVzdE9wdGlvbiIsIHsKICAgIFRpdGxlID0gIlF1ZXN0IE9wdGlvbiIsCiAgICBWYWx1ZXMgPSB7IlNpbmdsZSIsICJEb3VibGUifSwKICAgIE11bHRpID0gZmFsc2UsCiAgICBEZWZhdWx0ID0gZ2V0Z2VudigpLkxvY2FsQ29uZmlnLlNldHRpbmdzWyJRdWVzdCBPcHRpb24iXSwKICAgIENhbGxiYWNrID0gZnVuY3Rpb24oUXVlc3RPcHRpb25WYWx1ZSkKICAgICAgICBnZXRnZW52KCkuTG9jYWxDb25maWcuU2V0dGluZ3NbIlF1ZXN0IE9wdGlvbiJdID0gUXVlc3RPcHRpb25WYWx1ZQogICAgICAgIHNhdmVTZXR0aW5ncygpCiAgICBlbmQKfSkKClRhYnMuU2V0dGluZ3M6QWRkU2xpZGVyKCJGYXN0IEF0dGFjayIsIHtUaXRsZSA9ICJGYXN0IEF0dGFjayBEZWxheSIsCiAgICBEZWZhdWx0ID0gZ2V0Z2VudigpLkxvY2FsQ29uZmlnLlNldHRpbmdzWyJGYXN0IEF0dGFjayBEZWxheSJdLAogICAgTWluID0gMCwgTWF4ID0gMSwgUm91bmRpbmcgPSAyLAogICAgQ2FsbGJhY2sgPSBmdW5jdGlvbihGYXN0QXR0YWNrVmFsdWUpCiAgICAgICAgZ2V0Z2VudigpLkxvY2FsQ29uZmlnLlNldHRpbmdzWyJGYXN0IEF0dGFjayBEZWxheSJdID0gRmFzdEF0dGFja1ZhbHVlCiAgICAgICAgc2F2ZVNldHRpbmdzKCkKICAgIGVuZAp9KQoKVGFicy5TZXR0aW5nczpBZGRTbGlkZXIoIkJyaW5nIE1vZCIsIHtUaXRsZSA9ICJCcmluZyBNb2QiLAogICAgRGVmYXVsdCA9IGdldGdlbnYoKS5Mb2NhbENvbmZpZy5TZXR0aW5nc1siQnJpbmcgTW9kIERpc3RhbmNlIl0sCiAgICBNaW4gPSAyNTAsIE1heCA9IDc1MCwgUm91bmRpbmcgPSAwLAogICAgQ2FsbGJhY2sgPSBmdW5jdGlvbihCcmluZ01vZERpc3RhbmNlVmFsdWUpCiAgICAgICAgZ2V0Z2VudigpLkxvY2FsQ29uZmlnLlNldHRpbmdzWyJCcmluZyBNb2QgRGlzdGFuY2UiXSA9IEJyaW5nTW9kRGlzdGFuY2VWYWx1ZQogICAgICAgIHNhdmVTZXR0aW5ncygpCiAgICBlbmQKfSkKClRhYnMuU2V0dGluZ3M6QWRkU2xpZGVyKCJNYXN0ZXJ5SGVhbHRoUGVyY2VudCIsIHtUaXRsZSA9ICJNYXN0ZXJ5IEhlYWx0aCBQZXJjZW50IiwKICAgIERlZmF1bHQgPSBnZXRnZW52KCkuTG9jYWxDb25maWcuU2V0dGluZ3NbIk1hc3RlcnkgSGVhbHRoIFBlcmNlbnQiXSwKICAgIE1pbiA9IDMsIE1heCA9IDQ1LCBSb3VuZGluZyA9IDAsCiAgICBDYWxsYmFjayA9IGZ1bmN0aW9uKE1hc3RlcnlIZWFsdGhQZXJjZW50VmFsdWUpCiAgICAgICAgZ2V0Z2VudigpLkxvY2FsQ29uZmlnLlNldHRpbmdzWyJNYXN0ZXJ5IEhlYWx0aCBQZXJjZW50Il0gPSBNYXN0ZXJ5SGVhbHRoUGVyY2VudFZhbHVlCiAgICAgICAgc2F2ZVNldHRpbmdzKCkKICAgIGVuZAp9KQoKLS1bWwog4paI4paI4paI4paI4paI4paI4pWXIOKWiOKWiOKWiOKWiOKWiOKWiOKVlyDilojilojilojilojilojilojilZcg4paI4paI4paI4paI4paI4paI4paI4pWXICAgIOKWiOKWiOKWiOKWiOKWiOKWiOKWiOKVlyDilojilojilojilojilojilojilZcg4paI4paI4paI4paI4paI4paI4pWXICAgICDilojilojilojilojilojilojilojilZcg4paI4paI4paI4paI4paI4paI4pWX4paI4paI4paI4paI4paI4paI4pWXIOKWiOKWiOKVl+KWiOKWiOKWiOKWiOKWiOKWiOKVlyDilojilojilojilojilojilojilojilojilZcK4paI4paI4pWU4pWQ4pWQ4pWQ4pWQ4pWd4paI4paI4pWU4pWQ4pWQ4pWQ4paI4paI4pWX4paI4paI4pWU4pWQ4pWQ4paI4paI4pWX4paI4paI4pWU4pWQ4pWQ4pWQ4pWQ4pWdICAgIOKWiOKWiOKVlOKVkOKVkOKVkOKVkOKVneKWiOKWiOKVlOKVkOKVkOKVkOKWiOKWiOKVl+KWiOKWiOKVlOKVkOKVkOKWiOKWiOKVlyAgICDilojilojilZTilZDilZDilZDilZDilZ3ilojilojilZTilZDilZDilZDilZDilZ3ilojilojilZTilZDilZDilojilojilZfilojilojilZHilojilojilZTilZDilZDilojilojilZfilZrilZDilZDilojilojilZTilZDilZDilZ0K4paI4paI4pWRICAgICDilojilojilZEgICDilojilojilZHilojilojilZEgIOKWiOKWiOKVkeKWiOKWiOKWiOKWiOKWiOKVlyAgICAgIOKWiOKWiOKWiOKWiOKWiOKVlyAg4paI4paI4pWRICAg4paI4paI4pWR4paI4paI4paI4paI4paI4paI4pWU4pWdICAgIOKWiOKWiOKWiOKWiOKWiOKWiOKWiOKVl+KWiOKWiOKVkSAgICAg4paI4paI4paI4paI4paI4paI4pWU4pWd4paI4paI4pWR4paI4paI4paI4paI4paI4paI4pWU4pWdICAg4paI4paI4pWRCuKWiOKWiOKVkSAgICAg4paI4paI4pWRICAg4paI4paI4pWR4paI4paI4pWRICDilojilojilZHilojilojilZTilZDilZDilZ0gICAgICDilojilojilZTilZDilZDilZ0gIOKWiOKWiOKVkSAgIOKWiOKWiOKVkeKWiOKWiOKVlOKVkOKVkOKWiOKWiOKVlyAgICDilZrilZDilZDilZDilZDilojilojilZHilojilojilZEgICAgIOKWiOKWiOKVlOKVkOKVkOKWiOKWiOKVl+KWiOKWiOKVkeKWiOKWiOKVlOKVkOKVkOKVkOKVnSAgICDilojilojilZEK4pWa4paI4paI4paI4paI4paI4paI4pWU4pWd4paI4paI4paI4paI4paI4paI4pWU4pWd4paI4paI4paI4paI4paI4paI4pWU4pWd4paI4paI4paI4paI4paI4paI4paI4pWXICAgIOKWiOKWiOKVkSAgICAg4pWa4paI4paI4paI4paI4paI4paI4pWU4pWd4paI4paI4pWRICDilojilojilZEgICAg4paI4paI4paI4paI4paI4paI4paI4pWR4pWa4paI4paI4paI4paI4paI4paI4pWX4paI4paI4pWRICDilojilojilZHilojilojilZHilojilojilZEgICAgICAgIOKWiOKWiOKVkQog4pWa4pWQ4pWQ4pWQ4pWQ4pWQ4pWdIOKVmuKVkOKVkOKVkOKVkOKVkOKVnSDilZrilZDilZDilZDilZDilZDilZ0g4pWa4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWdICAgIOKVmuKVkOKVnSAgICAgIOKVmuKVkOKVkOKVkOKVkOKVkOKVnSDilZrilZDilZ0gIOKVmuKVkOKVnSAgICDilZrilZDilZDilZDilZDilZDilZDilZ0g4pWa4pWQ4pWQ4pWQ4pWQ4pWQ4pWd4pWa4pWQ4pWdICDilZrilZDilZ3ilZrilZDilZ3ilZrilZDilZ0gICAgICAgIOKVmuKVkOKVnQpdXQotLUF1dG8gRmFybWluZwp0YXNrLnNwYXduKGZ1bmN0aW9uKCkKICAgIHdoaWxlIHRhc2sud2FpdCgpIGRvCiAgICAgICAgaWYgZ2V0Z2VudigpLkxvY2FsQ29uZmlnLkZhcm0uTGV2ZWwgdGhlbgogICAgICAgIAogICAgICAgIGVuZAogICAgZW5kCmVuZCkKCi0tVXBncmFkZSBSYWNlIHYyCnRhc2suc3Bhd24oZnVuY3Rpb24oKQogICAgd2hpbGUgdGFzay53YWl0KCkgZG8KICAgICAgICBpZiBnZXRnZW52KCkuTG9jYWxDb25maWdbIkdldCBJdGVtIl0uUmFjZVsiVXBncmFkZSJdWyJWMiJdIHRoZW4KICAgICAgICAgICAgaWYgbm90IGdhbWU6R2V0U2VydmljZSgiUGxheWVycyIpLkxvY2FsUGxheWVyLkRhdGEuUmFjZTpGaW5kRmlyc3RDaGlsZCgiRXZvbHZlZCIpIHRoZW4KICAgICAgICAgICAgICAgIGlmIGdhbWU6R2V0U2VydmljZSgiUmVwbGljYXRlZFN0b3JhZ2UiKS5SZW1vdGVzLkNvbW1GXzpJbnZva2VTZXJ2ZXIoIkFsY2hlbWlzdCIsICIxIikgPT0gMCB0aGVuCiAgICAgICAgICAgICAgICAgICAgZ2FtZTpHZXRTZXJ2aWNlKCJSZXBsaWNhdGVkU3RvcmFnZSIpLlJlbW90ZXMuQ29tbUZfOkludm9rZVNlcnZlcigiQWxjaGVtaXN0IiwgIjIiKQogICAgICAgICAgICAgICAgZWxzZWlmIGdhbWU6R2V0U2VydmljZSgiUmVwbGljYXRlZFN0b3JhZ2UiKS5SZW1vdGVzLkNvbW1GXzpJbnZva2VTZXJ2ZXIoIkFsY2hlbWlzdCIsICIxIikgPT0gMSB0aGVuCiAgICAgICAgICAgICAgICAgICAgaWYgbm90IGdhbWU6R2V0U2VydmljZSgiUGxheWVycyIpLkxvY2FsUGxheWVyLkJhY2twYWNrOkZpbmRGaXJzdENoaWxkKCJGbG93ZXIgMSIpIGFuZCBub3QgZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikuTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyOkZpbmRGaXJzdENoaWxkKCJGbG93ZXIgMSIpIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgVHdlZW4oZ2FtZS5Xb3Jrc3BhY2UuRmxvd2VyMS5DRnJhbWUpCiAgICAgICAgICAgICAgICAgICAgZWxzZWlmIG5vdCBnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKS5Mb2NhbFBsYXllci5CYWNrcGFjazpGaW5kRmlyc3RDaGlsZCgiRmxvd2VyIDIiKSBhbmQgbm90IGdhbWU6R2V0U2VydmljZSgiUGxheWVycyIpLkxvY2FsUGxheWVyLkNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZCgiRmxvd2VyIDIiKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIFR3ZWVuKGdhbWUuV29ya3NwYWNlLkZsb3dlcjIuQ0ZyYW1lKQogICAgICAgICAgICAgICAgICAgIGVsc2VpZiBub3QgZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikuTG9jYWxQbGF5ZXIuQmFja3BhY2s6RmluZEZpcnN0Q2hpbGQoIkZsb3dlciAzIikgYW5kIG5vdCBnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKS5Mb2NhbFBsYXllci5DaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGQoIkZsb3dlciAzIikgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICBpZiBnYW1lOkdldFNlcnZpY2UoIldvcmtzcGFjZSIpLkVuZW1pZXM6RmluZEZpcnN0Q2hpbGQoIlpvbWJpZSBbTHYuIDk1MF0iKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLUZhcm0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLS1Ud2VlbiB0byBab21iaWUKICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZWxzZWlmIGdhbWU6R2V0U2VydmljZSgiUmVwbGljYXRlZFN0b3JhZ2UiKS5SZW1vdGVzLkNvbW1GXzpJbnZva2VTZXJ2ZXIoIkFsY2hlbWlzdCIsICIxIikgPT0gMiB0aGVuCiAgICAgICAgICAgICAgICBnYW1lOkdldFNlcnZpY2UoIlJlcGxpY2F0ZWRTdG9yYWdlIikuUmVtb3Rlcy5Db21tRl86SW52b2tlU2VydmVyKCJBbGNoZW1pc3QiLCAiMyIpCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZAogICAgZW5kCmVuZCkKCi0tVXBncmFkZSBSYWNlIHYzCnRhc2suc3Bhd24oZnVuY3Rpb24oKQogICAgd2hpbGUgdGFzay53YWl0KCkgZG8KICAgICAgICBpZiBnZXRnZW52KCkuTG9jYWxDb25maWdbIkdldCBJdGVtIl0uUmFjZVsiVXBncmFkZSJdWyJWMyJdIHRoZW4KICAgICAgICAgICAgCiAgICAgICAgZW5kCiAgICBlbmQKZW5kKQoKLS1BdXRvIFdvcmxkIDMKdGFzay5zcGF3bihmdW5jdGlvbigpCiAgICB3aGlsZSB0YXNrLndhaXQoKSBkbwogICAgICAgIGlmIGdldGdlbnYoKS5Mb2NhbENvbmZpZy5GYXJtWyJXb3JsZCJdWyJXb3JsZCAyIl0gdGhlbgogICAgICAgICAgICBpZiBnYW1lLlBsYXllcnMuTG9jYWxQbGF5ZXIuRGF0YS5MZXZlbC5WYWx1ZSA+PSA3MDAgdGhlbgogICAgICAgICAgICAgICAgaWYgZ2FtZTpHZXRTZXJ2aWNlKCJSZXBsaWNhdGVkU3RvcmFnZSIpLlJlbW90ZXMuQ29tbUZfOkludm9rZVNlcnZlcigiRHJlc3Nyb3NhUXVlc3RQcm9ncmVzcyIpLlVzZWRLZXkgPT0gZmFsc2UgdGhlbgogICAgICAgICAgICAgICAgICAgIGlmIG5vdCBnYW1lLlBsYXllcnMuTG9jYWxQbGF5ZXIuQmFja3BhY2s6RmluZEZpcnN0Q2hpbGQoIktleSIpIG9yIGdhbWUuUGxheWVycy5Mb2NhbFBsYXllci5DaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGQoIktleSIpIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZTpHZXRTZXJ2aWNlKCJSZXBsaWNhdGVkU3RvcmFnZSIpLlJlbW90ZXMuQ29tbUZfOkludm9rZVNlcnZlcigiRHJlc3Nyb3NhUXVlc3RQcm9ncmVzcyIsICJEZXRlY3RpdmUiKQogICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgLS1FcXVpcCgiS2V5IikKICAgICAgICAgICAgICAgICAgICAgICAgLS1nYW1lLlBsYXllcnMuTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyLkh1bWFub2lkUm9vdFBhcnQuQ0ZyYW1lID0gZ2FtZTpHZXRTZXJ2aWNlKCJXb3Jrc3BhY2UiKS5NYXAuSWNlLkRvb3IuQ0ZyYW1lCiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgaWYgZ2FtZTpHZXRTZXJ2aWNlKCJSZXBsaWNhdGVkU3RvcmFnZSIpLlJlbW90ZXMuQ29tbUZfOkludm9rZVNlcnZlcigiRHJlc3Nyb3NhUXVlc3RQcm9ncmVzcyIpLktpbGxlZEljZUJvc3MgPT0gZmFsc2UgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICBmb3IgXywgdiBpbiBwYWlycyhnYW1lLldvcmtzcGFjZS5FbmVtaWVzOkdldENoaWxkcmVuKCkpIGRvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiB2OkZpbmRGaXJzdENoaWxkKCJIdW1hbm9pZCIpIGFuZCB2OkZpbmRGaXJzdENoaWxkKCJIdW1hbm9pZFJvb3RQYXJ0IikgYW5kIHYuSHVtYW5vaWQuSGVhbHRoID4gMCB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgdi5OYW1lID09ICJJY2UgQWRtaXJhbCBbTHYuIDcwMF0gW0Jvc3NdIiB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcGVhdCB0YXNrLndhaXQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bnRpbCBub3QgQXV0b1NlY29uZFNlYSBvciBub3Qgdi5QYXJlbnQgb3Igdi5IdW1hbm9pZC5IZWFsdGggPD0gMAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgICAgICBnYW1lOkdldFNlcnZpY2UoIlJlcGxpY2F0ZWRTdG9yYWdlIikuUmVtb3Rlcy5Db21tRl86SW52b2tlU2VydmVyKCJEcmVzc3Jvc2FRdWVzdFByb2dyZXNzIiwgIkljZSBCb3NzIikKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgaWYgZ2FtZTpHZXRTZXJ2aWNlKCJSZXBsaWNhdGVkU3RvcmFnZSIpLlJlbW90ZXMuQ29tbUZfOkludm9rZVNlcnZlcigiRHJlc3Nyb3NhUXVlc3RQcm9ncmVzcyIpLktpbGxlZEljZUJvc3MgdGhlbgogICAgICAgICAgICAgICAgICAgIGdhbWU6R2V0U2VydmljZSgiUmVwbGljYXRlZFN0b3JhZ2UiKS5SZW1vdGVzLkNvbW1GXzpJbnZva2VTZXJ2ZXIoIlRyYXZlbERyZXNzcm9zYSIpCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICBlbmQKZW5kKQoKLS1DaGVzdCBGYXJtaW5nCgpsb2NhbCBjaGVzdHMgPSB7fQp0YXNrLnNwYXduKGZ1bmN0aW9uKCkKICAgIHdoaWxlIHRhc2sud2FpdCgpIGRvCiAgICAgICAgaWYgZ2V0Z2VudigpLkxvY2FsQ29uZmlnLkZhcm0uQ2hlc3RzIHRoZW4KICAgICAgICAgICAgaWYgI2NoZXN0cyA9PSAwIHRoZW4KICAgICAgICAgICAgICAgIGZvciBfLCB2IGluIGlwYWlycyh3b3Jrc3BhY2UuTWFwOkdldERlc2NlbmRhbnRzKCkpIGRvCiAgICAgICAgICAgICAgICAgICAgaWYgdi5OYW1lID09ICJDaGVzdHMiIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgZm9yIF8sIHYyIGluIGlwYWlycyh2OkdldENoaWxkcmVuKCkpIGRvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiB2Mi5OYW1lOm1hdGNoKCJeQ2hlc3QiKSBhbmQgdjIuQ2FuVG91Y2ggdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlLmluc2VydChjaGVzdHMsIHYyKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgIGZvciBfLCB2IGluIGlwYWlycyhjaGVzdHMpIGRvCiAgICAgICAgICAgICAgICAgICAgaWYgdiBhbmQgdi5DYW5Ub3VjaCB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIHJlcGVhdCB0YXNrLndhaXQoKSBnYW1lLlBsYXllcnMuTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyLkh1bWFub2lkUm9vdFBhcnQuQ0ZyYW1lID0gdi5DRnJhbWUKICAgICAgICAgICAgICAgICAgICAgICAgdW50aWwgbm90IHYuQ2FuVG91Y2ggb3IgZ2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLkNoYXJhY3Rlci5IdW1hbm9pZC5IZWFsdGggPT0gMAogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZAogICAgICAgIGVsc2UKICAgICAgICAgICAgY2hlc3RzID0ge30KICAgICAgICBlbmQKICAgIGVuZAplbmQpCgotLVNhYmVyIEZhcm1pbmcKdGFzay5zcGF3bihmdW5jdGlvbigpCiAgICB3aGlsZSB0YXNrLndhaXQoKSBkbwogICAgICAgIGlmIGdldGdlbnYoKS5Mb2NhbENvbmZpZ1siR2V0IEl0ZW0iXS5Td29yZFsiU2FiZXIiXSB0aGVuCiAgICAgICAgICAgIGlmIGdhbWUuUGxheWVycy5Mb2NhbFBsYXllci5EYXRhLkxldmVsLlZhbHVlID49IDIwMCB0aGVuCiAgICAgICAgICAgICAgICBpZiBub3QgZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikuTG9jYWxQbGF5ZXIuQmFja3BhY2s6RmluZEZpcnN0Q2hpbGQoIlNhYmVyIikgYW5kIG5vdCBnYW1lLlBsYXllcnMuTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyOkZpbmRGaXJzdENoaWxkKCJTYWJlciIpIHRoZW4KICAgICAgICAgICAgICAgICAgICBpZiB3b3Jrc3BhY2UuTWFwLkp1bmdsZS5GaW5hbC5QYXJ0LlRyYW5zcGFyZW5jeSA9PSAwIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgaWYgd29ya3NwYWNlLk1hcC5KdW5nbGUuUXVlc3RQbGF0ZXMuRG9vci5UcmFuc3BhcmVuY3kgPT0gMCB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgaSA9IDEsIDUgZG8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiB3b3Jrc3BhY2UuTWFwLkp1bmdsZS5RdWVzdFBsYXRlc1siUGxhdGUiIC4uIGldLkJ1dHRvbi5Db2xvciA9PSBDb2xvcjMuZnJvbVJHQig5MCwgNzYsIDY2KSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRlbGVwb3J0KHdvcmtzcGFjZS5NYXAuSnVuZ2xlLlF1ZXN0UGxhdGVzWyJQbGF0ZSIgLi4gaV0uQnV0dG9uLkNGcmFtZSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFzay53YWl0KDEpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIHdvcmtzcGFjZS5NYXAuRGVzZXJ0LkJ1cm4uUGFydC5UcmFuc3BhcmVuY3kgPT0gMCB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikuTG9jYWxQbGF5ZXIuQmFja3BhY2s6RmluZEZpcnN0Q2hpbGQoIlRvcmNoIikgb3IgZ2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLkNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZCgiVG9yY2giKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFR3ZWVuKHdvcmtzcGFjZS5NYXAuRGVzZXJ0LkJ1cm4uV29ybGRQaXZvdCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdhbWUuUGxheWVycy5Mb2NhbFBsYXllci5DaGFyYWN0ZXIuSHVtYW5vaWRSb290UGFydC5DRnJhbWUgPSB3b3Jrc3BhY2UuTWFwLkp1bmdsZS5Ub3JjaC5DRnJhbWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBnYW1lOkdldFNlcnZpY2UoIlJlcGxpY2F0ZWRTdG9yYWdlIikuUmVtb3Rlcy5Db21tRl86SW52b2tlU2VydmVyKCJQcm9RdWVzdFByb2dyZXNzIiwgIlNpY2tNYW4iKSB+PSAwIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZTpHZXRTZXJ2aWNlKCJSZXBsaWNhdGVkU3RvcmFnZSIpLlJlbW90ZXMuQ29tbUZfOkludm9rZVNlcnZlcigiUHJvUXVlc3RQcm9ncmVzcyIsICJHZXRDdXAiKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBFcXVpcCgiQ3VwIikKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZTpHZXRTZXJ2aWNlKCJSZXBsaWNhdGVkU3RvcmFnZSIpLlJlbW90ZXMuQ29tbUZfOkludm9rZVNlcnZlcigiUHJvUXVlc3RQcm9ncmVzcyIsICJGaWxsQ3VwIiwgZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikuTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyLkN1cCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZTpHZXRTZXJ2aWNlKCJSZXBsaWNhdGVkU3RvcmFnZSIpLlJlbW90ZXMuQ29tbUZfOkludm9rZVNlcnZlcigiUHJvUXVlc3RQcm9ncmVzcyIsICJTaWNrTWFuIikKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGdhbWU6R2V0U2VydmljZSgiUmVwbGljYXRlZFN0b3JhZ2UiKS5SZW1vdGVzLkNvbW1GXzpJbnZva2VTZXJ2ZXIoIlByb1F1ZXN0UHJvZ3Jlc3MiLCAiUmljaFNvbiIpID09IG5pbCB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnYW1lOkdldFNlcnZpY2UoIlJlcGxpY2F0ZWRTdG9yYWdlIikuUmVtb3Rlcy5Db21tRl86SW52b2tlU2VydmVyKCJQcm9RdWVzdFByb2dyZXNzIiwgIlJpY2hTb24iKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlaWYgZ2FtZTpHZXRTZXJ2aWNlKCJSZXBsaWNhdGVkU3RvcmFnZSIpLlJlbW90ZXMuQ29tbUZfOkludm9rZVNlcnZlcigiUHJvUXVlc3RQcm9ncmVzcyIsICJSaWNoU29uIikgPT0gMCB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLSBpZiBnYW1lOkdldFNlcnZpY2UoIldvcmtzcGFjZSIpLkVuZW1pZXM6RmluZEZpcnN0Q2hpbGQoIk1vYiBMZWFkZXIgW0x2LiAxMjBdIFtCb3NzXSIpIG9yIGdhbWU6R2V0U2VydmljZSgiUmVwbGljYXRlZFN0b3JhZ2UiKTpGaW5kRmlyc3RDaGlsZCgiTW9iIExlYWRlciBbTHYuIDEyMF0gW0Jvc3NdIikgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLS0gICAgIGZvciBfLCB2IGluIHBhaXJzKGdhbWUuV29ya3NwYWNlLkVuZW1pZXM6R2V0Q2hpbGRyZW4oKSkgZG8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tICAgICAgICAgaWYgdjpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWQiKSBhbmQgdjpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWRSb290UGFydCIpIGFuZCB2Lkh1bWFub2lkLkhlYWx0aCA+IDAgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLS0gICAgICAgICAgICAgaWYgdi5OYW1lID09ICJNb2IgTGVhZGVyIFtMdi4gMTIwXSBbQm9zc10iIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tICAgICAgICAgICAgICAgICAtLUZhcm0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLS0gICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tIGVuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlaWYgZ2FtZTpHZXRTZXJ2aWNlKCJSZXBsaWNhdGVkU3RvcmFnZSIpLlJlbW90ZXMuQ29tbUZfOkludm9rZVNlcnZlcigiUHJvUXVlc3RQcm9ncmVzcyIsICJSaWNoU29uIikgPT0gMSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnYW1lOkdldFNlcnZpY2UoIlJlcGxpY2F0ZWRTdG9yYWdlIikuUmVtb3Rlcy5Db21tRl86SW52b2tlU2VydmVyKCJQcm9RdWVzdFByb2dyZXNzIiwgIlJpY2hTb24iKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRXF1aXAoIlJlbGljIikKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFR3ZWVuKHdvcmtzcGFjZS5NYXAuSnVuZ2xlLkZpbmFsKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgIC0tIGlmIGdhbWU6R2V0U2VydmljZSgiV29ya3NwYWNlIikuRW5lbWllczpGaW5kRmlyc3RDaGlsZCgiU2FiZXIgRXhwZXJ0IFtMdi4gMjAwXSBbQm9zc10iKSBvciBnYW1lOkdldFNlcnZpY2UoIlJlcGxpY2F0ZWRTdG9yYWdlIik6RmluZEZpcnN0Q2hpbGQoIlNhYmVyIEV4cGVydCBbTHYuIDIwMF0gW0Jvc3NdIikgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAtLSAgICAgZm9yIGksIHYgaW4gcGFpcnMoZ2FtZTpHZXRTZXJ2aWNlKCJXb3Jrc3BhY2UiKS5FbmVtaWVzOkdldENoaWxkcmVuKCkpIGRvCiAgICAgICAgICAgICAgICAgICAgICAgIC0tICAgICAgICAgaWYgdjpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWQiKSBhbmQgdjpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWRSb290UGFydCIpIGFuZCB2Lkh1bWFub2lkLkhlYWx0aCA+IDAgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAtLSAgICAgICAgICAgICBpZiB2Lk5hbWUgPT0gIlNhYmVyIEV4cGVydCBbTHYuIDIwMF0gW0Jvc3NdIiB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIC0tICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgICAgICAtLSAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgICAgICAtLSAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgICAgIC0tIGVuZAogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVsc2UgRmx1ZW50Ok5vdGlmeSh7VGl0bGUgPSAiWW91IGFyZSBub3QgbGV2ZWwgMjAwIiwgQ29udGVudCA9ICJQbGVhc2UgbGV2ZWwgdXAgdG8gMjAwIiwgRHVyYXRpb24gPSA1fSkKICAgICAgICAgICAgICAgIEZsdWVudC5PcHRpb25zLkF1dG9TYWJlcjpTZXRWYWx1ZShmYWxzZSkKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICBlbmQKZW5kKQoKCiAgICBSdW5TY3JpcHRCdXR0b24uVGV4dCA9ICLinIUgU2NyaXB0IExvYWRlZCEiCiAgICBSdW5TY3JpcHRCdXR0b24uQmFja2dyb3VuZENvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDUwLCAyMDUsIDUwKSAtLSBNw6B1IHhhbmggbMOhCiAgICB3YWl0KDIpCiAgICBSdW5TY3JpcHRCdXR0b24uVGV4dCA9ICLilrbvuI8gUnVuIFdBSEggSHViIC0gQmxveCBGcnVpdHMiCiAgICBSdW5TY3JpcHRCdXR0b24uQmFja2dyb3VuZENvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDMwLCAxNDQsIDI1NSkgLS0gVHLhu58gbOG6oWkgbcOgdSBjxakKZW5kKQoKLS0g8J+agCBN4bufIG3hurdjIMSR4buLbmggdGFiIEludHJvZHVjZQpzd2l0Y2hUYWIoIkludHJvZHVjZSIpCgo="
local function decode(data)
    local b='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
    data = string.gsub(data, '[^'..b..'=]', '')
    return (data:gsub('.', function(x)
        if (x == '=') then return '' end
        local r,f='',(b:find(x)-1)
        for i=6,1,-1 do r=r..(f%2^i-f%2^(i-1)>0 and '1' or '0') end
        return r
    end):gsub('%d%d%d?%d?%d?%d?%d?%d?', function(x)
        if (#x ~= 8) then return '' end
        local c=0
        for i=1,8 do c=c+(x:sub(i,i)=='1' and 2^(8-i) or 0) end
        return string.char(c)
    end))
end

local success, result = pcall(loadstring(decode(b64)))
if not success then
    print("Error executing script:", result)
end
